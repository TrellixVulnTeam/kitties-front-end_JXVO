{"ast":null,"code":"import _slicedToArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { catchError, combineLatest, map, of, take } from 'rxjs';\nimport { assert, compactFromU8a } from '@polkadot/util'; // the order and types needs to map with the all array setup below\n\nvar NumberMap = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten'];\n\nfunction mapCapabilities(_ref, _ref2, _ref3, _ref4) {\n  var accountIdLength = _ref.accountIdLength,\n      refcount1Length = _ref.refcount1Length,\n      refcount2Length = _ref.refcount2Length,\n      refcount3Length = _ref.refcount3Length;\n\n  var _ref5 = _slicedToArray(_ref2, 2),\n      leasePeriodsPerSlot = _ref5[0],\n      slotRangeCount = _ref5[1];\n\n  var _ref6 = _slicedToArray(_ref3, 1),\n      stakingVersion = _ref6[0];\n\n  var _ref7 = _slicedToArray(_ref4, 2),\n      keys = _ref7[0],\n      accountInfo = _ref7[1];\n\n  var types = {}; // AccountInfo\n\n  if (accountInfo) {\n    var length = accountInfo.length;\n\n    if (length === refcount1Length) {\n      types.AccountInfo = 'AccountInfoWithRefCount';\n    } else if (length === refcount2Length) {\n      types.AccountInfo = 'AccountInfoWithDualRefCount';\n    } else if (length === refcount3Length) {\n      types.AccountInfo = 'AccountInfoWithTripleRefCount';\n    }\n  } // ValidatorPrefs\n\n\n  if (stakingVersion) {\n    if (stakingVersion.index >= 4) {\n      // v1 = index 0, V5 = index 4\n      types.ValidatorPrefs = 'ValidatorPrefsWithBlocked';\n    } else {\n      types.ValidatorPrefs = 'ValidatorPrefsWithCommission';\n    }\n  } // Keys\n\n\n  if (keys) {\n    try {\n      var _compactFromU8a = compactFromU8a(keys),\n          _compactFromU8a2 = _slicedToArray(_compactFromU8a, 2),\n          offset = _compactFromU8a2[0],\n          numItems = _compactFromU8a2[1];\n\n      var tupleLength = (keys.length - offset) / numItems.toNumber();\n      var numIds = tupleLength / accountIdLength;\n      var numIdsRound = Math.floor(numIds);\n      assert(numIds >= 2 && numIds <= 11, function () {\n        return \"Detected \".concat(numIds, \" in Keys, should be >= 2 and <= 11\");\n      });\n\n      if (numIdsRound !== numIds) {\n        // Beefy?\n        if ((numIdsRound - 1) * accountIdLength + 33 === tupleLength) {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          types.Keys = \"SessionKeys\".concat(numIdsRound - 1, \"B\");\n        } else {\n          assert(false, function () {\n            return \"Expected integer number of keys, found \".concat(numIds.toFixed(2));\n          });\n        }\n      } else {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        types.Keys = \"SessionKeys\".concat(numIds - 1);\n      }\n    } catch (_unused) {// ignore\n    }\n  } // auctions\n\n\n  if (leasePeriodsPerSlot && slotRangeCount) {\n    var _enum = [];\n\n    for (var i = 0; leasePeriodsPerSlot.gtn(i); i++) {\n      for (var j = i; leasePeriodsPerSlot.gtn(j); j++) {\n        _enum.push(\"\".concat(NumberMap[i]).concat(NumberMap[j]));\n      }\n    }\n\n    types.SlotRange = {\n      _enum: _enum\n    };\n    types.WinningData = \"[WinningDataEntry; \".concat(slotRangeCount.toNumber(), \"]\");\n  }\n\n  return types;\n}\n\nfunction filterEntries(original) {\n  var included = original.map(function (c) {\n    return !!c;\n  });\n  return {\n    filtered: original.filter(function (_, index) {\n      return included[index];\n    }),\n    included: included,\n    original: original\n  };\n}\n\nfunction extractResults(results, map) {\n  var offset = -1;\n  return map.included.map(function (isIncluded) {\n    return isIncluded ? results[++offset] : null;\n  });\n}\n/**\n * @description Query the chain for the specific capabilities\n */\n\n\nexport function detectedCapabilities(api, blockHash) {\n  var _api$consts$auctions, _api$consts$auctions2, _api$query$staking, _api$query$session, _api$query$system, _api$query$system$acc;\n\n  var emptyAccountId = api.registry.createType('AccountId');\n  var consts = filterEntries([(_api$consts$auctions = api.consts.auctions) === null || _api$consts$auctions === void 0 ? void 0 : _api$consts$auctions.leasePeriodsPerSlot, (_api$consts$auctions2 = api.consts.auctions) === null || _api$consts$auctions2 === void 0 ? void 0 : _api$consts$auctions2.slotRangeCount]);\n  var queries = filterEntries([(_api$query$staking = api.query.staking) === null || _api$query$staking === void 0 ? void 0 : _api$query$staking.storageVersion]);\n  var raws = filterEntries([(_api$query$session = api.query.session) === null || _api$query$session === void 0 ? void 0 : _api$query$session.queuedKeys.key(), (_api$query$system = api.query.system) === null || _api$query$system === void 0 ? void 0 : (_api$query$system$acc = _api$query$system.account) === null || _api$query$system$acc === void 0 ? void 0 : _api$query$system$acc.key(emptyAccountId)]);\n  return combineLatest([consts.filtered.length ? blockHash // FIXME consts don't have .at as of yet...\n  ? of([]) : of(consts.filtered) : of([]), queries.filtered.length ? blockHash ? combineLatest(queries.filtered.map(function (c) {\n    return c.at(blockHash);\n  })) : api.queryMulti(queries.filtered) : of([]), raws.filtered.length ? blockHash ? combineLatest(raws.filtered.map(function (k) {\n    return api.rpc.state.getStorage.raw(k, blockHash);\n  })) : combineLatest(raws.filtered.map(function (k) {\n    return api.rpc.state.getStorage.raw(k);\n  })) : of([])]).pipe(map(function (_ref8) {\n    var _ref9 = _slicedToArray(_ref8, 3),\n        cResults = _ref9[0],\n        qResults = _ref9[1],\n        rResults = _ref9[2];\n\n    return mapCapabilities({\n      accountIdLength: emptyAccountId.encodedLength,\n      refcount1Length: api.registry.createType('AccountInfoWithRefCount').encodedLength,\n      refcount2Length: api.registry.createType('AccountInfoWithDualRefCount').encodedLength,\n      refcount3Length: api.registry.createType('AccountInfoWithTripleRefCount').encodedLength\n    }, extractResults(cResults, consts), extractResults(qResults, queries), extractResults(rResults, raws));\n  }), take(1), catchError(function () {\n    return of({});\n  }));\n}","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/api/base/capabilities.js"],"names":["catchError","combineLatest","map","of","take","assert","compactFromU8a","NumberMap","mapCapabilities","accountIdLength","refcount1Length","refcount2Length","refcount3Length","leasePeriodsPerSlot","slotRangeCount","stakingVersion","keys","accountInfo","types","length","AccountInfo","index","ValidatorPrefs","offset","numItems","tupleLength","toNumber","numIds","numIdsRound","Math","floor","Keys","toFixed","_enum","i","gtn","j","push","SlotRange","WinningData","filterEntries","original","included","c","filtered","filter","_","extractResults","results","isIncluded","detectedCapabilities","api","blockHash","_api$consts$auctions","_api$consts$auctions2","_api$query$staking","_api$query$session","_api$query$system","_api$query$system$acc","emptyAccountId","registry","createType","consts","auctions","queries","query","staking","storageVersion","raws","session","queuedKeys","key","system","account","at","queryMulti","k","rpc","state","getStorage","raw","pipe","cResults","qResults","rResults","encodedLength"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { catchError, combineLatest, map, of, take } from 'rxjs';\nimport { assert, compactFromU8a } from '@polkadot/util'; // the order and types needs to map with the all array setup below\n\nconst NumberMap = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten'];\n\nfunction mapCapabilities({\n  accountIdLength,\n  refcount1Length,\n  refcount2Length,\n  refcount3Length\n}, [leasePeriodsPerSlot, slotRangeCount], [stakingVersion], [keys, accountInfo]) {\n  const types = {}; // AccountInfo\n\n  if (accountInfo) {\n    const length = accountInfo.length;\n\n    if (length === refcount1Length) {\n      types.AccountInfo = 'AccountInfoWithRefCount';\n    } else if (length === refcount2Length) {\n      types.AccountInfo = 'AccountInfoWithDualRefCount';\n    } else if (length === refcount3Length) {\n      types.AccountInfo = 'AccountInfoWithTripleRefCount';\n    }\n  } // ValidatorPrefs\n\n\n  if (stakingVersion) {\n    if (stakingVersion.index >= 4) {\n      // v1 = index 0, V5 = index 4\n      types.ValidatorPrefs = 'ValidatorPrefsWithBlocked';\n    } else {\n      types.ValidatorPrefs = 'ValidatorPrefsWithCommission';\n    }\n  } // Keys\n\n\n  if (keys) {\n    try {\n      const [offset, numItems] = compactFromU8a(keys);\n      const tupleLength = (keys.length - offset) / numItems.toNumber();\n      const numIds = tupleLength / accountIdLength;\n      const numIdsRound = Math.floor(numIds);\n      assert(numIds >= 2 && numIds <= 11, () => `Detected ${numIds} in Keys, should be >= 2 and <= 11`);\n\n      if (numIdsRound !== numIds) {\n        // Beefy?\n        if ((numIdsRound - 1) * accountIdLength + 33 === tupleLength) {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          types.Keys = `SessionKeys${numIdsRound - 1}B`;\n        } else {\n          assert(false, () => `Expected integer number of keys, found ${numIds.toFixed(2)}`);\n        }\n      } else {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        types.Keys = `SessionKeys${numIds - 1}`;\n      }\n    } catch {// ignore\n    }\n  } // auctions\n\n\n  if (leasePeriodsPerSlot && slotRangeCount) {\n    const _enum = [];\n\n    for (let i = 0; leasePeriodsPerSlot.gtn(i); i++) {\n      for (let j = i; leasePeriodsPerSlot.gtn(j); j++) {\n        _enum.push(`${NumberMap[i]}${NumberMap[j]}`);\n      }\n    }\n\n    types.SlotRange = {\n      _enum\n    };\n    types.WinningData = `[WinningDataEntry; ${slotRangeCount.toNumber()}]`;\n  }\n\n  return types;\n}\n\nfunction filterEntries(original) {\n  const included = original.map(c => !!c);\n  return {\n    filtered: original.filter((_, index) => included[index]),\n    included,\n    original\n  };\n}\n\nfunction extractResults(results, map) {\n  let offset = -1;\n  return map.included.map(isIncluded => isIncluded ? results[++offset] : null);\n}\n/**\n * @description Query the chain for the specific capabilities\n */\n\n\nexport function detectedCapabilities(api, blockHash) {\n  var _api$consts$auctions, _api$consts$auctions2, _api$query$staking, _api$query$session, _api$query$system, _api$query$system$acc;\n\n  const emptyAccountId = api.registry.createType('AccountId');\n  const consts = filterEntries([(_api$consts$auctions = api.consts.auctions) === null || _api$consts$auctions === void 0 ? void 0 : _api$consts$auctions.leasePeriodsPerSlot, (_api$consts$auctions2 = api.consts.auctions) === null || _api$consts$auctions2 === void 0 ? void 0 : _api$consts$auctions2.slotRangeCount]);\n  const queries = filterEntries([(_api$query$staking = api.query.staking) === null || _api$query$staking === void 0 ? void 0 : _api$query$staking.storageVersion]);\n  const raws = filterEntries([(_api$query$session = api.query.session) === null || _api$query$session === void 0 ? void 0 : _api$query$session.queuedKeys.key(), (_api$query$system = api.query.system) === null || _api$query$system === void 0 ? void 0 : (_api$query$system$acc = _api$query$system.account) === null || _api$query$system$acc === void 0 ? void 0 : _api$query$system$acc.key(emptyAccountId)]);\n  return combineLatest([consts.filtered.length ? blockHash // FIXME consts don't have .at as of yet...\n  ? of([]) : of(consts.filtered) : of([]), queries.filtered.length ? blockHash ? combineLatest(queries.filtered.map(c => c.at(blockHash))) : api.queryMulti(queries.filtered) : of([]), raws.filtered.length ? blockHash ? combineLatest(raws.filtered.map(k => api.rpc.state.getStorage.raw(k, blockHash))) : combineLatest(raws.filtered.map(k => api.rpc.state.getStorage.raw(k))) : of([])]).pipe(map(([cResults, qResults, rResults]) => mapCapabilities({\n    accountIdLength: emptyAccountId.encodedLength,\n    refcount1Length: api.registry.createType('AccountInfoWithRefCount').encodedLength,\n    refcount2Length: api.registry.createType('AccountInfoWithDualRefCount').encodedLength,\n    refcount3Length: api.registry.createType('AccountInfoWithTripleRefCount').encodedLength\n  }, extractResults(cResults, consts), extractResults(qResults, queries), extractResults(rResults, raws))), take(1), catchError(() => of({})));\n}"]},"metadata":{},"sourceType":"module"}