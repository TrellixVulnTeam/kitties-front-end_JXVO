{"ast":null,"code":"import _defineProperty from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _infoMapping;\n\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isNumber, isUndefined, stringify } from '@polkadot/util';\nimport { BTreeMap, BTreeSet, CodecSet, Compact, DoNotConstruct, Enum, HashMap, Int, Option, Range, RangeInclusive, Result, Struct, Tuple, U8aFixed, UInt, Vec, VecFixed } from \"../codec/index.js\";\nimport { Bytes, Null } from \"../primitive/index.js\";\nimport { getTypeDef } from \"./getTypeDef.js\";\nimport { TypeDefInfo } from \"./types.js\";\n\nfunction getSubDefArray(value) {\n  assert(value.sub && Array.isArray(value.sub), function () {\n    return \"Expected subtype as TypeDef[] in \".concat(stringify(value));\n  });\n  return value.sub;\n}\n\nfunction getSubDef(value) {\n  assert(value.sub && !Array.isArray(value.sub), function () {\n    return \"Expected subtype as TypeDef in \".concat(stringify(value));\n  });\n  return value.sub;\n}\n\nfunction getSubType(value) {\n  return getSubDef(value).type;\n} // create a maps of type string constructors from the input\n\n\nfunction getTypeClassMap(value) {\n  var result = {};\n  return getSubDefArray(value).reduce(function (result, sub) {\n    result[sub.name] = sub.type;\n    return result;\n  }, result);\n} // create an array of type string constructors from the input\n\n\nfunction getTypeClassArray(value) {\n  return getSubDefArray(value).map(function (_ref) {\n    var type = _ref.type;\n    return type;\n  });\n}\n\nfunction createInt(_ref2, Clazz) {\n  var displayName = _ref2.displayName,\n      length = _ref2.length;\n  assert(isNumber(length), function () {\n    return \"Expected bitLength information for \".concat(displayName || Clazz.constructor.name, \"<bitLength>\");\n  });\n  return Clazz.with(length, displayName);\n}\n\nfunction createHashMap(value, Clazz) {\n  var _getTypeClassArray = getTypeClassArray(value),\n      _getTypeClassArray2 = _slicedToArray(_getTypeClassArray, 2),\n      keyType = _getTypeClassArray2[0],\n      valueType = _getTypeClassArray2[1];\n\n  return Clazz.with(keyType, valueType);\n}\n\nvar infoMapping = (_infoMapping = {}, _defineProperty(_infoMapping, TypeDefInfo.BTreeMap, function (registry, value) {\n  return createHashMap(value, BTreeMap);\n}), _defineProperty(_infoMapping, TypeDefInfo.BTreeSet, function (registry, value) {\n  return BTreeSet.with(getSubType(value));\n}), _defineProperty(_infoMapping, TypeDefInfo.Compact, function (registry, value) {\n  return Compact.with(getSubType(value));\n}), _defineProperty(_infoMapping, TypeDefInfo.DoNotConstruct, function (registry, value) {\n  return DoNotConstruct.with(value.displayName || value.type);\n}), _defineProperty(_infoMapping, TypeDefInfo.Enum, function (registry, value) {\n  var subs = getSubDefArray(value);\n  return Enum.with(subs.every(function (_ref3) {\n    var type = _ref3.type;\n    return type === 'Null';\n  }) ? subs.reduce(function (out, _ref4, count) {\n    var index = _ref4.index,\n        name = _ref4.name;\n    out[name] = index || count;\n    return out;\n  }, {}) : getTypeClassMap(value));\n}), _defineProperty(_infoMapping, TypeDefInfo.HashMap, function (registry, value) {\n  return createHashMap(value, HashMap);\n}), _defineProperty(_infoMapping, TypeDefInfo.Int, function (registry, value) {\n  return createInt(value, Int);\n}), _defineProperty(_infoMapping, TypeDefInfo.Linkage, function (registry, value) {\n  var type = \"Option<\".concat(getSubType(value), \">\"); // eslint-disable-next-line sort-keys\n\n  var Clazz = Struct.with({\n    previous: type,\n    next: type\n  }); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n  Clazz.prototype.toRawType = function () {\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call\n    return \"Linkage<\".concat(this.next.toRawType(true), \">\");\n  };\n\n  return Clazz;\n}), _defineProperty(_infoMapping, TypeDefInfo.Null, function (registry, _) {\n  return Null;\n}), _defineProperty(_infoMapping, TypeDefInfo.Option, function (registry, value) {\n  return Option.with(getSubType(value));\n}), _defineProperty(_infoMapping, TypeDefInfo.Plain, function (registry, value) {\n  return registry.getOrUnknown(value.type);\n}), _defineProperty(_infoMapping, TypeDefInfo.Range, function (registry, value) {\n  return (value.type.includes('RangeInclusive') ? RangeInclusive : Range).with(getSubType(value));\n}), _defineProperty(_infoMapping, TypeDefInfo.Result, function (registry, value) {\n  var _getTypeClassArray3 = getTypeClassArray(value),\n      _getTypeClassArray4 = _slicedToArray(_getTypeClassArray3, 2),\n      Ok = _getTypeClassArray4[0],\n      Err = _getTypeClassArray4[1]; // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n\n  return Result.with({\n    Err: Err,\n    Ok: Ok\n  });\n}), _defineProperty(_infoMapping, TypeDefInfo.Set, function (registry, value) {\n  var result = {};\n  return CodecSet.with(getSubDefArray(value).reduce(function (result, _ref5) {\n    var index = _ref5.index,\n        name = _ref5.name;\n    result[name] = index;\n    return result;\n  }, result), value.length);\n}), _defineProperty(_infoMapping, TypeDefInfo.Si, function (registry, value) {\n  return getTypeClass(registry, registry.lookup.getTypeDef(value.type));\n}), _defineProperty(_infoMapping, TypeDefInfo.Struct, function (registry, value) {\n  return Struct.with(getTypeClassMap(value), value.alias);\n}), _defineProperty(_infoMapping, TypeDefInfo.Tuple, function (registry, value) {\n  return Tuple.with(getTypeClassArray(value));\n}), _defineProperty(_infoMapping, TypeDefInfo.UInt, function (registry, value) {\n  return createInt(value, UInt);\n}), _defineProperty(_infoMapping, TypeDefInfo.Vec, function (registry, value) {\n  var subType = getSubType(value);\n  return subType === 'u8' ? Bytes : Vec.with(subType);\n}), _defineProperty(_infoMapping, TypeDefInfo.VecFixed, function (registry, _ref6) {\n  var displayName = _ref6.displayName,\n      length = _ref6.length,\n      sub = _ref6.sub;\n  assert(isNumber(length) && !isUndefined(sub), 'Expected length & type information for fixed vector');\n  var subType = sub.type;\n  return subType === 'u8' ? U8aFixed.with(length * 8, displayName) : VecFixed.with(subType, length);\n}), _infoMapping); // Returns the type Class for construction\n\nexport function getTypeClass(registry, typeDef) {\n  var Type = registry.get(typeDef.type);\n\n  if (Type) {\n    return Type;\n  }\n\n  try {\n    Type = infoMapping[typeDef.info](registry, typeDef);\n    assert(Type, 'No class created'); // don't clobber any existing\n\n    if (!Type.__fallbackType && typeDef.fallbackType) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore ...this is the only place we we actually assign this...\n      Type.__fallbackType = typeDef.fallbackType;\n    }\n\n    return Type;\n  } catch (error) {\n    throw new Error(\"Unable to construct class from \".concat(stringify(typeDef), \": \").concat(error.message));\n  }\n}\nexport function createClass(registry, type) {\n  return getTypeClass(registry, registry.isLookupType(type) ? registry.lookup.getTypeDef(type) : getTypeDef(type));\n}","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types/create/createClass.js"],"names":["assert","isNumber","isUndefined","stringify","BTreeMap","BTreeSet","CodecSet","Compact","DoNotConstruct","Enum","HashMap","Int","Option","Range","RangeInclusive","Result","Struct","Tuple","U8aFixed","UInt","Vec","VecFixed","Bytes","Null","getTypeDef","TypeDefInfo","getSubDefArray","value","sub","Array","isArray","getSubDef","getSubType","type","getTypeClassMap","result","reduce","name","getTypeClassArray","map","createInt","Clazz","displayName","length","constructor","with","createHashMap","keyType","valueType","infoMapping","registry","subs","every","out","count","index","Linkage","previous","next","prototype","toRawType","_","Plain","getOrUnknown","includes","Ok","Err","Set","Si","getTypeClass","lookup","alias","subType","typeDef","Type","get","info","__fallbackType","fallbackType","error","Error","message","createClass","isLookupType"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isNumber, isUndefined, stringify } from '@polkadot/util';\nimport { BTreeMap, BTreeSet, CodecSet, Compact, DoNotConstruct, Enum, HashMap, Int, Option, Range, RangeInclusive, Result, Struct, Tuple, U8aFixed, UInt, Vec, VecFixed } from \"../codec/index.js\";\nimport { Bytes, Null } from \"../primitive/index.js\";\nimport { getTypeDef } from \"./getTypeDef.js\";\nimport { TypeDefInfo } from \"./types.js\";\n\nfunction getSubDefArray(value) {\n  assert(value.sub && Array.isArray(value.sub), () => `Expected subtype as TypeDef[] in ${stringify(value)}`);\n  return value.sub;\n}\n\nfunction getSubDef(value) {\n  assert(value.sub && !Array.isArray(value.sub), () => `Expected subtype as TypeDef in ${stringify(value)}`);\n  return value.sub;\n}\n\nfunction getSubType(value) {\n  return getSubDef(value).type;\n} // create a maps of type string constructors from the input\n\n\nfunction getTypeClassMap(value) {\n  const result = {};\n  return getSubDefArray(value).reduce((result, sub) => {\n    result[sub.name] = sub.type;\n    return result;\n  }, result);\n} // create an array of type string constructors from the input\n\n\nfunction getTypeClassArray(value) {\n  return getSubDefArray(value).map(({\n    type\n  }) => type);\n}\n\nfunction createInt({\n  displayName,\n  length\n}, Clazz) {\n  assert(isNumber(length), () => `Expected bitLength information for ${displayName || Clazz.constructor.name}<bitLength>`);\n  return Clazz.with(length, displayName);\n}\n\nfunction createHashMap(value, Clazz) {\n  const [keyType, valueType] = getTypeClassArray(value);\n  return Clazz.with(keyType, valueType);\n}\n\nconst infoMapping = {\n  [TypeDefInfo.BTreeMap]: (registry, value) => createHashMap(value, BTreeMap),\n  [TypeDefInfo.BTreeSet]: (registry, value) => BTreeSet.with(getSubType(value)),\n  [TypeDefInfo.Compact]: (registry, value) => Compact.with(getSubType(value)),\n  [TypeDefInfo.DoNotConstruct]: (registry, value) => DoNotConstruct.with(value.displayName || value.type),\n  [TypeDefInfo.Enum]: (registry, value) => {\n    const subs = getSubDefArray(value);\n    return Enum.with(subs.every(({\n      type\n    }) => type === 'Null') ? subs.reduce((out, {\n      index,\n      name\n    }, count) => {\n      out[name] = index || count;\n      return out;\n    }, {}) : getTypeClassMap(value));\n  },\n  [TypeDefInfo.HashMap]: (registry, value) => createHashMap(value, HashMap),\n  [TypeDefInfo.Int]: (registry, value) => createInt(value, Int),\n  // We have circular deps between Linkage & Struct\n  [TypeDefInfo.Linkage]: (registry, value) => {\n    const type = `Option<${getSubType(value)}>`; // eslint-disable-next-line sort-keys\n\n    const Clazz = Struct.with({\n      previous: type,\n      next: type\n    }); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n    Clazz.prototype.toRawType = function () {\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call\n      return `Linkage<${this.next.toRawType(true)}>`;\n    };\n\n    return Clazz;\n  },\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  [TypeDefInfo.Null]: (registry, _) => Null,\n  [TypeDefInfo.Option]: (registry, value) => Option.with(getSubType(value)),\n  [TypeDefInfo.Plain]: (registry, value) => registry.getOrUnknown(value.type),\n  [TypeDefInfo.Range]: (registry, value) => (value.type.includes('RangeInclusive') ? RangeInclusive : Range).with(getSubType(value)),\n  [TypeDefInfo.Result]: (registry, value) => {\n    const [Ok, Err] = getTypeClassArray(value); // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n    return Result.with({\n      Err,\n      Ok\n    });\n  },\n  [TypeDefInfo.Set]: (registry, value) => {\n    const result = {};\n    return CodecSet.with(getSubDefArray(value).reduce((result, {\n      index,\n      name\n    }) => {\n      result[name] = index;\n      return result;\n    }, result), value.length);\n  },\n  [TypeDefInfo.Si]: (registry, value) => getTypeClass(registry, registry.lookup.getTypeDef(value.type)),\n  [TypeDefInfo.Struct]: (registry, value) => Struct.with(getTypeClassMap(value), value.alias),\n  [TypeDefInfo.Tuple]: (registry, value) => Tuple.with(getTypeClassArray(value)),\n  [TypeDefInfo.UInt]: (registry, value) => createInt(value, UInt),\n  [TypeDefInfo.Vec]: (registry, value) => {\n    const subType = getSubType(value);\n    return subType === 'u8' ? Bytes : Vec.with(subType);\n  },\n  [TypeDefInfo.VecFixed]: (registry, {\n    displayName,\n    length,\n    sub\n  }) => {\n    assert(isNumber(length) && !isUndefined(sub), 'Expected length & type information for fixed vector');\n    const subType = sub.type;\n    return subType === 'u8' ? U8aFixed.with(length * 8, displayName) : VecFixed.with(subType, length);\n  }\n}; // Returns the type Class for construction\n\nexport function getTypeClass(registry, typeDef) {\n  let Type = registry.get(typeDef.type);\n\n  if (Type) {\n    return Type;\n  }\n\n  try {\n    Type = infoMapping[typeDef.info](registry, typeDef);\n    assert(Type, 'No class created'); // don't clobber any existing\n\n    if (!Type.__fallbackType && typeDef.fallbackType) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore ...this is the only place we we actually assign this...\n      Type.__fallbackType = typeDef.fallbackType;\n    }\n\n    return Type;\n  } catch (error) {\n    throw new Error(`Unable to construct class from ${stringify(typeDef)}: ${error.message}`);\n  }\n}\nexport function createClass(registry, type) {\n  return getTypeClass(registry, registry.isLookupType(type) ? registry.lookup.getTypeDef(type) : getTypeDef(type));\n}"]},"metadata":{},"sourceType":"module"}