{"ast":null,"code":"// Copyright 2017-2021 @polkadot/rpc-core authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { asapScheduler, Observable, Subscription } from 'rxjs';\n/** @internal */\n\nexport function refCountDelay() {\n  var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1750;\n  return function (source) {\n    // state: 0 = disconnected, 1 = disconnecting, 2 = connecting, 3 = connected\n    var _ref = [0, 0, Subscription.EMPTY, Subscription.EMPTY],\n        state = _ref[0],\n        refCount = _ref[1],\n        connection = _ref[2],\n        scheduler = _ref[3];\n    return new Observable(function (ob) {\n      source.subscribe(ob);\n\n      if (refCount++ === 0) {\n        if (state === 1) {\n          scheduler.unsubscribe();\n        } else {\n          connection = source.connect();\n        }\n\n        state = 3;\n      }\n\n      return function () {\n        if (--refCount === 0) {\n          if (state === 2) {\n            state = 0;\n            scheduler.unsubscribe();\n          } else {\n            // state === 3\n            state = 1;\n            scheduler = asapScheduler.schedule(function () {\n              state = 0;\n              connection.unsubscribe();\n            }, delay);\n          }\n        }\n      };\n    });\n  };\n}","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/rpc-core/util/refCountDelay.js"],"names":["asapScheduler","Observable","Subscription","refCountDelay","delay","source","EMPTY","state","refCount","connection","scheduler","ob","subscribe","unsubscribe","connect","schedule"],"mappings":"AAAA;AACA;AACA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,YAApC,QAAwD,MAAxD;AACA;;AAEA,OAAO,SAASC,aAAT,GAAqC;AAAA,MAAdC,KAAc,uEAAN,IAAM;AAC1C,SAAO,UAAAC,MAAM,EAAI;AACf;AACA,eAA+C,CAAC,CAAD,EAAI,CAAJ,EAAOH,YAAY,CAACI,KAApB,EAA2BJ,YAAY,CAACI,KAAxC,CAA/C;AAAA,QAAKC,KAAL;AAAA,QAAYC,QAAZ;AAAA,QAAsBC,UAAtB;AAAA,QAAkCC,SAAlC;AACA,WAAO,IAAIT,UAAJ,CAAe,UAAAU,EAAE,EAAI;AAC1BN,MAAAA,MAAM,CAACO,SAAP,CAAiBD,EAAjB;;AAEA,UAAIH,QAAQ,OAAO,CAAnB,EAAsB;AACpB,YAAID,KAAK,KAAK,CAAd,EAAiB;AACfG,UAAAA,SAAS,CAACG,WAAV;AACD,SAFD,MAEO;AACLJ,UAAAA,UAAU,GAAGJ,MAAM,CAACS,OAAP,EAAb;AACD;;AAEDP,QAAAA,KAAK,GAAG,CAAR;AACD;;AAED,aAAO,YAAM;AACX,YAAI,EAAEC,QAAF,KAAe,CAAnB,EAAsB;AACpB,cAAID,KAAK,KAAK,CAAd,EAAiB;AACfA,YAAAA,KAAK,GAAG,CAAR;AACAG,YAAAA,SAAS,CAACG,WAAV;AACD,WAHD,MAGO;AACL;AACAN,YAAAA,KAAK,GAAG,CAAR;AACAG,YAAAA,SAAS,GAAGV,aAAa,CAACe,QAAd,CAAuB,YAAM;AACvCR,cAAAA,KAAK,GAAG,CAAR;AACAE,cAAAA,UAAU,CAACI,WAAX;AACD,aAHW,EAGTT,KAHS,CAAZ;AAID;AACF;AACF,OAdD;AAeD,KA5BM,CAAP;AA6BD,GAhCD;AAiCD","sourcesContent":["// Copyright 2017-2021 @polkadot/rpc-core authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { asapScheduler, Observable, Subscription } from 'rxjs';\n/** @internal */\n\nexport function refCountDelay(delay = 1750) {\n  return source => {\n    // state: 0 = disconnected, 1 = disconnecting, 2 = connecting, 3 = connected\n    let [state, refCount, connection, scheduler] = [0, 0, Subscription.EMPTY, Subscription.EMPTY];\n    return new Observable(ob => {\n      source.subscribe(ob);\n\n      if (refCount++ === 0) {\n        if (state === 1) {\n          scheduler.unsubscribe();\n        } else {\n          connection = source.connect();\n        }\n\n        state = 3;\n      }\n\n      return () => {\n        if (--refCount === 0) {\n          if (state === 2) {\n            state = 0;\n            scheduler.unsubscribe();\n          } else {\n            // state === 3\n            state = 1;\n            scheduler = asapScheduler.schedule(() => {\n              state = 0;\n              connection.unsubscribe();\n            }, delay);\n          }\n        }\n      };\n    });\n  };\n}"]},"metadata":{},"sourceType":"module"}