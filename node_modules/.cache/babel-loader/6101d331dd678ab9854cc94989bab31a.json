{"ast":null,"code":"import _slicedToArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nimport { u8aToHex } from '@polkadot/util';\nimport { Struct } from \"../codec/Struct.js\";\nvar knownTypes = {\n  address: 'Address',\n  blockHash: 'Hash',\n  blockNumber: 'BlockNumber',\n  era: 'ExtrinsicEra',\n  genesisHash: 'Hash',\n  method: 'Call',\n  nonce: 'Compact<Index>',\n  runtimeVersion: 'RuntimeVersion',\n  signedExtensions: 'Vec<Text>',\n  tip: 'Compact<Balance>',\n  version: 'u8'\n};\n/**\n * @name GenericSignerPayload\n * @description\n * A generic signer payload that can be used for serialization between API and signer\n */\n\nexport var GenericSignerPayload = /*#__PURE__*/function (_Struct) {\n  _inherits(GenericSignerPayload, _Struct);\n\n  var _super = _createSuper(GenericSignerPayload);\n\n  function GenericSignerPayload(registry, value) {\n    var _this;\n\n    _classCallCheck(this, GenericSignerPayload);\n\n    var extensionTypes = _objectSpread(_objectSpread({}, registry.getSignedExtensionTypes()), registry.getSignedExtensionExtra());\n\n    _this = _super.call(this, registry, _objectSpread(_objectSpread({}, extensionTypes), knownTypes), value); // add all extras that are not in the base types\n\n    _this._extraTypes = void 0;\n    _this._extraTypes = Object.entries(extensionTypes).reduce(function (map, _ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          type = _ref2[1];\n\n      if (!knownTypes[key]) {\n        map[key] = type;\n      }\n\n      return map;\n    }, {});\n    return _this;\n  }\n\n  _createClass(GenericSignerPayload, [{\n    key: \"address\",\n    get: function get() {\n      return this.get('address');\n    }\n  }, {\n    key: \"blockHash\",\n    get: function get() {\n      return this.get('blockHash');\n    }\n  }, {\n    key: \"blockNumber\",\n    get: function get() {\n      return this.get('blockNumber');\n    }\n  }, {\n    key: \"era\",\n    get: function get() {\n      return this.get('era');\n    }\n  }, {\n    key: \"genesisHash\",\n    get: function get() {\n      return this.get('genesisHash');\n    }\n  }, {\n    key: \"method\",\n    get: function get() {\n      return this.get('method');\n    }\n  }, {\n    key: \"nonce\",\n    get: function get() {\n      return this.get('nonce');\n    }\n  }, {\n    key: \"runtimeVersion\",\n    get: function get() {\n      return this.get('runtimeVersion');\n    }\n  }, {\n    key: \"signedExtensions\",\n    get: function get() {\n      return this.get('signedExtensions');\n    }\n  }, {\n    key: \"tip\",\n    get: function get() {\n      return this.get('tip');\n    }\n  }, {\n    key: \"version\",\n    get: function get() {\n      return this.get('version');\n    }\n    /**\n     * @description Creates an representation of the structure as an ISignerPayload JSON\n     */\n\n  }, {\n    key: \"toPayload\",\n    value: function toPayload() {\n      var _this2 = this;\n\n      return _objectSpread(_objectSpread({}, Object.keys(this._extraTypes).reduce(function (map, key) {\n        map[key] = _this2.get(key).toHex();\n        return map;\n      }, {})), {}, {\n        // the known defaults as managed explicitly and has different\n        // formatting in cases, e.g. we mostly expose a hex format here\n        address: this.address.toString(),\n        blockHash: this.blockHash.toHex(),\n        blockNumber: this.blockNumber.toHex(),\n        era: this.era.toHex(),\n        genesisHash: this.genesisHash.toHex(),\n        method: this.method.toHex(),\n        nonce: this.nonce.toHex(),\n        signedExtensions: this.signedExtensions.map(function (e) {\n          return e.toString();\n        }),\n        specVersion: this.runtimeVersion.specVersion.toHex(),\n        tip: this.tip.toHex(),\n        transactionVersion: this.runtimeVersion.transactionVersion.toHex(),\n        version: this.version.toNumber()\n      });\n    }\n    /**\n     * @description Creates a representation of the payload in raw Exrinsic form\n     */\n\n  }, {\n    key: \"toRaw\",\n    value: function toRaw() {\n      var payload = this.toPayload();\n      var data = u8aToHex(this.registry.createType('ExtrinsicPayload', payload, {\n        version: payload.version\n      }) // NOTE Explicitly pass the bare flag so the method is encoded un-prefixed (non-decodable, for signing only)\n      .toU8a({\n        method: true\n      }));\n      return {\n        address: payload.address,\n        data: data,\n        type: 'payload'\n      };\n    }\n  }]);\n\n  return GenericSignerPayload;\n}(Struct);","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types/extrinsic/SignerPayload.js"],"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","u8aToHex","Struct","knownTypes","address","blockHash","blockNumber","era","genesisHash","method","nonce","runtimeVersion","signedExtensions","tip","version","GenericSignerPayload","registry","value","extensionTypes","getSignedExtensionTypes","getSignedExtensionExtra","_extraTypes","entries","reduce","map","type","get","toHex","toString","e","specVersion","transactionVersion","toNumber","payload","toPayload","data","createType","toU8a"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { u8aToHex } from '@polkadot/util';\nimport { Struct } from \"../codec/Struct.js\";\nconst knownTypes = {\n  address: 'Address',\n  blockHash: 'Hash',\n  blockNumber: 'BlockNumber',\n  era: 'ExtrinsicEra',\n  genesisHash: 'Hash',\n  method: 'Call',\n  nonce: 'Compact<Index>',\n  runtimeVersion: 'RuntimeVersion',\n  signedExtensions: 'Vec<Text>',\n  tip: 'Compact<Balance>',\n  version: 'u8'\n};\n/**\n * @name GenericSignerPayload\n * @description\n * A generic signer payload that can be used for serialization between API and signer\n */\n\nexport class GenericSignerPayload extends Struct {\n  constructor(registry, value) {\n    const extensionTypes = _objectSpread(_objectSpread({}, registry.getSignedExtensionTypes()), registry.getSignedExtensionExtra());\n\n    super(registry, _objectSpread(_objectSpread({}, extensionTypes), knownTypes), value); // add all extras that are not in the base types\n\n    this._extraTypes = void 0;\n    this._extraTypes = Object.entries(extensionTypes).reduce((map, [key, type]) => {\n      if (!knownTypes[key]) {\n        map[key] = type;\n      }\n\n      return map;\n    }, {});\n  }\n\n  get address() {\n    return this.get('address');\n  }\n\n  get blockHash() {\n    return this.get('blockHash');\n  }\n\n  get blockNumber() {\n    return this.get('blockNumber');\n  }\n\n  get era() {\n    return this.get('era');\n  }\n\n  get genesisHash() {\n    return this.get('genesisHash');\n  }\n\n  get method() {\n    return this.get('method');\n  }\n\n  get nonce() {\n    return this.get('nonce');\n  }\n\n  get runtimeVersion() {\n    return this.get('runtimeVersion');\n  }\n\n  get signedExtensions() {\n    return this.get('signedExtensions');\n  }\n\n  get tip() {\n    return this.get('tip');\n  }\n\n  get version() {\n    return this.get('version');\n  }\n  /**\n   * @description Creates an representation of the structure as an ISignerPayload JSON\n   */\n\n\n  toPayload() {\n    return _objectSpread(_objectSpread({}, Object.keys(this._extraTypes).reduce((map, key) => {\n      map[key] = this.get(key).toHex();\n      return map;\n    }, {})), {}, {\n      // the known defaults as managed explicitly and has different\n      // formatting in cases, e.g. we mostly expose a hex format here\n      address: this.address.toString(),\n      blockHash: this.blockHash.toHex(),\n      blockNumber: this.blockNumber.toHex(),\n      era: this.era.toHex(),\n      genesisHash: this.genesisHash.toHex(),\n      method: this.method.toHex(),\n      nonce: this.nonce.toHex(),\n      signedExtensions: this.signedExtensions.map(e => e.toString()),\n      specVersion: this.runtimeVersion.specVersion.toHex(),\n      tip: this.tip.toHex(),\n      transactionVersion: this.runtimeVersion.transactionVersion.toHex(),\n      version: this.version.toNumber()\n    });\n  }\n  /**\n   * @description Creates a representation of the payload in raw Exrinsic form\n   */\n\n\n  toRaw() {\n    const payload = this.toPayload();\n    const data = u8aToHex(this.registry.createType('ExtrinsicPayload', payload, {\n      version: payload.version\n    }) // NOTE Explicitly pass the bare flag so the method is encoded un-prefixed (non-decodable, for signing only)\n    .toU8a({\n      method: true\n    }));\n    return {\n      address: payload.address,\n      data,\n      type: 'payload'\n    };\n  }\n\n}"]},"metadata":{},"sourceType":"module"}