{"ast":null,"code":"import _slicedToArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest, map, of, switchMap } from 'rxjs';\nimport { memo } from \"../util/index.js\";\nexport function nextElected(instanceId, api) {\n  return memo(instanceId, function () {\n    return api.query.staking.erasStakers ? api.derive.session.indexes().pipe( // only populate for next era in the last session, so track both here - entries are not\n    // subscriptions, so we need a trigger - currentIndex acts as that trigger to refresh\n    switchMap(function (_ref) {\n      var currentEra = _ref.currentEra;\n      return api.query.staking.erasStakers.keys(currentEra);\n    }), map(function (keys) {\n      return keys.map(function (_ref2) {\n        var _ref2$args = _slicedToArray(_ref2.args, 2),\n            accountId = _ref2$args[1];\n\n        return accountId;\n      });\n    })) : api.query.staking.currentElected();\n  });\n}\n/**\n * @description Retrieve latest list of validators\n */\n\nexport function validators(instanceId, api) {\n  return memo(instanceId, function () {\n    return (// Sadly the node-template is (for some obscure reason) not comprehensive, so while the derive works\n      // in all actual real-world deployed chains, it does create some confusion for limited template chains\n      combineLatest([api.query.session ? api.query.session.validators() : of([]), api.query.staking ? api.derive.staking.nextElected() : of([])]).pipe(map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            validators = _ref4[0],\n            nextElected = _ref4[1];\n\n        return {\n          nextElected: nextElected.length ? nextElected : validators,\n          validators: validators\n        };\n      }))\n    );\n  });\n}","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/api-derive/staking/validators.js"],"names":["combineLatest","map","of","switchMap","memo","nextElected","instanceId","api","query","staking","erasStakers","derive","session","indexes","pipe","currentEra","keys","args","accountId","currentElected","validators","length"],"mappings":";AAAA;AACA;AACA,SAASA,aAAT,EAAwBC,GAAxB,EAA6BC,EAA7B,EAAiCC,SAAjC,QAAkD,MAAlD;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAO,SAASC,WAAT,CAAqBC,UAArB,EAAiCC,GAAjC,EAAsC;AAC3C,SAAOH,IAAI,CAACE,UAAD,EAAa;AAAA,WAAMC,GAAG,CAACC,KAAJ,CAAUC,OAAV,CAAkBC,WAAlB,GAAgCH,GAAG,CAACI,MAAJ,CAAWC,OAAX,CAAmBC,OAAnB,GAA6BC,IAA7B,EAAmC;AACjG;AACAX,IAAAA,SAAS,CAAC;AAAA,UACRY,UADQ,QACRA,UADQ;AAAA,aAEJR,GAAG,CAACC,KAAJ,CAAUC,OAAV,CAAkBC,WAAlB,CAA8BM,IAA9B,CAAmCD,UAAnC,CAFI;AAAA,KAAD,CAFqD,EAIPd,GAAG,CAAC,UAAAe,IAAI;AAAA,aAAIA,IAAI,CAACf,GAAL,CAAS;AAAA,8CAC1EgB,IAD0E;AAAA,YACjEC,SADiE;;AAAA,eAEtEA,SAFsE;AAAA,OAAT,CAAJ;AAAA,KAAL,CAJI,CAAhC,GAMTX,GAAG,CAACC,KAAJ,CAAUC,OAAV,CAAkBU,cAAlB,EANG;AAAA,GAAb,CAAX;AAOD;AACD;AACA;AACA;;AAEA,OAAO,SAASC,UAAT,CAAoBd,UAApB,EAAgCC,GAAhC,EAAqC;AAC1C,SAAOH,IAAI,CAACE,UAAD,EAAa;AAAA,WAAM;AAC9B;AACAN,MAAAA,aAAa,CAAC,CAACO,GAAG,CAACC,KAAJ,CAAUI,OAAV,GAAoBL,GAAG,CAACC,KAAJ,CAAUI,OAAV,CAAkBQ,UAAlB,EAApB,GAAqDlB,EAAE,CAAC,EAAD,CAAxD,EAA8DK,GAAG,CAACC,KAAJ,CAAUC,OAAV,GAAoBF,GAAG,CAACI,MAAJ,CAAWF,OAAX,CAAmBJ,WAAnB,EAApB,GAAuDH,EAAE,CAAC,EAAD,CAAvH,CAAD,CAAb,CAA4IY,IAA5I,CAAiJb,GAAG,CAAC;AAAA;AAAA,YAAEmB,UAAF;AAAA,YAAcf,WAAd;;AAAA,eAAgC;AACnLA,UAAAA,WAAW,EAAEA,WAAW,CAACgB,MAAZ,GAAqBhB,WAArB,GAAmCe,UADmI;AAEnLA,UAAAA,UAAU,EAAVA;AAFmL,SAAhC;AAAA,OAAD,CAApJ;AAFwB;AAAA,GAAb,CAAX;AAMD","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest, map, of, switchMap } from 'rxjs';\nimport { memo } from \"../util/index.js\";\nexport function nextElected(instanceId, api) {\n  return memo(instanceId, () => api.query.staking.erasStakers ? api.derive.session.indexes().pipe( // only populate for next era in the last session, so track both here - entries are not\n  // subscriptions, so we need a trigger - currentIndex acts as that trigger to refresh\n  switchMap(({\n    currentEra\n  }) => api.query.staking.erasStakers.keys(currentEra)), map(keys => keys.map(({\n    args: [, accountId]\n  }) => accountId))) : api.query.staking.currentElected());\n}\n/**\n * @description Retrieve latest list of validators\n */\n\nexport function validators(instanceId, api) {\n  return memo(instanceId, () => // Sadly the node-template is (for some obscure reason) not comprehensive, so while the derive works\n  // in all actual real-world deployed chains, it does create some confusion for limited template chains\n  combineLatest([api.query.session ? api.query.session.validators() : of([]), api.query.staking ? api.derive.staking.nextElected() : of([])]).pipe(map(([validators, nextElected]) => ({\n    nextElected: nextElected.length ? nextElected : validators,\n    validators\n  }))));\n}"]},"metadata":{},"sourceType":"module"}