{"ast":null,"code":"import _slicedToArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, switchMap } from 'rxjs';\nimport { memo } from \"../util/index.js\";\nexport function _stakerExposures(instanceId, api) {\n  return memo(instanceId, function (accountIds, eras, withActive) {\n    var stakerIds = accountIds.map(function (a) {\n      return api.registry.createType('AccountId', a).toString();\n    });\n    return api.derive.staking._erasExposure(eras, withActive).pipe(map(function (exposures) {\n      return stakerIds.map(function (stakerId) {\n        return exposures.map(function (_ref) {\n          var era = _ref.era,\n              allNominators = _ref.nominators,\n              allValidators = _ref.validators;\n          var isValidator = !!allValidators[stakerId];\n          var validators = {};\n          var nominating = allNominators[stakerId] || [];\n\n          if (isValidator) {\n            validators[stakerId] = allValidators[stakerId];\n          } else if (nominating) {\n            nominating.forEach(function (_ref2) {\n              var validatorId = _ref2.validatorId;\n              validators[validatorId] = allValidators[validatorId];\n            });\n          }\n\n          return {\n            era: era,\n            isEmpty: !Object.keys(validators).length,\n            isValidator: isValidator,\n            nominating: nominating,\n            validators: validators\n          };\n        });\n      });\n    }));\n  });\n}\nexport function stakerExposures(instanceId, api) {\n  return memo(instanceId, function (accountIds) {\n    var withActive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return api.derive.staking.erasHistoric(withActive).pipe(switchMap(function (eras) {\n      return api.derive.staking._stakerExposures(accountIds, eras, withActive);\n    }));\n  });\n}\nexport function stakerExposure(instanceId, api) {\n  return memo(instanceId, function (accountId) {\n    var withActive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return api.derive.staking.stakerExposures([accountId, withActive]).pipe(map(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n          first = _ref4[0];\n\n      return first;\n    }));\n  });\n}","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/api-derive/staking/stakerExposure.js"],"names":["map","switchMap","memo","_stakerExposures","instanceId","api","accountIds","eras","withActive","stakerIds","a","registry","createType","toString","derive","staking","_erasExposure","pipe","exposures","stakerId","era","allNominators","nominators","allValidators","validators","isValidator","nominating","forEach","validatorId","isEmpty","Object","keys","length","stakerExposures","erasHistoric","stakerExposure","accountId","first"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, switchMap } from 'rxjs';\nimport { memo } from \"../util/index.js\";\nexport function _stakerExposures(instanceId, api) {\n  return memo(instanceId, (accountIds, eras, withActive) => {\n    const stakerIds = accountIds.map(a => api.registry.createType('AccountId', a).toString());\n    return api.derive.staking._erasExposure(eras, withActive).pipe(map(exposures => stakerIds.map(stakerId => exposures.map(({\n      era,\n      nominators: allNominators,\n      validators: allValidators\n    }) => {\n      const isValidator = !!allValidators[stakerId];\n      const validators = {};\n      const nominating = allNominators[stakerId] || [];\n\n      if (isValidator) {\n        validators[stakerId] = allValidators[stakerId];\n      } else if (nominating) {\n        nominating.forEach(({\n          validatorId\n        }) => {\n          validators[validatorId] = allValidators[validatorId];\n        });\n      }\n\n      return {\n        era,\n        isEmpty: !Object.keys(validators).length,\n        isValidator,\n        nominating,\n        validators\n      };\n    }))));\n  });\n}\nexport function stakerExposures(instanceId, api) {\n  return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerExposures(accountIds, eras, withActive))));\n}\nexport function stakerExposure(instanceId, api) {\n  return memo(instanceId, (accountId, withActive = false) => api.derive.staking.stakerExposures([accountId, withActive]).pipe(map(([first]) => first)));\n}"]},"metadata":{},"sourceType":"module"}