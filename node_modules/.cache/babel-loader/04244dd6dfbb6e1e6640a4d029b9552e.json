{"ast":null,"code":"import _slicedToArray from\"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{Form,Grid}from'semantic-ui-react';import{useSubstrate}from'./substrate-lib';import{TxButton}from'./substrate-lib/components';import KittyCards from'./KittyCards';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Kitties(props){var _useSubstrate=useSubstrate(),api=_useSubstrate.api,keyring=_useSubstrate.keyring;var accountPair=props.accountPair;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),kitties=_useState2[0],setKitties=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),status=_useState4[0],setStatus=_useState4[1];var fetchKitties=function fetchKitties(){// TODO: 在这里调用 `api.query.kittiesModule.*` 函数去取得猫咪的信息。\n// 你需要取得：\n//   - 共有多少只猫咪\n//   - 每只猫咪的主人是谁\n//   - 每只猫咪的 DNA 是什么，用来组合出它的形态\n};var populateKitties=function populateKitties(){// TODO: 在这里添加额外的逻辑。你需要组成这样的数组结构：\n//  ```javascript\n//  const kitties = [{\n//    id: 0,\n//    dna: ...,\n//    owner: ...\n//  }, { id: ..., dna: ..., owner: ... }]\n//  ```\n// 这个 kitties 会传入 <KittyCards/> 然后对每只猫咪进行处理\nvar kitties=[];setKitties(kitties);};useEffect(fetchKitties,[api,keyring]);useEffect(populateKitties,[]);return/*#__PURE__*/_jsxs(Grid.Column,{width:16,children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\u5C0F\\u6BDB\\u5B69\"}),/*#__PURE__*/_jsx(KittyCards,{kitties:kitties,accountPair:accountPair,setStatus:setStatus}),/*#__PURE__*/_jsx(Form,{style:{margin:'1em 0'},children:/*#__PURE__*/_jsx(Form.Field,{style:{textAlign:'center'},children:/*#__PURE__*/_jsx(TxButton,{accountPair:accountPair,label:\"\\u521B\\u5EFA\\u5C0F\\u6BDB\\u5B69\",type:\"SIGNED-TX\",setStatus:setStatus,attrs:{palletRpc:'kittiesModule',callable:'create',inputParams:[],paramFields:[]}})})}),/*#__PURE__*/_jsx(\"div\",{style:{overflowWrap:'break-word'},children:status})]});}","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/src/Kitties.js"],"names":["React","useEffect","useState","Form","Grid","useSubstrate","TxButton","KittyCards","Kitties","props","api","keyring","accountPair","kitties","setKitties","status","setStatus","fetchKitties","populateKitties","margin","textAlign","palletRpc","callable","inputParams","paramFields","overflowWrap"],"mappings":"wMAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,IAAT,CAAeC,IAAf,KAA2B,mBAA3B,CAEA,OAASC,YAAT,KAA6B,iBAA7B,CACA,OAASC,QAAT,KAAyB,4BAAzB,CAEA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,C,wFAEA,cAAe,SAASC,CAAAA,OAAT,CAAkBC,KAAlB,CAAyB,CACtC,kBAAyBJ,YAAY,EAArC,CAAQK,GAAR,eAAQA,GAAR,CAAaC,OAAb,eAAaA,OAAb,CACA,GAAQC,CAAAA,WAAR,CAAwBH,KAAxB,CAAQG,WAAR,CAEA,cAA8BV,QAAQ,CAAC,EAAD,CAAtC,wCAAOW,OAAP,eAAgBC,UAAhB,eACA,eAA4BZ,QAAQ,CAAC,EAAD,CAApC,yCAAOa,MAAP,eAAeC,SAAf,eAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACzB;AACA;AACA;AACA;AACA;AACD,CAND,CAQA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAML,CAAAA,OAAO,CAAG,EAAhB,CACAC,UAAU,CAACD,OAAD,CAAV,CACD,CAZD,CAcAZ,SAAS,CAACgB,YAAD,CAAe,CAACP,GAAD,CAAMC,OAAN,CAAf,CAAT,CACAV,SAAS,CAACiB,eAAD,CAAkB,EAAlB,CAAT,CAEA,mBAAO,MAAC,IAAD,CAAM,MAAN,EAAa,KAAK,CAAE,EAApB,wBACL,0CADK,cAEL,KAAC,UAAD,EAAY,OAAO,CAAEL,OAArB,CAA8B,WAAW,CAAED,WAA3C,CAAwD,SAAS,CAAEI,SAAnE,EAFK,cAGL,KAAC,IAAD,EAAM,KAAK,CAAE,CAAEG,MAAM,CAAE,OAAV,CAAb,uBACE,KAAC,IAAD,CAAM,KAAN,EAAY,KAAK,CAAE,CAAEC,SAAS,CAAE,QAAb,CAAnB,uBACE,KAAC,QAAD,EACE,WAAW,CAAER,WADf,CAC4B,KAAK,CAAC,gCADlC,CAC0C,IAAI,CAAC,WAD/C,CAC2D,SAAS,CAAEI,SADtE,CAEE,KAAK,CAAE,CACLK,SAAS,CAAE,eADN,CAELC,QAAQ,CAAE,QAFL,CAGLC,WAAW,CAAE,EAHR,CAILC,WAAW,CAAE,EAJR,CAFT,EADF,EADF,EAHK,cAgBL,YAAK,KAAK,CAAE,CAAEC,YAAY,CAAE,YAAhB,CAAZ,UAA6CV,MAA7C,EAhBK,GAAP,CAkBD","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Form, Grid } from 'semantic-ui-react'\n\nimport { useSubstrate } from './substrate-lib'\nimport { TxButton } from './substrate-lib/components'\n\nimport KittyCards from './KittyCards'\n\nexport default function Kitties (props) {\n  const { api, keyring } = useSubstrate()\n  const { accountPair } = props\n\n  const [kitties, setKitties] = useState([])\n  const [status, setStatus] = useState('')\n\n  const fetchKitties = () => {\n    // TODO: 在这里调用 `api.query.kittiesModule.*` 函数去取得猫咪的信息。\n    // 你需要取得：\n    //   - 共有多少只猫咪\n    //   - 每只猫咪的主人是谁\n    //   - 每只猫咪的 DNA 是什么，用来组合出它的形态\n  }\n\n  const populateKitties = () => {\n    // TODO: 在这里添加额外的逻辑。你需要组成这样的数组结构：\n    //  ```javascript\n    //  const kitties = [{\n    //    id: 0,\n    //    dna: ...,\n    //    owner: ...\n    //  }, { id: ..., dna: ..., owner: ... }]\n    //  ```\n    // 这个 kitties 会传入 <KittyCards/> 然后对每只猫咪进行处理\n    const kitties = []\n    setKitties(kitties)\n  }\n\n  useEffect(fetchKitties, [api, keyring])\n  useEffect(populateKitties, [])\n\n  return <Grid.Column width={16}>\n    <h1>小毛孩</h1>\n    <KittyCards kitties={kitties} accountPair={accountPair} setStatus={setStatus}/>\n    <Form style={{ margin: '1em 0' }}>\n      <Form.Field style={{ textAlign: 'center' }}>\n        <TxButton\n          accountPair={accountPair} label='创建小毛孩' type='SIGNED-TX' setStatus={setStatus}\n          attrs={{\n            palletRpc: 'kittiesModule',\n            callable: 'create',\n            inputParams: [],\n            paramFields: []\n          }}\n        />\n      </Form.Field>\n    </Form>\n    <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n  </Grid.Column>\n}\n"]},"metadata":{},"sourceType":"module"}