{"ast":null,"code":"import _slicedToArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nimport { combineLatest, map, of, switchMap } from 'rxjs';\nimport { BN_BILLION, BN_ZERO } from '@polkadot/util';\nimport { memo } from \"../util/index.js\";\n\nfunction parseRewards(api, stashId, _ref, exposures) {\n  var _ref2 = _slicedToArray(_ref, 3),\n      erasPoints = _ref2[0],\n      erasPrefs = _ref2[1],\n      erasRewards = _ref2[2];\n\n  return exposures.map(function (_ref3) {\n    var era = _ref3.era,\n        isEmpty = _ref3.isEmpty,\n        isValidator = _ref3.isValidator,\n        nominating = _ref3.nominating,\n        eraValidators = _ref3.validators;\n\n    var _ref4 = erasPoints.find(function (p) {\n      return p.era.eq(era);\n    }) || {\n      eraPoints: BN_ZERO,\n      validators: {}\n    },\n        eraPoints = _ref4.eraPoints,\n        allValPoints = _ref4.validators;\n\n    var _ref5 = erasRewards.find(function (r) {\n      return r.era.eq(era);\n    }) || {\n      eraReward: api.registry.createType('Balance')\n    },\n        eraReward = _ref5.eraReward;\n\n    var _ref6 = erasPrefs.find(function (p) {\n      return p.era.eq(era);\n    }) || {\n      validators: {}\n    },\n        allValPrefs = _ref6.validators;\n\n    var validators = {};\n    var stakerId = stashId.toString();\n    Object.entries(eraValidators).forEach(function (_ref7) {\n      var _ref8 = _slicedToArray(_ref7, 2),\n          validatorId = _ref8[0],\n          exposure = _ref8[1];\n\n      var _allValPrefs$validato, _exposure$total;\n\n      var valPoints = allValPoints[validatorId] || BN_ZERO;\n      var valComm = ((_allValPrefs$validato = allValPrefs[validatorId]) === null || _allValPrefs$validato === void 0 ? void 0 : _allValPrefs$validato.commission.unwrap()) || BN_ZERO;\n      var expTotal = ((_exposure$total = exposure.total) === null || _exposure$total === void 0 ? void 0 : _exposure$total.unwrap()) || BN_ZERO;\n      var avail = BN_ZERO;\n      var value;\n\n      if (!(expTotal.isZero() || valPoints.isZero() || eraPoints.isZero())) {\n        avail = eraReward.mul(valPoints).div(eraPoints);\n        var valCut = valComm.mul(avail).div(BN_BILLION);\n        var staked;\n\n        if (validatorId === stakerId) {\n          staked = exposure.own.unwrap();\n        } else {\n          var stakerExp = exposure.others.find(function (_ref9) {\n            var who = _ref9.who;\n            return who.eq(stakerId);\n          });\n          staked = stakerExp ? stakerExp.value.unwrap() : BN_ZERO;\n        }\n\n        value = avail.sub(valCut).imul(staked).div(expTotal).iadd(validatorId === stakerId ? valCut : BN_ZERO);\n      }\n\n      validators[validatorId] = {\n        total: api.registry.createType('Balance', avail),\n        value: api.registry.createType('Balance', value)\n      };\n    });\n    return {\n      era: era,\n      eraReward: eraReward,\n      isEmpty: isEmpty,\n      isValidator: isValidator,\n      nominating: nominating,\n      validators: validators\n    };\n  });\n}\n\nfunction allUniqValidators(rewards) {\n  return rewards.reduce(function (_ref10, rewards) {\n    var _ref11 = _slicedToArray(_ref10, 2),\n        all = _ref11[0],\n        perStash = _ref11[1];\n\n    var uniq = [];\n    perStash.push(uniq);\n    rewards.forEach(function (_ref12) {\n      var validators = _ref12.validators;\n      return Object.keys(validators).forEach(function (validatorId) {\n        if (!uniq.includes(validatorId)) {\n          uniq.push(validatorId);\n\n          if (!all.includes(validatorId)) {\n            all.push(validatorId);\n          }\n        }\n      });\n    });\n    return [all, perStash];\n  }, [[], []]);\n}\n\nfunction removeClaimed(validators, queryValidators, reward) {\n  var rm = [];\n  Object.keys(reward.validators).forEach(function (validatorId) {\n    var index = validators.indexOf(validatorId);\n\n    if (index !== -1) {\n      var valLedger = queryValidators[index].stakingLedger;\n\n      if (valLedger !== null && valLedger !== void 0 && valLedger.claimedRewards.some(function (era) {\n        return reward.era.eq(era);\n      })) {\n        rm.push(validatorId);\n      }\n    }\n  });\n  rm.forEach(function (validatorId) {\n    delete reward.validators[validatorId];\n  });\n}\n\nfunction filterRewards(eras, valInfo, _ref13) {\n  var rewards = _ref13.rewards,\n      stakingLedger = _ref13.stakingLedger;\n  var filter = eras.filter(function (era) {\n    return !stakingLedger.claimedRewards.some(function (e) {\n      return e.eq(era);\n    });\n  });\n  var validators = valInfo.map(function (_ref14) {\n    var _ref15 = _slicedToArray(_ref14, 1),\n        v = _ref15[0];\n\n    return v;\n  });\n  var queryValidators = valInfo.map(function (_ref16) {\n    var _ref17 = _slicedToArray(_ref16, 2),\n        q = _ref17[1];\n\n    return q;\n  });\n  return rewards.filter(function (_ref18) {\n    var isEmpty = _ref18.isEmpty;\n    return !isEmpty;\n  }).filter(function (reward) {\n    if (!filter.some(function (filter) {\n      return reward.era.eq(filter);\n    })) {\n      return false;\n    }\n\n    removeClaimed(validators, queryValidators, reward);\n    return true;\n  }).filter(function (_ref19) {\n    var validators = _ref19.validators;\n    return Object.keys(validators).length !== 0;\n  }).map(function (reward) {\n    return _objectSpread(_objectSpread({}, reward), {}, {\n      nominators: reward.nominating.filter(function (n) {\n        return reward.validators[n.validatorId];\n      })\n    });\n  });\n}\n\nexport function _stakerRewardsEras(instanceId, api) {\n  return memo(instanceId, function (eras, withActive) {\n    return combineLatest([api.derive.staking._erasPoints(eras, withActive), api.derive.staking._erasPrefs(eras, withActive), api.derive.staking._erasRewards(eras, withActive)]);\n  });\n}\nexport function _stakerRewards(instanceId, api) {\n  return memo(instanceId, function (accountIds, eras, withActive) {\n    return combineLatest([api.derive.staking.queryMulti(accountIds, {\n      withLedger: true\n    }), api.derive.staking._stakerExposures(accountIds, eras, withActive), api.derive.staking._stakerRewardsEras(eras, withActive)]).pipe(switchMap(function (_ref20) {\n      var _ref21 = _slicedToArray(_ref20, 3),\n          queries = _ref21[0],\n          exposures = _ref21[1],\n          erasResult = _ref21[2];\n\n      var allRewards = queries.map(function (_ref22, index) {\n        var stakingLedger = _ref22.stakingLedger,\n            stashId = _ref22.stashId;\n        return !stashId || !stakingLedger ? [] : parseRewards(api, stashId, erasResult, exposures[index]);\n      });\n\n      if (withActive) {\n        return of(allRewards);\n      }\n\n      var _allUniqValidators = allUniqValidators(allRewards),\n          _allUniqValidators2 = _slicedToArray(_allUniqValidators, 2),\n          allValidators = _allUniqValidators2[0],\n          stashValidators = _allUniqValidators2[1];\n\n      return api.derive.staking.queryMulti(allValidators, {\n        withLedger: true\n      }).pipe(map(function (queriedVals) {\n        return queries.map(function (_ref23, index) {\n          var stakingLedger = _ref23.stakingLedger;\n          return filterRewards(eras, stashValidators[index].map(function (validatorId) {\n            return [validatorId, queriedVals.find(function (q) {\n              return q.accountId.eq(validatorId);\n            })];\n          }), {\n            rewards: allRewards[index],\n            stakingLedger: stakingLedger\n          });\n        });\n      }));\n    }));\n  });\n}\nexport function stakerRewards(instanceId, api) {\n  return memo(instanceId, function (accountId) {\n    var withActive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return api.derive.staking.erasHistoric(withActive).pipe(switchMap(function (eras) {\n      return api.derive.staking._stakerRewards([accountId], eras, withActive);\n    }), map(function (_ref24) {\n      var _ref25 = _slicedToArray(_ref24, 1),\n          first = _ref25[0];\n\n      return first;\n    }));\n  });\n}\nexport function stakerRewardsMultiEras(instanceId, api) {\n  return memo(instanceId, function (accountIds, eras) {\n    return accountIds.length && eras.length ? api.derive.staking._stakerRewards(accountIds, eras, false) : of([]);\n  });\n}\nexport function stakerRewardsMulti(instanceId, api) {\n  return memo(instanceId, function (accountIds) {\n    var withActive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return api.derive.staking.erasHistoric(withActive).pipe(switchMap(function (eras) {\n      return api.derive.staking.stakerRewardsMultiEras(accountIds, eras);\n    }));\n  });\n}","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/api-derive/staking/stakerRewards.js"],"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","combineLatest","map","of","switchMap","BN_BILLION","BN_ZERO","memo","parseRewards","api","stashId","exposures","erasPoints","erasPrefs","erasRewards","era","isEmpty","isValidator","nominating","eraValidators","validators","find","p","eq","eraPoints","allValPoints","r","eraReward","registry","createType","allValPrefs","stakerId","toString","entries","validatorId","exposure","_allValPrefs$validato","_exposure$total","valPoints","valComm","commission","unwrap","expTotal","total","avail","value","isZero","mul","div","valCut","staked","own","stakerExp","others","who","sub","imul","iadd","allUniqValidators","rewards","reduce","all","perStash","uniq","includes","removeClaimed","queryValidators","reward","rm","index","indexOf","valLedger","stakingLedger","claimedRewards","some","filterRewards","eras","valInfo","e","v","q","nominators","n","_stakerRewardsEras","instanceId","withActive","derive","staking","_erasPoints","_erasPrefs","_erasRewards","_stakerRewards","accountIds","queryMulti","withLedger","_stakerExposures","pipe","queries","erasResult","allRewards","allValidators","stashValidators","queriedVals","accountId","stakerRewards","erasHistoric","first","stakerRewardsMultiEras","stakerRewardsMulti"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest, map, of, switchMap } from 'rxjs';\nimport { BN_BILLION, BN_ZERO } from '@polkadot/util';\nimport { memo } from \"../util/index.js\";\n\nfunction parseRewards(api, stashId, [erasPoints, erasPrefs, erasRewards], exposures) {\n  return exposures.map(({\n    era,\n    isEmpty,\n    isValidator,\n    nominating,\n    validators: eraValidators\n  }) => {\n    const {\n      eraPoints,\n      validators: allValPoints\n    } = erasPoints.find(p => p.era.eq(era)) || {\n      eraPoints: BN_ZERO,\n      validators: {}\n    };\n    const {\n      eraReward\n    } = erasRewards.find(r => r.era.eq(era)) || {\n      eraReward: api.registry.createType('Balance')\n    };\n    const {\n      validators: allValPrefs\n    } = erasPrefs.find(p => p.era.eq(era)) || {\n      validators: {}\n    };\n    const validators = {};\n    const stakerId = stashId.toString();\n    Object.entries(eraValidators).forEach(([validatorId, exposure]) => {\n      var _allValPrefs$validato, _exposure$total;\n\n      const valPoints = allValPoints[validatorId] || BN_ZERO;\n      const valComm = ((_allValPrefs$validato = allValPrefs[validatorId]) === null || _allValPrefs$validato === void 0 ? void 0 : _allValPrefs$validato.commission.unwrap()) || BN_ZERO;\n      const expTotal = ((_exposure$total = exposure.total) === null || _exposure$total === void 0 ? void 0 : _exposure$total.unwrap()) || BN_ZERO;\n      let avail = BN_ZERO;\n      let value;\n\n      if (!(expTotal.isZero() || valPoints.isZero() || eraPoints.isZero())) {\n        avail = eraReward.mul(valPoints).div(eraPoints);\n        const valCut = valComm.mul(avail).div(BN_BILLION);\n        let staked;\n\n        if (validatorId === stakerId) {\n          staked = exposure.own.unwrap();\n        } else {\n          const stakerExp = exposure.others.find(({\n            who\n          }) => who.eq(stakerId));\n          staked = stakerExp ? stakerExp.value.unwrap() : BN_ZERO;\n        }\n\n        value = avail.sub(valCut).imul(staked).div(expTotal).iadd(validatorId === stakerId ? valCut : BN_ZERO);\n      }\n\n      validators[validatorId] = {\n        total: api.registry.createType('Balance', avail),\n        value: api.registry.createType('Balance', value)\n      };\n    });\n    return {\n      era,\n      eraReward,\n      isEmpty,\n      isValidator,\n      nominating,\n      validators\n    };\n  });\n}\n\nfunction allUniqValidators(rewards) {\n  return rewards.reduce(([all, perStash], rewards) => {\n    const uniq = [];\n    perStash.push(uniq);\n    rewards.forEach(({\n      validators\n    }) => Object.keys(validators).forEach(validatorId => {\n      if (!uniq.includes(validatorId)) {\n        uniq.push(validatorId);\n\n        if (!all.includes(validatorId)) {\n          all.push(validatorId);\n        }\n      }\n    }));\n    return [all, perStash];\n  }, [[], []]);\n}\n\nfunction removeClaimed(validators, queryValidators, reward) {\n  const rm = [];\n  Object.keys(reward.validators).forEach(validatorId => {\n    const index = validators.indexOf(validatorId);\n\n    if (index !== -1) {\n      const valLedger = queryValidators[index].stakingLedger;\n\n      if (valLedger !== null && valLedger !== void 0 && valLedger.claimedRewards.some(era => reward.era.eq(era))) {\n        rm.push(validatorId);\n      }\n    }\n  });\n  rm.forEach(validatorId => {\n    delete reward.validators[validatorId];\n  });\n}\n\nfunction filterRewards(eras, valInfo, {\n  rewards,\n  stakingLedger\n}) {\n  const filter = eras.filter(era => !stakingLedger.claimedRewards.some(e => e.eq(era)));\n  const validators = valInfo.map(([v]) => v);\n  const queryValidators = valInfo.map(([, q]) => q);\n  return rewards.filter(({\n    isEmpty\n  }) => !isEmpty).filter(reward => {\n    if (!filter.some(filter => reward.era.eq(filter))) {\n      return false;\n    }\n\n    removeClaimed(validators, queryValidators, reward);\n    return true;\n  }).filter(({\n    validators\n  }) => Object.keys(validators).length !== 0).map(reward => _objectSpread(_objectSpread({}, reward), {}, {\n    nominators: reward.nominating.filter(n => reward.validators[n.validatorId])\n  }));\n}\n\nexport function _stakerRewardsEras(instanceId, api) {\n  return memo(instanceId, (eras, withActive) => combineLatest([api.derive.staking._erasPoints(eras, withActive), api.derive.staking._erasPrefs(eras, withActive), api.derive.staking._erasRewards(eras, withActive)]));\n}\nexport function _stakerRewards(instanceId, api) {\n  return memo(instanceId, (accountIds, eras, withActive) => combineLatest([api.derive.staking.queryMulti(accountIds, {\n    withLedger: true\n  }), api.derive.staking._stakerExposures(accountIds, eras, withActive), api.derive.staking._stakerRewardsEras(eras, withActive)]).pipe(switchMap(([queries, exposures, erasResult]) => {\n    const allRewards = queries.map(({\n      stakingLedger,\n      stashId\n    }, index) => !stashId || !stakingLedger ? [] : parseRewards(api, stashId, erasResult, exposures[index]));\n\n    if (withActive) {\n      return of(allRewards);\n    }\n\n    const [allValidators, stashValidators] = allUniqValidators(allRewards);\n    return api.derive.staking.queryMulti(allValidators, {\n      withLedger: true\n    }).pipe(map(queriedVals => queries.map(({\n      stakingLedger\n    }, index) => filterRewards(eras, stashValidators[index].map(validatorId => [validatorId, queriedVals.find(q => q.accountId.eq(validatorId))]), {\n      rewards: allRewards[index],\n      stakingLedger\n    }))));\n  })));\n}\nexport function stakerRewards(instanceId, api) {\n  return memo(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerRewards([accountId], eras, withActive)), map(([first]) => first)));\n}\nexport function stakerRewardsMultiEras(instanceId, api) {\n  return memo(instanceId, (accountIds, eras) => accountIds.length && eras.length ? api.derive.staking._stakerRewards(accountIds, eras, false) : of([]));\n}\nexport function stakerRewardsMulti(instanceId, api) {\n  return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking.stakerRewardsMultiEras(accountIds, eras))));\n}"]},"metadata":{},"sourceType":"module"}