{"ast":null,"code":"import _toConsumableArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport _slicedToArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\"; // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { assert, hexToU8a, isBoolean, isFunction, isHex, isObject, isU8a, isUndefined, stringCamelCase, stringify, u8aConcat, u8aToHex } from '@polkadot/util';\nimport { compareMap, decodeU8a, mapToTypeMap } from \"./utils/index.js\";\n/** @internal */\n\nfunction decodeStructFromObject(registry, Types, value, jsonMap) {\n  var jsonObj;\n  var inputKeys = Object.keys(Types);\n  assert(!Array.isArray(value) || value.length === inputKeys.length, function () {\n    return \"Struct: Unable to map \".concat(stringify(value), \" array to object with known keys \").concat(inputKeys.join(', '));\n  });\n  return inputKeys.reduce(function (raw, key, index) {\n    // The key in the JSON can be snake_case (or other cases), but in our\n    // Types, result or any other maps, it's camelCase\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    var jsonKey = jsonMap.get(key) && !value[key] ? jsonMap.get(key) : key;\n\n    try {\n      if (Array.isArray(value)) {\n        // TS2322: Type 'Codec' is not assignable to type 'T[keyof S]'.\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access\n        raw[key] = value[index] instanceof Types[key] ? value[index] : new Types[key](registry, value[index]);\n      } else if (value instanceof Map) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        var mapped = value.get(jsonKey); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n        raw[key] = mapped instanceof Types[key] ? mapped : new Types[key](registry, mapped);\n      } else if (isObject(value)) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        var assign = value[jsonKey];\n\n        if (isUndefined(assign)) {\n          if (isUndefined(jsonObj)) {\n            jsonObj = Object.entries(value).reduce(function (all, _ref) {\n              var _ref2 = _slicedToArray(_ref, 2),\n                  key = _ref2[0],\n                  value = _ref2[1];\n\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n              all[stringCamelCase(key)] = value;\n              return all;\n            }, {});\n          } // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n\n          assign = jsonObj[jsonKey];\n        } // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access\n\n\n        raw[key] = assign instanceof Types[key] ? assign : new Types[key](registry, assign);\n      } else {\n        throw new Error(\"Cannot decode value \".concat(stringify(value), \" (typeof \").concat(typeof value, \"), expected an input object with known keys\"));\n      }\n    } catch (error) {\n      var type = Types[key].name;\n\n      try {\n        type = new Types[key](registry).toRawType();\n      } catch (error) {// ignore\n      }\n\n      throw new Error(\"Struct: failed on \".concat(jsonKey, \": \").concat(type, \":: \").concat(error.message));\n    }\n\n    return raw;\n  }, {});\n}\n/**\n * Decode input to pass into constructor.\n *\n * @param Types - Types definition.\n * @param value - Value to decode, one of:\n * - null\n * - undefined\n * - hex\n * - Uint8Array\n * - object with `{ key1: value1, key2: value2 }`, assuming `key1` and `key2`\n * are also keys in `Types`\n * - array with `[value1, value2]` assuming the array has the same length as\n * `Object.keys(Types)`\n * @param jsonMap\n * @internal\n */\n\n\nfunction decodeStruct(registry, Types, value, jsonMap) {\n  if (isHex(value)) {\n    return decodeStruct(registry, Types, hexToU8a(value), jsonMap);\n  } else if (isU8a(value)) {\n    var keys = Object.keys(Types);\n    var values = decodeU8a(registry, value, Object.values(Types), keys); // Transform array of values to {key: value} mapping\n\n    return keys.reduce(function (raw, key, index) {\n      // TS2322: Type 'Codec' is not assignable to type 'T[keyof S]'.\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      raw[key] = values[index];\n      return raw;\n    }, {});\n  } else if (!value) {\n    return {};\n  } // We assume from here that value is a JS object (Array, Map, Object)\n\n\n  return decodeStructFromObject(registry, Types, value, jsonMap);\n}\n/**\n * @name Struct\n * @description\n * A Struct defines an Object with key-value pairs - where the values are Codec values. It removes\n * a lot of repetition from the actual coding, define a structure type, pass it the key/Codec\n * values in the constructor and it manages the decoding. It is important that the constructor\n * values matches 100% to the order in th Rust code, i.e. don't go crazy and make it alphabetical,\n * it needs to decoded in the specific defined order.\n * @noInheritDoc\n */\n\n\nvar _jsonMap = /*#__PURE__*/_classPrivateFieldLooseKey(\"jsonMap\");\n\nvar _Types = /*#__PURE__*/_classPrivateFieldLooseKey(\"Types\");\n\nexport var Struct = /*#__PURE__*/function (_Map) {\n  _inherits(Struct, _Map);\n\n  var _super = _createSuper(Struct);\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  function Struct(registry, Types) {\n    var _this;\n\n    var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var jsonMap = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Map();\n\n    _classCallCheck(this, Struct);\n\n    _this = _super.call(this, Object.entries(decodeStruct(registry, mapToTypeMap(registry, Types), value, jsonMap)));\n    _this.registry = void 0;\n    _this.createdAtHash = void 0;\n    Object.defineProperty(_assertThisInitialized(_this), _jsonMap, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_assertThisInitialized(_this), _Types, {\n      writable: true,\n      value: void 0\n    });\n    _this.registry = registry;\n    _classPrivateFieldLooseBase(_assertThisInitialized(_this), _jsonMap)[_jsonMap] = jsonMap;\n    _classPrivateFieldLooseBase(_assertThisInitialized(_this), _Types)[_Types] = mapToTypeMap(registry, Types);\n    return _this;\n  }\n\n  _createClass(Struct, [{\n    key: \"defKeys\",\n    get:\n    /**\n     * @description The available keys for this struct\n     */\n    function get() {\n      return Object.keys(_classPrivateFieldLooseBase(this, _Types)[_Types]);\n    }\n    /**\n     * @description Checks if the value is an empty value\n     */\n\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      var items = this.toArray();\n\n      for (var i = 0; i < items.length; i++) {\n        if (!items[i].isEmpty) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    /**\n     * @description Returns the Type description to sthe structure\n     */\n\n  }, {\n    key: \"Type\",\n    get: function get() {\n      var _this2 = this;\n\n      return Object.entries(_classPrivateFieldLooseBase(this, _Types)[_Types]).reduce(function (result, _ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            key = _ref4[0],\n            Type = _ref4[1];\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        result[key] = new Type(_this2.registry).toRawType();\n        return result;\n      }, {});\n    }\n    /**\n     * @description The length of the value when encoded as a Uint8Array\n     */\n\n  }, {\n    key: \"encodedLength\",\n    get: function get() {\n      return this.toArray().reduce(function (length, entry) {\n        length += entry.encodedLength;\n        return length;\n      }, 0);\n    }\n    /**\n     * @description returns a hash of the contents\n     */\n\n  }, {\n    key: \"hash\",\n    get: function get() {\n      return this.registry.hash(this.toU8a());\n    }\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return compareMap(this, other);\n    }\n    /**\n     * @description Returns a specific names entry in the structure\n     * @param name The name of the entry to retrieve\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      return _get(_getPrototypeOf(Struct.prototype), \"get\", this).call(this, name);\n    }\n    /**\n     * @description Returns the values of a member at a specific index (Rather use get(name) for performance)\n     */\n\n  }, {\n    key: \"getAtIndex\",\n    value: function getAtIndex(index) {\n      return this.toArray()[index];\n    }\n    /**\n     * @description Converts the Object to an standard JavaScript Array\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return _toConsumableArray(this.values());\n    }\n    /**\n     * @description Returns a hex string representation of the value\n     */\n\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return u8aToHex(this.toU8a());\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman(isExtended) {\n      var _this3 = this;\n\n      return _toConsumableArray(this.keys()).reduce(function (json, key) {\n        var value = _this3.get(key);\n\n        json[key] = value && value.toHuman(isExtended);\n        return json;\n      }, {});\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _this4 = this;\n\n      return _toConsumableArray(this.keys()).reduce(function (json, key) {\n        var jsonKey = _classPrivateFieldLooseBase(_this4, _jsonMap)[_jsonMap].get(key) || key;\n\n        var value = _this4.get(key);\n\n        json[jsonKey] = value && value.toJSON();\n        return json;\n      }, {});\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return stringify(Struct.typesToMap(this.registry, _classPrivateFieldLooseBase(this, _Types)[_Types]));\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return stringify(this.toJSON());\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\n     */\n\n  }, {\n    key: \"toU8a\",\n    value: function toU8a(isBare) {\n      // we have keyof S here, cast to string to make it compatible with isBare\n      var entries = _toConsumableArray(this.entries());\n\n      return u8aConcat.apply(void 0, _toConsumableArray(entries // eslint-disable-next-line @typescript-eslint/unbound-method\n      .filter(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            value = _ref6[1];\n\n        return isFunction(value === null || value === void 0 ? void 0 : value.toU8a);\n      }).map(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n            key = _ref8[0],\n            value = _ref8[1];\n\n        return value.toU8a(!isBare || isBoolean(isBare) ? isBare : isBare[key]);\n      })));\n    }\n  }], [{\n    key: \"with\",\n    value: function _with(Types, jsonMap) {\n      return /*#__PURE__*/function (_Struct) {\n        _inherits(_class, _Struct);\n\n        var _super2 = _createSuper(_class);\n\n        function _class(registry, value) {\n          var _this5;\n\n          _classCallCheck(this, _class);\n\n          _this5 = _super2.call(this, registry, Types, value, jsonMap);\n          Object.keys(Types).forEach(function (key) {\n            isUndefined(_this5[key]) && Object.defineProperty(_assertThisInitialized(_this5), key, {\n              enumerable: true,\n              get: function get() {\n                return _this5.get(key);\n              }\n            });\n          });\n          return _this5;\n        }\n\n        return _class;\n      }(Struct);\n    }\n  }, {\n    key: \"typesToMap\",\n    value: function typesToMap(registry, Types) {\n      return Object.entries(Types).reduce(function (result, _ref9) {\n        var _ref10 = _slicedToArray(_ref9, 2),\n            key = _ref10[0],\n            Type = _ref10[1];\n\n        result[key] = registry.getClassName(Type) || new Type(registry).toRawType();\n        return result;\n      }, {});\n    }\n  }]);\n\n  return Struct;\n}( /*#__PURE__*/_wrapNativeSuper(Map));","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types/codec/Struct.js"],"names":["_classPrivateFieldLooseBase","_classPrivateFieldLooseKey","assert","hexToU8a","isBoolean","isFunction","isHex","isObject","isU8a","isUndefined","stringCamelCase","stringify","u8aConcat","u8aToHex","compareMap","decodeU8a","mapToTypeMap","decodeStructFromObject","registry","Types","value","jsonMap","jsonObj","inputKeys","Object","keys","Array","isArray","length","join","reduce","raw","key","index","jsonKey","get","Map","mapped","assign","entries","all","Error","error","type","name","toRawType","message","decodeStruct","values","_jsonMap","_Types","Struct","createdAtHash","defineProperty","writable","items","toArray","i","isEmpty","result","Type","entry","encodedLength","hash","toU8a","other","isExtended","json","toHuman","toJSON","typesToMap","isBare","filter","map","forEach","enumerable","getClassName"],"mappings":"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","sourcesContent":["import _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, hexToU8a, isBoolean, isFunction, isHex, isObject, isU8a, isUndefined, stringCamelCase, stringify, u8aConcat, u8aToHex } from '@polkadot/util';\nimport { compareMap, decodeU8a, mapToTypeMap } from \"./utils/index.js\";\n\n/** @internal */\nfunction decodeStructFromObject(registry, Types, value, jsonMap) {\n  let jsonObj;\n  const inputKeys = Object.keys(Types);\n  assert(!Array.isArray(value) || value.length === inputKeys.length, () => `Struct: Unable to map ${stringify(value)} array to object with known keys ${inputKeys.join(', ')}`);\n  return inputKeys.reduce((raw, key, index) => {\n    // The key in the JSON can be snake_case (or other cases), but in our\n    // Types, result or any other maps, it's camelCase\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const jsonKey = jsonMap.get(key) && !value[key] ? jsonMap.get(key) : key;\n\n    try {\n      if (Array.isArray(value)) {\n        // TS2322: Type 'Codec' is not assignable to type 'T[keyof S]'.\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access\n        raw[key] = value[index] instanceof Types[key] ? value[index] : new Types[key](registry, value[index]);\n      } else if (value instanceof Map) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const mapped = value.get(jsonKey); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n        raw[key] = mapped instanceof Types[key] ? mapped : new Types[key](registry, mapped);\n      } else if (isObject(value)) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        let assign = value[jsonKey];\n\n        if (isUndefined(assign)) {\n          if (isUndefined(jsonObj)) {\n            jsonObj = Object.entries(value).reduce((all, [key, value]) => {\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n              all[stringCamelCase(key)] = value;\n              return all;\n            }, {});\n          } // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n\n          assign = jsonObj[jsonKey];\n        } // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access\n\n\n        raw[key] = assign instanceof Types[key] ? assign : new Types[key](registry, assign);\n      } else {\n        throw new Error(`Cannot decode value ${stringify(value)} (typeof ${typeof value}), expected an input object with known keys`);\n      }\n    } catch (error) {\n      let type = Types[key].name;\n\n      try {\n        type = new Types[key](registry).toRawType();\n      } catch (error) {// ignore\n      }\n\n      throw new Error(`Struct: failed on ${jsonKey}: ${type}:: ${error.message}`);\n    }\n\n    return raw;\n  }, {});\n}\n/**\n * Decode input to pass into constructor.\n *\n * @param Types - Types definition.\n * @param value - Value to decode, one of:\n * - null\n * - undefined\n * - hex\n * - Uint8Array\n * - object with `{ key1: value1, key2: value2 }`, assuming `key1` and `key2`\n * are also keys in `Types`\n * - array with `[value1, value2]` assuming the array has the same length as\n * `Object.keys(Types)`\n * @param jsonMap\n * @internal\n */\n\n\nfunction decodeStruct(registry, Types, value, jsonMap) {\n  if (isHex(value)) {\n    return decodeStruct(registry, Types, hexToU8a(value), jsonMap);\n  } else if (isU8a(value)) {\n    const keys = Object.keys(Types);\n    const values = decodeU8a(registry, value, Object.values(Types), keys); // Transform array of values to {key: value} mapping\n\n    return keys.reduce((raw, key, index) => {\n      // TS2322: Type 'Codec' is not assignable to type 'T[keyof S]'.\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      raw[key] = values[index];\n      return raw;\n    }, {});\n  } else if (!value) {\n    return {};\n  } // We assume from here that value is a JS object (Array, Map, Object)\n\n\n  return decodeStructFromObject(registry, Types, value, jsonMap);\n}\n/**\n * @name Struct\n * @description\n * A Struct defines an Object with key-value pairs - where the values are Codec values. It removes\n * a lot of repetition from the actual coding, define a structure type, pass it the key/Codec\n * values in the constructor and it manages the decoding. It is important that the constructor\n * values matches 100% to the order in th Rust code, i.e. don't go crazy and make it alphabetical,\n * it needs to decoded in the specific defined order.\n * @noInheritDoc\n */\n\n\nvar _jsonMap = /*#__PURE__*/_classPrivateFieldLooseKey(\"jsonMap\");\n\nvar _Types = /*#__PURE__*/_classPrivateFieldLooseKey(\"Types\");\n\nexport class Struct extends Map {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  constructor(registry, Types, value = {}, jsonMap = new Map()) {\n    super(Object.entries(decodeStruct(registry, mapToTypeMap(registry, Types), value, jsonMap)));\n    this.registry = void 0;\n    this.createdAtHash = void 0;\n    Object.defineProperty(this, _jsonMap, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _Types, {\n      writable: true,\n      value: void 0\n    });\n    this.registry = registry;\n    _classPrivateFieldLooseBase(this, _jsonMap)[_jsonMap] = jsonMap;\n    _classPrivateFieldLooseBase(this, _Types)[_Types] = mapToTypeMap(registry, Types);\n  }\n\n  static with(Types, jsonMap) {\n    return class extends Struct {\n      constructor(registry, value) {\n        super(registry, Types, value, jsonMap);\n        Object.keys(Types).forEach(key => {\n          isUndefined(this[key]) && Object.defineProperty(this, key, {\n            enumerable: true,\n            get: () => this.get(key)\n          });\n        });\n      }\n\n    };\n  }\n\n  static typesToMap(registry, Types) {\n    return Object.entries(Types).reduce((result, [key, Type]) => {\n      result[key] = registry.getClassName(Type) || new Type(registry).toRawType();\n      return result;\n    }, {});\n  }\n  /**\n   * @description The available keys for this struct\n   */\n\n\n  get defKeys() {\n    return Object.keys(_classPrivateFieldLooseBase(this, _Types)[_Types]);\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    const items = this.toArray();\n\n    for (let i = 0; i < items.length; i++) {\n      if (!items[i].isEmpty) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * @description Returns the Type description to sthe structure\n   */\n\n\n  get Type() {\n    return Object.entries(_classPrivateFieldLooseBase(this, _Types)[_Types]).reduce((result, [key, Type]) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      result[key] = new Type(this.registry).toRawType();\n      return result;\n    }, {});\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toArray().reduce((length, entry) => {\n      length += entry.encodedLength;\n      return length;\n    }, 0);\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return compareMap(this, other);\n  }\n  /**\n   * @description Returns a specific names entry in the structure\n   * @param name The name of the entry to retrieve\n   */\n\n\n  get(name) {\n    return super.get(name);\n  }\n  /**\n   * @description Returns the values of a member at a specific index (Rather use get(name) for performance)\n   */\n\n\n  getAtIndex(index) {\n    return this.toArray()[index];\n  }\n  /**\n   * @description Converts the Object to an standard JavaScript Array\n   */\n\n\n  toArray() {\n    return [...this.values()];\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return u8aToHex(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    return [...this.keys()].reduce((json, key) => {\n      const value = this.get(key);\n      json[key] = value && value.toHuman(isExtended);\n      return json;\n    }, {});\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return [...this.keys()].reduce((json, key) => {\n      const jsonKey = _classPrivateFieldLooseBase(this, _jsonMap)[_jsonMap].get(key) || key;\n      const value = this.get(key);\n      json[jsonKey] = value && value.toJSON();\n      return json;\n    }, {});\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return stringify(Struct.typesToMap(this.registry, _classPrivateFieldLooseBase(this, _Types)[_Types]));\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return stringify(this.toJSON());\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    // we have keyof S here, cast to string to make it compatible with isBare\n    const entries = [...this.entries()];\n    return u8aConcat(...entries // eslint-disable-next-line @typescript-eslint/unbound-method\n    .filter(([, value]) => isFunction(value === null || value === void 0 ? void 0 : value.toU8a)).map(([key, value]) => value.toU8a(!isBare || isBoolean(isBare) ? isBare : isBare[key])));\n  }\n\n}"]},"metadata":{},"sourceType":"module"}