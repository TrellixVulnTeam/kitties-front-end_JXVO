{"ast":null,"code":"// Copyright 2017-2021 @polkadot/keyring authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { encodeAddress } from '@polkadot/util-crypto';\nvar publicKey = new Uint8Array(32);\nvar address = encodeAddress(publicKey);\nvar meta = {\n  isTesting: true,\n  name: 'nobody'\n};\nvar json = {\n  address: address,\n  encoded: '',\n  encoding: {\n    content: ['pkcs8', 'ed25519'],\n    type: 'none',\n    version: '0'\n  },\n  meta: meta\n};\nexport function nobody() {\n  var pair = {\n    address: address,\n    addressRaw: publicKey,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    decodePkcs8: function decodePkcs8(passphrase, encoded) {\n      return undefined;\n    },\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    decryptMessage: function decryptMessage(encryptedMessageWithNonce, senderPublicKey) {\n      return null;\n    },\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    derive: function derive(suri, meta) {\n      return pair;\n    },\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    encodePkcs8: function encodePkcs8(passphrase) {\n      return new Uint8Array(0);\n    },\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    encryptMessage: function encryptMessage(message, recipientPublicKey, _nonce) {\n      return new Uint8Array();\n    },\n    isLocked: true,\n    lock: function lock() {// no locking, it is always locked\n    },\n    meta: meta,\n    publicKey: publicKey,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setMeta: function setMeta(meta) {\n      return undefined;\n    },\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    sign: function sign(message) {\n      return new Uint8Array(64);\n    },\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    toJson: function toJson(passphrase) {\n      return json;\n    },\n    type: 'ed25519',\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    unlock: function unlock(passphrase) {\n      return undefined;\n    },\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    verify: function verify(message, signature) {\n      return false;\n    },\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    vrfSign: function vrfSign(message, context, extra) {\n      return new Uint8Array(96);\n    },\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    vrfVerify: function vrfVerify(message, vrfResult, context, extra) {\n      return false;\n    }\n  };\n  return pair;\n}","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/keyring/pair/nobody.js"],"names":["encodeAddress","publicKey","Uint8Array","address","meta","isTesting","name","json","encoded","encoding","content","type","version","nobody","pair","addressRaw","decodePkcs8","passphrase","undefined","decryptMessage","encryptedMessageWithNonce","senderPublicKey","derive","suri","encodePkcs8","encryptMessage","message","recipientPublicKey","_nonce","isLocked","lock","setMeta","sign","toJson","unlock","verify","signature","vrfSign","context","extra","vrfVerify","vrfResult"],"mappings":"AAAA;AACA;AACA,SAASA,aAAT,QAA8B,uBAA9B;AACA,IAAMC,SAAS,GAAG,IAAIC,UAAJ,CAAe,EAAf,CAAlB;AACA,IAAMC,OAAO,GAAGH,aAAa,CAACC,SAAD,CAA7B;AACA,IAAMG,IAAI,GAAG;AACXC,EAAAA,SAAS,EAAE,IADA;AAEXC,EAAAA,IAAI,EAAE;AAFK,CAAb;AAIA,IAAMC,IAAI,GAAG;AACXJ,EAAAA,OAAO,EAAPA,OADW;AAEXK,EAAAA,OAAO,EAAE,EAFE;AAGXC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,CAAC,OAAD,EAAU,SAAV,CADD;AAERC,IAAAA,IAAI,EAAE,MAFE;AAGRC,IAAAA,OAAO,EAAE;AAHD,GAHC;AAQXR,EAAAA,IAAI,EAAJA;AARW,CAAb;AAUA,OAAO,SAASS,MAAT,GAAkB;AACvB,MAAMC,IAAI,GAAG;AACXX,IAAAA,OAAO,EAAPA,OADW;AAEXY,IAAAA,UAAU,EAAEd,SAFD;AAGX;AACAe,IAAAA,WAAW,EAAE,qBAACC,UAAD,EAAaT,OAAb;AAAA,aAAyBU,SAAzB;AAAA,KAJF;AAKX;AACAC,IAAAA,cAAc,EAAE,wBAACC,yBAAD,EAA4BC,eAA5B;AAAA,aAAgD,IAAhD;AAAA,KANL;AAOX;AACAC,IAAAA,MAAM,EAAE,gBAACC,IAAD,EAAOnB,IAAP;AAAA,aAAgBU,IAAhB;AAAA,KARG;AASX;AACAU,IAAAA,WAAW,EAAE,qBAAAP,UAAU;AAAA,aAAI,IAAIf,UAAJ,CAAe,CAAf,CAAJ;AAAA,KAVZ;AAWX;AACAuB,IAAAA,cAAc,EAAE,wBAACC,OAAD,EAAUC,kBAAV,EAA8BC,MAA9B;AAAA,aAAyC,IAAI1B,UAAJ,EAAzC;AAAA,KAZL;AAaX2B,IAAAA,QAAQ,EAAE,IAbC;AAcXC,IAAAA,IAAI,EAAE,gBAAM,CAAC;AACZ,KAfU;AAgBX1B,IAAAA,IAAI,EAAJA,IAhBW;AAiBXH,IAAAA,SAAS,EAATA,SAjBW;AAkBX;AACA8B,IAAAA,OAAO,EAAE,iBAAA3B,IAAI;AAAA,aAAIc,SAAJ;AAAA,KAnBF;AAoBX;AACAc,IAAAA,IAAI,EAAE,cAAAN,OAAO;AAAA,aAAI,IAAIxB,UAAJ,CAAe,EAAf,CAAJ;AAAA,KArBF;AAsBX;AACA+B,IAAAA,MAAM,EAAE,gBAAAhB,UAAU;AAAA,aAAIV,IAAJ;AAAA,KAvBP;AAwBXI,IAAAA,IAAI,EAAE,SAxBK;AAyBX;AACAuB,IAAAA,MAAM,EAAE,gBAAAjB,UAAU;AAAA,aAAIC,SAAJ;AAAA,KA1BP;AA2BX;AACAiB,IAAAA,MAAM,EAAE,gBAACT,OAAD,EAAUU,SAAV;AAAA,aAAwB,KAAxB;AAAA,KA5BG;AA6BX;AACAC,IAAAA,OAAO,EAAE,iBAACX,OAAD,EAAUY,OAAV,EAAmBC,KAAnB;AAAA,aAA6B,IAAIrC,UAAJ,CAAe,EAAf,CAA7B;AAAA,KA9BE;AA+BX;AACAsC,IAAAA,SAAS,EAAE,mBAACd,OAAD,EAAUe,SAAV,EAAqBH,OAArB,EAA8BC,KAA9B;AAAA,aAAwC,KAAxC;AAAA;AAhCA,GAAb;AAkCA,SAAOzB,IAAP;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/keyring authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { encodeAddress } from '@polkadot/util-crypto';\nconst publicKey = new Uint8Array(32);\nconst address = encodeAddress(publicKey);\nconst meta = {\n  isTesting: true,\n  name: 'nobody'\n};\nconst json = {\n  address,\n  encoded: '',\n  encoding: {\n    content: ['pkcs8', 'ed25519'],\n    type: 'none',\n    version: '0'\n  },\n  meta\n};\nexport function nobody() {\n  const pair = {\n    address,\n    addressRaw: publicKey,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    decodePkcs8: (passphrase, encoded) => undefined,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    decryptMessage: (encryptedMessageWithNonce, senderPublicKey) => null,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    derive: (suri, meta) => pair,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    encodePkcs8: passphrase => new Uint8Array(0),\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    encryptMessage: (message, recipientPublicKey, _nonce) => new Uint8Array(),\n    isLocked: true,\n    lock: () => {// no locking, it is always locked\n    },\n    meta,\n    publicKey,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setMeta: meta => undefined,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    sign: message => new Uint8Array(64),\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    toJson: passphrase => json,\n    type: 'ed25519',\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    unlock: passphrase => undefined,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    verify: (message, signature) => false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    vrfSign: (message, context, extra) => new Uint8Array(96),\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    vrfVerify: (message, vrfResult, context, extra) => false\n  };\n  return pair;\n}"]},"metadata":{},"sourceType":"module"}