{"ast":null,"code":"import _slicedToArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map } from 'rxjs';\nimport { memo } from \"../util/index.js\";\nexport function votesOf(instanceId, api) {\n  return memo(instanceId, function (accountId) {\n    return api.derive.council.votes().pipe(map(function (votes) {\n      return (votes.find(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            from = _ref2[0];\n\n        return from.eq(accountId);\n      }) || [null, {\n        stake: api.registry.createType('Balance'),\n        votes: []\n      }])[1];\n    }));\n  });\n}","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/api-derive/council/votesOf.js"],"names":["map","memo","votesOf","instanceId","api","accountId","derive","council","votes","pipe","find","from","eq","stake","registry","createType"],"mappings":";AAAA;AACA;AACA,SAASA,GAAT,QAAoB,MAApB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAO,SAASC,OAAT,CAAiBC,UAAjB,EAA6BC,GAA7B,EAAkC;AACvC,SAAOH,IAAI,CAACE,UAAD,EAAa,UAAAE,SAAS;AAAA,WAAID,GAAG,CAACE,MAAJ,CAAWC,OAAX,CAAmBC,KAAnB,GAA2BC,IAA3B,CAAgCT,GAAG,CAAC,UAAAQ,KAAK;AAAA,aAAI,CAACA,KAAK,CAACE,IAAN,CAAW;AAAA;AAAA,YAAEC,IAAF;;AAAA,eAAYA,IAAI,CAACC,EAAL,CAAQP,SAAR,CAAZ;AAAA,OAAX,KAA8C,CAAC,IAAD,EAAO;AACtIQ,QAAAA,KAAK,EAAET,GAAG,CAACU,QAAJ,CAAaC,UAAb,CAAwB,SAAxB,CAD+H;AAEtIP,QAAAA,KAAK,EAAE;AAF+H,OAAP,CAA/C,EAG9E,CAH8E,CAAJ;AAAA,KAAN,CAAnC,CAAJ;AAAA,GAAtB,CAAX;AAID","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map } from 'rxjs';\nimport { memo } from \"../util/index.js\";\nexport function votesOf(instanceId, api) {\n  return memo(instanceId, accountId => api.derive.council.votes().pipe(map(votes => (votes.find(([from]) => from.eq(accountId)) || [null, {\n    stake: api.registry.createType('Balance'),\n    votes: []\n  }])[1])));\n}"]},"metadata":{},"sourceType":"module"}