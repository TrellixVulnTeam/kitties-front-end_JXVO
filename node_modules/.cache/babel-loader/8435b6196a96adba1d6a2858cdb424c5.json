{"ast":null,"code":"import _classCallCheck from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name Base\n * @description A type extends the Base class, when it holds a value\n */\nexport var Base = /*#__PURE__*/function () {\n  function Base(registry, value) {\n    _classCallCheck(this, Base);\n\n    this.registry = void 0;\n    this.createdAtHash = void 0;\n    this._raw = void 0;\n    this.registry = registry;\n    this._raw = value;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  _createClass(Base, [{\n    key: \"encodedLength\",\n    get: function get() {\n      return this.toU8a().length;\n    }\n    /**\n     * @description returns a hash of the contents\n     */\n\n  }, {\n    key: \"hash\",\n    get: function get() {\n      return this.registry.hash(this.toU8a());\n    }\n    /**\n     * @description Checks if the value is an empty value\n     */\n\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return this._raw.isEmpty;\n    }\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return this._raw.eq(other);\n    }\n    /**\n     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n     */\n\n  }, {\n    key: \"toHex\",\n    value: function toHex(isLe) {\n      return this._raw.toHex(isLe);\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman(isExtended) {\n      return this._raw.toHuman(isExtended);\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this._raw.toJSON();\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this._raw.toString();\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\n     */\n\n  }, {\n    key: \"toU8a\",\n    value: function toU8a(isBare) {\n      return this._raw.toU8a(isBare);\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return 'Base';\n    }\n  }]);\n\n  return Base;\n}();","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types/codec/Base.js"],"names":["Base","registry","value","createdAtHash","_raw","toU8a","length","hash","isEmpty","other","eq","isLe","toHex","isExtended","toHuman","toJSON","toString","isBare"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAaA,IAAb;AACE,gBAAYC,QAAZ,EAAsBC,KAAtB,EAA6B;AAAA;;AAC3B,SAAKD,QAAL,GAAgB,KAAK,CAArB;AACA,SAAKE,aAAL,GAAqB,KAAK,CAA1B;AACA,SAAKC,IAAL,GAAY,KAAK,CAAjB;AACA,SAAKH,QAAL,GAAgBA,QAAhB;AACA,SAAKG,IAAL,GAAYF,KAAZ;AACD;AACD;AACF;AACA;;;AAVA;AAAA;AAAA,SAaE,eAAoB;AAClB,aAAO,KAAKG,KAAL,GAAaC,MAApB;AACD;AACD;AACF;AACA;;AAlBA;AAAA;AAAA,SAqBE,eAAW;AACT,aAAO,KAAKL,QAAL,CAAcM,IAAd,CAAmB,KAAKF,KAAL,EAAnB,CAAP;AACD;AACD;AACF;AACA;;AA1BA;AAAA;AAAA,SA6BE,eAAc;AACZ,aAAO,KAAKD,IAAL,CAAUI,OAAjB;AACD;AACD;AACF;AACA;;AAlCA;AAAA;AAAA,WAqCE,YAAGC,KAAH,EAAU;AACR,aAAO,KAAKL,IAAL,CAAUM,EAAV,CAAaD,KAAb,CAAP;AACD;AACD;AACF;AACA;;AA1CA;AAAA;AAAA,WA6CE,eAAME,IAAN,EAAY;AACV,aAAO,KAAKP,IAAL,CAAUQ,KAAV,CAAgBD,IAAhB,CAAP;AACD;AACD;AACF;AACA;;AAlDA;AAAA;AAAA,WAqDE,iBAAQE,UAAR,EAAoB;AAClB,aAAO,KAAKT,IAAL,CAAUU,OAAV,CAAkBD,UAAlB,CAAP;AACD;AACD;AACF;AACA;;AA1DA;AAAA;AAAA,WA6DE,kBAAS;AACP,aAAO,KAAKT,IAAL,CAAUW,MAAV,EAAP;AACD;AACD;AACF;AACA;;AAlEA;AAAA;AAAA,WAqEE,oBAAW;AACT,aAAO,KAAKX,IAAL,CAAUY,QAAV,EAAP;AACD;AACD;AACF;AACA;AACA;;AA3EA;AAAA;AAAA,WA8EE,eAAMC,MAAN,EAAc;AACZ,aAAO,KAAKb,IAAL,CAAUC,KAAV,CAAgBY,MAAhB,CAAP;AACD;AACD;AACF;AACA;;AAnFA;AAAA;AAAA,WAsFE,qBAAY;AACV,aAAO,MAAP;AACD;AAxFH;;AAAA;AAAA","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name Base\n * @description A type extends the Base class, when it holds a value\n */\nexport class Base {\n  constructor(registry, value) {\n    this.registry = void 0;\n    this.createdAtHash = void 0;\n    this._raw = void 0;\n    this.registry = registry;\n    this._raw = value;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return this._raw.isEmpty;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return this._raw.eq(other);\n  }\n  /**\n   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n   */\n\n\n  toHex(isLe) {\n    return this._raw.toHex(isLe);\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    return this._raw.toHuman(isExtended);\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this._raw.toJSON();\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return this._raw.toString();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    return this._raw.toU8a(isBare);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Base';\n  }\n\n}"]},"metadata":{},"sourceType":"module"}