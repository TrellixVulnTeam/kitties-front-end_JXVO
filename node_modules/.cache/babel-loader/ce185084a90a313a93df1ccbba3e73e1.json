{"ast":null,"code":"import _classCallCheck from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport _slicedToArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\"; // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { assert, compactAddLength, compactFromU8a, hexToU8a, isHex, isString, stringToU8a, u8aToHex, u8aToString } from '@polkadot/util';\nimport { Raw } from \"../codec/Raw.js\";\nvar MAX_LENGTH = 128 * 1024;\n/** @internal */\n\nfunction decodeText(value) {\n  if (isHex(value)) {\n    return u8aToString(hexToU8a(value));\n  } else if (value instanceof Uint8Array) {\n    if (!value.length) {\n      return '';\n    } // for Raw, the internal buffer does not have an internal length\n    // (the same applies in e.g. Bytes, where length is added at encoding-time)\n\n\n    if (value instanceof Raw) {\n      return u8aToString(value);\n    }\n\n    var _compactFromU8a = compactFromU8a(value),\n        _compactFromU8a2 = _slicedToArray(_compactFromU8a, 2),\n        offset = _compactFromU8a2[0],\n        length = _compactFromU8a2[1];\n\n    var total = offset + length.toNumber();\n    assert(length.lten(MAX_LENGTH), function () {\n      return \"Text: length \".concat(length.toString(), \" exceeds \").concat(MAX_LENGTH);\n    });\n    assert(total <= value.length, function () {\n      return \"Text: required length less than remainder, expected at least \".concat(total, \", found \").concat(value.length);\n    });\n    return u8aToString(value.subarray(offset, total));\n  }\n\n  return value ? value.toString() : '';\n}\n/**\n * @name Text\n * @description\n * This is a string wrapper, along with the length. It is used both for strings as well\n * as items such as documentation. It simply extends the standard JS `String` built-in\n * object, inheriting all methods exposed from `String`.\n * @noInheritDoc\n */\n// TODO\n//   - Strings should probably be trimmed (docs do come through with extra padding)\n\n\nvar _override = /*#__PURE__*/_classPrivateFieldLooseKey(\"override\");\n\nexport var Text = /*#__PURE__*/function (_String) {\n  _inherits(Text, _String);\n\n  var _super = _createSuper(Text);\n\n  function Text(registry, value) {\n    var _this;\n\n    _classCallCheck(this, Text);\n\n    _this = _super.call(this, decodeText(value));\n    _this.registry = void 0;\n    _this.createdAtHash = void 0;\n    Object.defineProperty(_assertThisInitialized(_this), _override, {\n      writable: true,\n      value: null\n    });\n    _this.registry = registry;\n    return _this;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  _createClass(Text, [{\n    key: \"encodedLength\",\n    get: function get() {\n      return this.toU8a().length;\n    }\n    /**\n     * @description returns a hash of the contents\n     */\n\n  }, {\n    key: \"hash\",\n    get: function get() {\n      return this.registry.hash(this.toU8a());\n    }\n    /**\n     * @description Checks if the value is an empty value\n     */\n\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return this.length === 0;\n    }\n    /**\n     * @description The length of the value\n     */\n\n  }, {\n    key: \"length\",\n    get: function get() {\n      // only included here since we ignore inherited docs\n      return _get(_getPrototypeOf(Text.prototype), \"length\", this);\n    }\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return isString(other) ? this.toString() === other.toString() : false;\n    }\n    /**\n     * @description Set an override value for this\n     */\n\n  }, {\n    key: \"setOverride\",\n    value: function setOverride(override) {\n      _classPrivateFieldLooseBase(this, _override)[_override] = override;\n    }\n    /**\n     * @description Returns a hex string representation of the value\n     */\n\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      // like with Vec<u8>, when we are encoding to hex, we don't actually add\n      // the length prefix (it is already implied by the actual string length)\n      return u8aToHex(this.toU8a(true));\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman() {\n      return this.toJSON();\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return 'Text';\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return _classPrivateFieldLooseBase(this, _override)[_override] || _get(_getPrototypeOf(Text.prototype), \"toString\", this).call(this);\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\n     */\n\n  }, {\n    key: \"toU8a\",\n    value: function toU8a(isBare) {\n      // NOTE Here we use the super toString (we are not taking overrides into account,\n      // rather encoding the original value the string was constructed with)\n      var encoded = stringToU8a(_get(_getPrototypeOf(Text.prototype), \"toString\", this).call(this));\n      return isBare ? encoded : compactAddLength(encoded);\n    }\n  }]);\n\n  return Text;\n}( /*#__PURE__*/_wrapNativeSuper(String));","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types/primitive/Text.js"],"names":["_classPrivateFieldLooseBase","_classPrivateFieldLooseKey","assert","compactAddLength","compactFromU8a","hexToU8a","isHex","isString","stringToU8a","u8aToHex","u8aToString","Raw","MAX_LENGTH","decodeText","value","Uint8Array","length","offset","total","toNumber","lten","toString","subarray","_override","Text","registry","createdAtHash","Object","defineProperty","writable","toU8a","hash","other","override","toJSON","isBare","encoded","String"],"mappings":"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","sourcesContent":["import _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, compactAddLength, compactFromU8a, hexToU8a, isHex, isString, stringToU8a, u8aToHex, u8aToString } from '@polkadot/util';\nimport { Raw } from \"../codec/Raw.js\";\nconst MAX_LENGTH = 128 * 1024;\n/** @internal */\n\nfunction decodeText(value) {\n  if (isHex(value)) {\n    return u8aToString(hexToU8a(value));\n  } else if (value instanceof Uint8Array) {\n    if (!value.length) {\n      return '';\n    } // for Raw, the internal buffer does not have an internal length\n    // (the same applies in e.g. Bytes, where length is added at encoding-time)\n\n\n    if (value instanceof Raw) {\n      return u8aToString(value);\n    }\n\n    const [offset, length] = compactFromU8a(value);\n    const total = offset + length.toNumber();\n    assert(length.lten(MAX_LENGTH), () => `Text: length ${length.toString()} exceeds ${MAX_LENGTH}`);\n    assert(total <= value.length, () => `Text: required length less than remainder, expected at least ${total}, found ${value.length}`);\n    return u8aToString(value.subarray(offset, total));\n  }\n\n  return value ? value.toString() : '';\n}\n/**\n * @name Text\n * @description\n * This is a string wrapper, along with the length. It is used both for strings as well\n * as items such as documentation. It simply extends the standard JS `String` built-in\n * object, inheriting all methods exposed from `String`.\n * @noInheritDoc\n */\n// TODO\n//   - Strings should probably be trimmed (docs do come through with extra padding)\n\n\nvar _override = /*#__PURE__*/_classPrivateFieldLooseKey(\"override\");\n\nexport class Text extends String {\n  constructor(registry, value) {\n    super(decodeText(value));\n    this.registry = void 0;\n    this.createdAtHash = void 0;\n    Object.defineProperty(this, _override, {\n      writable: true,\n      value: null\n    });\n    this.registry = registry;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return this.length === 0;\n  }\n  /**\n   * @description The length of the value\n   */\n\n\n  get length() {\n    // only included here since we ignore inherited docs\n    return super.length;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return isString(other) ? this.toString() === other.toString() : false;\n  }\n  /**\n   * @description Set an override value for this\n   */\n\n\n  setOverride(override) {\n    _classPrivateFieldLooseBase(this, _override)[_override] = override;\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    // like with Vec<u8>, when we are encoding to hex, we don't actually add\n    // the length prefix (it is already implied by the actual string length)\n    return u8aToHex(this.toU8a(true));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Text';\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return _classPrivateFieldLooseBase(this, _override)[_override] || super.toString();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    // NOTE Here we use the super toString (we are not taking overrides into account,\n    // rather encoding the original value the string was constructed with)\n    const encoded = stringToU8a(super.toString());\n    return isBare ? encoded : compactAddLength(encoded);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}