{"ast":null,"code":"import _slicedToArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { Option } from \"./Option.js\";\nimport { Struct } from \"./Struct.js\";\nimport { Tuple } from \"./Tuple.js\";\nimport { Vec } from \"./Vec.js\";\nvar EMPTY = new Uint8Array();\n/**\n * @name Linkage\n * @description The wrapper for the result from a LinkedMap\n */\n\nexport var Linkage = /*#__PURE__*/function (_Struct) {\n  _inherits(Linkage, _Struct);\n\n  var _super = _createSuper(Linkage);\n\n  function Linkage(registry, Type, value) {\n    _classCallCheck(this, Linkage);\n\n    return _super.call(this, registry, {\n      previous: Option.with(Type),\n      // eslint-disable-next-line sort-keys\n      next: Option.with(Type)\n    }, value);\n  }\n\n  _createClass(Linkage, [{\n    key: \"previous\",\n    get: function get() {\n      return this.get('previous');\n    }\n  }, {\n    key: \"next\",\n    get: function get() {\n      return this.get('next');\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return \"Linkage<\".concat(this.next.toRawType(true), \">\");\n    }\n    /**\n     * @description Custom toU8a which with bare mode does not return the linkage if empty\n     */\n\n  }, {\n    key: \"toU8a\",\n    value: function toU8a() {\n      // As part of a storage query (where these appear), in the case of empty, the values\n      // are NOT populated by the node - follow the same logic, leaving it empty\n      return this.isEmpty ? EMPTY : _get(_getPrototypeOf(Linkage.prototype), \"toU8a\", this).call(this);\n    }\n  }], [{\n    key: \"withKey\",\n    value: function withKey(Type) {\n      return /*#__PURE__*/function (_Linkage) {\n        _inherits(_class, _Linkage);\n\n        var _super2 = _createSuper(_class);\n\n        function _class(registry, value) {\n          _classCallCheck(this, _class);\n\n          return _super2.call(this, registry, Type, value);\n        }\n\n        return _class;\n      }(Linkage);\n    }\n  }]);\n\n  return Linkage;\n}(Struct);\n/**\n * @name LinkageResult\n * @description A Linkage keys/Values tuple\n */\n\nexport var LinkageResult = /*#__PURE__*/function (_Tuple) {\n  _inherits(LinkageResult, _Tuple);\n\n  var _super3 = _createSuper(LinkageResult);\n\n  function LinkageResult(registry, _ref, _ref2) {\n    var _ref3 = _slicedToArray(_ref, 2),\n        TypeKey = _ref3[0],\n        keys = _ref3[1];\n\n    var _ref4 = _slicedToArray(_ref2, 2),\n        TypeValue = _ref4[0],\n        values = _ref4[1];\n\n    _classCallCheck(this, LinkageResult);\n\n    return _super3.call(this, registry, {\n      Keys: Vec.with(TypeKey),\n      Values: Vec.with(TypeValue)\n    }, [keys, values]);\n  }\n\n  return LinkageResult;\n}(Tuple);","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types/codec/Linkage.js"],"names":["Option","Struct","Tuple","Vec","EMPTY","Uint8Array","Linkage","registry","Type","value","previous","with","next","get","toRawType","isEmpty","LinkageResult","TypeKey","keys","TypeValue","values","Keys","Values"],"mappings":";;;;;;;AAAA;AACA;AACA,SAASA,MAAT,QAAuB,aAAvB;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,GAAT,QAAoB,UAApB;AACA,IAAMC,KAAK,GAAG,IAAIC,UAAJ,EAAd;AACA;AACA;AACA;AACA;;AAEA,WAAaC,OAAb;AAAA;;AAAA;;AACE,mBAAYC,QAAZ,EAAsBC,IAAtB,EAA4BC,KAA5B,EAAmC;AAAA;;AAAA,6BAC3BF,QAD2B,EACjB;AACdG,MAAAA,QAAQ,EAAEV,MAAM,CAACW,IAAP,CAAYH,IAAZ,CADI;AAEd;AACAI,MAAAA,IAAI,EAAEZ,MAAM,CAACW,IAAP,CAAYH,IAAZ;AAHQ,KADiB,EAK9BC,KAL8B;AAMlC;;AAPH;AAAA;AAAA,SAkBE,eAAe;AACb,aAAO,KAAKI,GAAL,CAAS,UAAT,CAAP;AACD;AApBH;AAAA;AAAA,SAsBE,eAAW;AACT,aAAO,KAAKA,GAAL,CAAS,MAAT,CAAP;AACD;AACD;AACF;AACA;;AA3BA;AAAA;AAAA,WA8BE,qBAAY;AACV,+BAAkB,KAAKD,IAAL,CAAUE,SAAV,CAAoB,IAApB,CAAlB;AACD;AACD;AACF;AACA;;AAnCA;AAAA;AAAA,WAsCE,iBAAQ;AACN;AACA;AACA,aAAO,KAAKC,OAAL,GAAeX,KAAf,qEAAP;AACD;AA1CH;AAAA;AAAA,WASE,iBAAeI,IAAf,EAAqB;AACnB;AAAA;;AAAA;;AACE,wBAAYD,QAAZ,EAAsBE,KAAtB,EAA6B;AAAA;;AAAA,oCACrBF,QADqB,EACXC,IADW,EACLC,KADK;AAE5B;;AAHH;AAAA,QAAqBH,OAArB;AAMD;AAhBH;;AAAA;AAAA,EAA6BL,MAA7B;AA6CA;AACA;AACA;AACA;;AAEA,WAAae,aAAb;AAAA;;AAAA;;AACE,yBAAYT,QAAZ,eAA4D;AAAA;AAAA,QAArCU,OAAqC;AAAA,QAA5BC,IAA4B;;AAAA;AAAA,QAApBC,SAAoB;AAAA,QAATC,MAAS;;AAAA;;AAAA,8BACpDb,QADoD,EAC1C;AACdc,MAAAA,IAAI,EAAElB,GAAG,CAACQ,IAAJ,CAASM,OAAT,CADQ;AAEdK,MAAAA,MAAM,EAAEnB,GAAG,CAACQ,IAAJ,CAASQ,SAAT;AAFM,KAD0C,EAIvD,CAACD,IAAD,EAAOE,MAAP,CAJuD;AAK3D;;AANH;AAAA,EAAmClB,KAAnC","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { Option } from \"./Option.js\";\nimport { Struct } from \"./Struct.js\";\nimport { Tuple } from \"./Tuple.js\";\nimport { Vec } from \"./Vec.js\";\nconst EMPTY = new Uint8Array();\n/**\n * @name Linkage\n * @description The wrapper for the result from a LinkedMap\n */\n\nexport class Linkage extends Struct {\n  constructor(registry, Type, value) {\n    super(registry, {\n      previous: Option.with(Type),\n      // eslint-disable-next-line sort-keys\n      next: Option.with(Type)\n    }, value);\n  }\n\n  static withKey(Type) {\n    return class extends Linkage {\n      constructor(registry, value) {\n        super(registry, Type, value);\n      }\n\n    };\n  }\n\n  get previous() {\n    return this.get('previous');\n  }\n\n  get next() {\n    return this.get('next');\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `Linkage<${this.next.toRawType(true)}>`;\n  }\n  /**\n   * @description Custom toU8a which with bare mode does not return the linkage if empty\n   */\n\n\n  toU8a() {\n    // As part of a storage query (where these appear), in the case of empty, the values\n    // are NOT populated by the node - follow the same logic, leaving it empty\n    return this.isEmpty ? EMPTY : super.toU8a();\n  }\n\n}\n/**\n * @name LinkageResult\n * @description A Linkage keys/Values tuple\n */\n\nexport class LinkageResult extends Tuple {\n  constructor(registry, [TypeKey, keys], [TypeValue, values]) {\n    super(registry, {\n      Keys: Vec.with(TypeKey),\n      Values: Vec.with(TypeValue)\n    }, [keys, values]);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}