{"ast":null,"code":"import _classCallCheck from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { isBn, isNumber, isString, isU8a } from '@polkadot/util';\nimport { decodeAddress } from '@polkadot/util-crypto';\nimport { Enum } from \"../codec/Enum.js\";\nimport { GenericAccountId } from \"./AccountId.js\";\nimport { GenericAccountIndex } from \"./AccountIndex.js\";\n\nfunction decodeU8a(registry, u8a) {\n  if ([0, 32].includes(u8a.length)) {\n    return {\n      Id: u8a\n    };\n  } else if (u8a.length === 20) {\n    return {\n      Address20: u8a\n    };\n  } else if (u8a.length <= 8) {\n    return {\n      Index: registry.createType('AccountIndex', u8a).toNumber()\n    };\n  }\n\n  return u8a;\n}\n\nfunction decodeMultiAny(registry, value) {\n  if (value instanceof GenericMultiAddress) {\n    return value;\n  } else if (value instanceof GenericAccountId) {\n    return {\n      Id: value\n    };\n  } else if (value instanceof GenericAccountIndex || isBn(value) || isNumber(value)) {\n    return {\n      Index: isNumber(value) ? value : value.toNumber()\n    };\n  } else if (isString(value)) {\n    return decodeU8a(registry, decodeAddress(value.toString()));\n  } else if (isU8a(value)) {\n    return decodeU8a(registry, value);\n  }\n\n  return value;\n}\n\nexport var GenericMultiAddress = /*#__PURE__*/function (_Enum) {\n  _inherits(GenericMultiAddress, _Enum);\n\n  var _super = _createSuper(GenericMultiAddress);\n\n  function GenericMultiAddress(registry, value) {\n    _classCallCheck(this, GenericMultiAddress);\n\n    return _super.call(this, registry, {\n      Id: 'AccountId',\n      Index: 'Compact<AccountIndex>',\n      Raw: 'Bytes',\n      // eslint-disable-next-line sort-keys\n      Address32: 'H256',\n      // eslint-disable-next-line sort-keys\n      Address20: 'H160'\n    }, decodeMultiAny(registry, value));\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  _createClass(GenericMultiAddress, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.value.toString();\n    }\n  }]);\n\n  return GenericMultiAddress;\n}(Enum);","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types/generic/MultiAddress.js"],"names":["isBn","isNumber","isString","isU8a","decodeAddress","Enum","GenericAccountId","GenericAccountIndex","decodeU8a","registry","u8a","includes","length","Id","Address20","Index","createType","toNumber","decodeMultiAny","value","GenericMultiAddress","toString","Raw","Address32"],"mappings":";;;;AAAA;AACA;AACA,SAASA,IAAT,EAAeC,QAAf,EAAyBC,QAAzB,EAAmCC,KAAnC,QAAgD,gBAAhD;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,gBAAT,QAAiC,gBAAjC;AACA,SAASC,mBAAT,QAAoC,mBAApC;;AAEA,SAASC,SAAT,CAAmBC,QAAnB,EAA6BC,GAA7B,EAAkC;AAChC,MAAI,CAAC,CAAD,EAAI,EAAJ,EAAQC,QAAR,CAAiBD,GAAG,CAACE,MAArB,CAAJ,EAAkC;AAChC,WAAO;AACLC,MAAAA,EAAE,EAAEH;AADC,KAAP;AAGD,GAJD,MAIO,IAAIA,GAAG,CAACE,MAAJ,KAAe,EAAnB,EAAuB;AAC5B,WAAO;AACLE,MAAAA,SAAS,EAAEJ;AADN,KAAP;AAGD,GAJM,MAIA,IAAIA,GAAG,CAACE,MAAJ,IAAc,CAAlB,EAAqB;AAC1B,WAAO;AACLG,MAAAA,KAAK,EAAEN,QAAQ,CAACO,UAAT,CAAoB,cAApB,EAAoCN,GAApC,EAAyCO,QAAzC;AADF,KAAP;AAGD;;AAED,SAAOP,GAAP;AACD;;AAED,SAASQ,cAAT,CAAwBT,QAAxB,EAAkCU,KAAlC,EAAyC;AACvC,MAAIA,KAAK,YAAYC,mBAArB,EAA0C;AACxC,WAAOD,KAAP;AACD,GAFD,MAEO,IAAIA,KAAK,YAAYb,gBAArB,EAAuC;AAC5C,WAAO;AACLO,MAAAA,EAAE,EAAEM;AADC,KAAP;AAGD,GAJM,MAIA,IAAIA,KAAK,YAAYZ,mBAAjB,IAAwCP,IAAI,CAACmB,KAAD,CAA5C,IAAuDlB,QAAQ,CAACkB,KAAD,CAAnE,EAA4E;AACjF,WAAO;AACLJ,MAAAA,KAAK,EAAEd,QAAQ,CAACkB,KAAD,CAAR,GAAkBA,KAAlB,GAA0BA,KAAK,CAACF,QAAN;AAD5B,KAAP;AAGD,GAJM,MAIA,IAAIf,QAAQ,CAACiB,KAAD,CAAZ,EAAqB;AAC1B,WAAOX,SAAS,CAACC,QAAD,EAAWL,aAAa,CAACe,KAAK,CAACE,QAAN,EAAD,CAAxB,CAAhB;AACD,GAFM,MAEA,IAAIlB,KAAK,CAACgB,KAAD,CAAT,EAAkB;AACvB,WAAOX,SAAS,CAACC,QAAD,EAAWU,KAAX,CAAhB;AACD;;AAED,SAAOA,KAAP;AACD;;AAED,WAAaC,mBAAb;AAAA;;AAAA;;AACE,+BAAYX,QAAZ,EAAsBU,KAAtB,EAA6B;AAAA;;AAAA,6BACrBV,QADqB,EACX;AACdI,MAAAA,EAAE,EAAE,WADU;AAEdE,MAAAA,KAAK,EAAE,uBAFO;AAGdO,MAAAA,GAAG,EAAE,OAHS;AAId;AACAC,MAAAA,SAAS,EAAE,MALG;AAMd;AACAT,MAAAA,SAAS,EAAE;AAPG,KADW,EASxBI,cAAc,CAACT,QAAD,EAAWU,KAAX,CATU;AAU5B;AACD;AACF;AACA;;;AAdA;AAAA;AAAA,WAiBE,oBAAW;AACT,aAAO,KAAKA,KAAL,CAAWE,QAAX,EAAP;AACD;AAnBH;;AAAA;AAAA,EAAyChB,IAAzC","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { isBn, isNumber, isString, isU8a } from '@polkadot/util';\nimport { decodeAddress } from '@polkadot/util-crypto';\nimport { Enum } from \"../codec/Enum.js\";\nimport { GenericAccountId } from \"./AccountId.js\";\nimport { GenericAccountIndex } from \"./AccountIndex.js\";\n\nfunction decodeU8a(registry, u8a) {\n  if ([0, 32].includes(u8a.length)) {\n    return {\n      Id: u8a\n    };\n  } else if (u8a.length === 20) {\n    return {\n      Address20: u8a\n    };\n  } else if (u8a.length <= 8) {\n    return {\n      Index: registry.createType('AccountIndex', u8a).toNumber()\n    };\n  }\n\n  return u8a;\n}\n\nfunction decodeMultiAny(registry, value) {\n  if (value instanceof GenericMultiAddress) {\n    return value;\n  } else if (value instanceof GenericAccountId) {\n    return {\n      Id: value\n    };\n  } else if (value instanceof GenericAccountIndex || isBn(value) || isNumber(value)) {\n    return {\n      Index: isNumber(value) ? value : value.toNumber()\n    };\n  } else if (isString(value)) {\n    return decodeU8a(registry, decodeAddress(value.toString()));\n  } else if (isU8a(value)) {\n    return decodeU8a(registry, value);\n  }\n\n  return value;\n}\n\nexport class GenericMultiAddress extends Enum {\n  constructor(registry, value) {\n    super(registry, {\n      Id: 'AccountId',\n      Index: 'Compact<AccountIndex>',\n      Raw: 'Bytes',\n      // eslint-disable-next-line sort-keys\n      Address32: 'H256',\n      // eslint-disable-next-line sort-keys\n      Address20: 'H160'\n    }, decodeMultiAny(registry, value));\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return this.value.toString();\n  }\n\n}"]},"metadata":{},"sourceType":"module"}