{"ast":null,"code":"import _slicedToArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, u8aToU8a } from '@polkadot/util';\nimport { decodeAddress } from \"../address/decode.js\";\nimport { naclVerify } from \"../nacl/verify.js\";\nimport { schnorrkelVerify } from \"../schnorrkel/verify.js\";\nimport { secp256k1Verify } from \"../secp256k1/verify.js\";\n\nvar secp256k1VerifyHasher = function secp256k1VerifyHasher(hashType) {\n  return function (message, signature, publicKey) {\n    return secp256k1Verify(message, signature, publicKey, hashType);\n  };\n};\n\nvar VERIFIERS_ECDSA = [['ecdsa', secp256k1VerifyHasher('blake2')], ['ethereum', secp256k1VerifyHasher('keccak')]];\nvar VERIFIERS = [['ed25519', naclVerify], ['sr25519', schnorrkelVerify]].concat(VERIFIERS_ECDSA);\nvar CRYPTO_TYPES = ['ed25519', 'sr25519', 'ecdsa'];\n\nfunction verifyDetect(result, _ref) {\n  var message = _ref.message,\n      publicKey = _ref.publicKey,\n      signature = _ref.signature;\n  var verifiers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : VERIFIERS;\n  result.isValid = verifiers.some(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        crypto = _ref3[0],\n        verify = _ref3[1];\n\n    try {\n      if (verify(message, signature, publicKey)) {\n        result.crypto = crypto;\n        return true;\n      }\n    } catch (error) {// do nothing, result.isValid still set to false\n    }\n\n    return false;\n  });\n  return result;\n}\n\nfunction verifyMultisig(result, _ref4) {\n  var message = _ref4.message,\n      publicKey = _ref4.publicKey,\n      signature = _ref4.signature;\n  assert([0, 1, 2].includes(signature[0]), function () {\n    return \"Unknown crypto type, expected signature prefix [0..2], found \".concat(signature[0]);\n  });\n  var type = CRYPTO_TYPES[signature[0]] || 'none';\n  result.crypto = type;\n\n  try {\n    result.isValid = {\n      ecdsa: function ecdsa() {\n        return verifyDetect(result, {\n          message: message,\n          publicKey: publicKey,\n          signature: signature.subarray(1)\n        }, VERIFIERS_ECDSA).isValid;\n      },\n      ed25519: function ed25519() {\n        return naclVerify(message, signature.subarray(1), publicKey);\n      },\n      none: function none() {\n        throw Error('no verify for `none` crypto type');\n      },\n      sr25519: function sr25519() {\n        return schnorrkelVerify(message, signature.subarray(1), publicKey);\n      }\n    }[type]();\n  } catch (error) {// ignore, result.isValid still set to false\n  }\n\n  return result;\n}\n\nexport function signatureVerify(message, signature, addressOrPublicKey) {\n  var signatureU8a = u8aToU8a(signature);\n  assert([64, 65, 66].includes(signatureU8a.length), function () {\n    return \"Invalid signature length, expected [64..66] bytes, found \".concat(signatureU8a.length);\n  });\n  var publicKey = decodeAddress(addressOrPublicKey);\n  var input = {\n    message: message,\n    publicKey: publicKey,\n    signature: signatureU8a\n  };\n  var result = {\n    crypto: 'none',\n    isValid: false,\n    publicKey: publicKey\n  };\n  return [0, 1, 2].includes(signatureU8a[0]) && [65, 66].includes(signatureU8a.length) ? verifyMultisig(result, input) : verifyDetect(result, input);\n}","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/util-crypto/signature/verify.js"],"names":["assert","u8aToU8a","decodeAddress","naclVerify","schnorrkelVerify","secp256k1Verify","secp256k1VerifyHasher","hashType","message","signature","publicKey","VERIFIERS_ECDSA","VERIFIERS","CRYPTO_TYPES","verifyDetect","result","verifiers","isValid","some","crypto","verify","error","verifyMultisig","includes","type","ecdsa","subarray","ed25519","none","Error","sr25519","signatureVerify","addressOrPublicKey","signatureU8a","length","input"],"mappings":";AAAA;AACA;AACA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,gBAAjC;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,gBAAT,QAAiC,yBAAjC;AACA,SAASC,eAAT,QAAgC,wBAAhC;;AAEA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAC,QAAQ;AAAA,SAAI,UAACC,OAAD,EAAUC,SAAV,EAAqBC,SAArB;AAAA,WAAmCL,eAAe,CAACG,OAAD,EAAUC,SAAV,EAAqBC,SAArB,EAAgCH,QAAhC,CAAlD;AAAA,GAAJ;AAAA,CAAtC;;AAEA,IAAMI,eAAe,GAAG,CAAC,CAAC,OAAD,EAAUL,qBAAqB,CAAC,QAAD,CAA/B,CAAD,EAA6C,CAAC,UAAD,EAAaA,qBAAqB,CAAC,QAAD,CAAlC,CAA7C,CAAxB;AACA,IAAMM,SAAS,IAAI,CAAC,SAAD,EAAYT,UAAZ,CAAJ,EAA6B,CAAC,SAAD,EAAYC,gBAAZ,CAA7B,SAA+DO,eAA/D,CAAf;AACA,IAAME,YAAY,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,OAAvB,CAArB;;AAEA,SAASC,YAAT,CAAsBC,MAAtB,QAI0B;AAAA,MAHxBP,OAGwB,QAHxBA,OAGwB;AAAA,MAFxBE,SAEwB,QAFxBA,SAEwB;AAAA,MADxBD,SACwB,QADxBA,SACwB;AAAA,MAAvBO,SAAuB,uEAAXJ,SAAW;AACxBG,EAAAA,MAAM,CAACE,OAAP,GAAiBD,SAAS,CAACE,IAAV,CAAe,iBAAsB;AAAA;AAAA,QAApBC,MAAoB;AAAA,QAAZC,MAAY;;AACpD,QAAI;AACF,UAAIA,MAAM,CAACZ,OAAD,EAAUC,SAAV,EAAqBC,SAArB,CAAV,EAA2C;AACzCK,QAAAA,MAAM,CAACI,MAAP,GAAgBA,MAAhB;AACA,eAAO,IAAP;AACD;AACF,KALD,CAKE,OAAOE,KAAP,EAAc,CAAC;AAChB;;AAED,WAAO,KAAP;AACD,GAVgB,CAAjB;AAWA,SAAON,MAAP;AACD;;AAED,SAASO,cAAT,CAAwBP,MAAxB,SAIG;AAAA,MAHDP,OAGC,SAHDA,OAGC;AAAA,MAFDE,SAEC,SAFDA,SAEC;AAAA,MADDD,SACC,SADDA,SACC;AACDT,EAAAA,MAAM,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAUuB,QAAV,CAAmBd,SAAS,CAAC,CAAD,CAA5B,CAAD,EAAmC;AAAA,kFAAsEA,SAAS,CAAC,CAAD,CAA/E;AAAA,GAAnC,CAAN;AACA,MAAMe,IAAI,GAAGX,YAAY,CAACJ,SAAS,CAAC,CAAD,CAAV,CAAZ,IAA8B,MAA3C;AACAM,EAAAA,MAAM,CAACI,MAAP,GAAgBK,IAAhB;;AAEA,MAAI;AACFT,IAAAA,MAAM,CAACE,OAAP,GAAiB;AACfQ,MAAAA,KAAK,EAAE;AAAA,eAAMX,YAAY,CAACC,MAAD,EAAS;AAChCP,UAAAA,OAAO,EAAPA,OADgC;AAEhCE,UAAAA,SAAS,EAATA,SAFgC;AAGhCD,UAAAA,SAAS,EAAEA,SAAS,CAACiB,QAAV,CAAmB,CAAnB;AAHqB,SAAT,EAItBf,eAJsB,CAAZ,CAIOM,OAJb;AAAA,OADQ;AAMfU,MAAAA,OAAO,EAAE;AAAA,eAAMxB,UAAU,CAACK,OAAD,EAAUC,SAAS,CAACiB,QAAV,CAAmB,CAAnB,CAAV,EAAiChB,SAAjC,CAAhB;AAAA,OANM;AAOfkB,MAAAA,IAAI,EAAE,gBAAM;AACV,cAAMC,KAAK,CAAC,kCAAD,CAAX;AACD,OATc;AAUfC,MAAAA,OAAO,EAAE;AAAA,eAAM1B,gBAAgB,CAACI,OAAD,EAAUC,SAAS,CAACiB,QAAV,CAAmB,CAAnB,CAAV,EAAiChB,SAAjC,CAAtB;AAAA;AAVM,MAWfc,IAXe,GAAjB;AAYD,GAbD,CAaE,OAAOH,KAAP,EAAc,CAAC;AAChB;;AAED,SAAON,MAAP;AACD;;AAED,OAAO,SAASgB,eAAT,CAAyBvB,OAAzB,EAAkCC,SAAlC,EAA6CuB,kBAA7C,EAAiE;AACtE,MAAMC,YAAY,GAAGhC,QAAQ,CAACQ,SAAD,CAA7B;AACAT,EAAAA,MAAM,CAAC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAauB,QAAb,CAAsBU,YAAY,CAACC,MAAnC,CAAD,EAA6C;AAAA,8EAAkED,YAAY,CAACC,MAA/E;AAAA,GAA7C,CAAN;AACA,MAAMxB,SAAS,GAAGR,aAAa,CAAC8B,kBAAD,CAA/B;AACA,MAAMG,KAAK,GAAG;AACZ3B,IAAAA,OAAO,EAAPA,OADY;AAEZE,IAAAA,SAAS,EAATA,SAFY;AAGZD,IAAAA,SAAS,EAAEwB;AAHC,GAAd;AAKA,MAAMlB,MAAM,GAAG;AACbI,IAAAA,MAAM,EAAE,MADK;AAEbF,IAAAA,OAAO,EAAE,KAFI;AAGbP,IAAAA,SAAS,EAATA;AAHa,GAAf;AAKA,SAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAUa,QAAV,CAAmBU,YAAY,CAAC,CAAD,CAA/B,KAAuC,CAAC,EAAD,EAAK,EAAL,EAASV,QAAT,CAAkBU,YAAY,CAACC,MAA/B,CAAvC,GAAgFZ,cAAc,CAACP,MAAD,EAASoB,KAAT,CAA9F,GAAgHrB,YAAY,CAACC,MAAD,EAASoB,KAAT,CAAnI;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, u8aToU8a } from '@polkadot/util';\nimport { decodeAddress } from \"../address/decode.js\";\nimport { naclVerify } from \"../nacl/verify.js\";\nimport { schnorrkelVerify } from \"../schnorrkel/verify.js\";\nimport { secp256k1Verify } from \"../secp256k1/verify.js\";\n\nconst secp256k1VerifyHasher = hashType => (message, signature, publicKey) => secp256k1Verify(message, signature, publicKey, hashType);\n\nconst VERIFIERS_ECDSA = [['ecdsa', secp256k1VerifyHasher('blake2')], ['ethereum', secp256k1VerifyHasher('keccak')]];\nconst VERIFIERS = [['ed25519', naclVerify], ['sr25519', schnorrkelVerify], ...VERIFIERS_ECDSA];\nconst CRYPTO_TYPES = ['ed25519', 'sr25519', 'ecdsa'];\n\nfunction verifyDetect(result, {\n  message,\n  publicKey,\n  signature\n}, verifiers = VERIFIERS) {\n  result.isValid = verifiers.some(([crypto, verify]) => {\n    try {\n      if (verify(message, signature, publicKey)) {\n        result.crypto = crypto;\n        return true;\n      }\n    } catch (error) {// do nothing, result.isValid still set to false\n    }\n\n    return false;\n  });\n  return result;\n}\n\nfunction verifyMultisig(result, {\n  message,\n  publicKey,\n  signature\n}) {\n  assert([0, 1, 2].includes(signature[0]), () => `Unknown crypto type, expected signature prefix [0..2], found ${signature[0]}`);\n  const type = CRYPTO_TYPES[signature[0]] || 'none';\n  result.crypto = type;\n\n  try {\n    result.isValid = {\n      ecdsa: () => verifyDetect(result, {\n        message,\n        publicKey,\n        signature: signature.subarray(1)\n      }, VERIFIERS_ECDSA).isValid,\n      ed25519: () => naclVerify(message, signature.subarray(1), publicKey),\n      none: () => {\n        throw Error('no verify for `none` crypto type');\n      },\n      sr25519: () => schnorrkelVerify(message, signature.subarray(1), publicKey)\n    }[type]();\n  } catch (error) {// ignore, result.isValid still set to false\n  }\n\n  return result;\n}\n\nexport function signatureVerify(message, signature, addressOrPublicKey) {\n  const signatureU8a = u8aToU8a(signature);\n  assert([64, 65, 66].includes(signatureU8a.length), () => `Invalid signature length, expected [64..66] bytes, found ${signatureU8a.length}`);\n  const publicKey = decodeAddress(addressOrPublicKey);\n  const input = {\n    message,\n    publicKey,\n    signature: signatureU8a\n  };\n  const result = {\n    crypto: 'none',\n    isValid: false,\n    publicKey\n  };\n  return [0, 1, 2].includes(signatureU8a[0]) && [65, 66].includes(signatureU8a.length) ? verifyMultisig(result, input) : verifyDetect(result, input);\n}"]},"metadata":{},"sourceType":"module"}