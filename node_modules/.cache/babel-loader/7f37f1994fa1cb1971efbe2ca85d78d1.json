{"ast":null,"code":"import _slicedToArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\"; // Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bnToHex, compactAddLength, hexToU8a, isBigInt, isBn, isHex, isNumber, isString, stringToU8a } from '@polkadot/util';\nimport { blake2AsU8a } from \"../blake2/asU8a.js\";\nvar RE_NUMBER = /^\\d+$/;\nvar JUNCTION_ID_LEN = 32;\nvar BN_OPTIONS = {\n  bitLength: 256,\n  isLe: true\n};\n\nvar _chainCode = /*#__PURE__*/_classPrivateFieldLooseKey(\"chainCode\");\n\nvar _isHard = /*#__PURE__*/_classPrivateFieldLooseKey(\"isHard\");\n\nexport var DeriveJunction = /*#__PURE__*/function () {\n  function DeriveJunction() {\n    _classCallCheck(this, DeriveJunction);\n\n    Object.defineProperty(this, _chainCode, {\n      writable: true,\n      value: new Uint8Array(32)\n    });\n    Object.defineProperty(this, _isHard, {\n      writable: true,\n      value: false\n    });\n  }\n\n  _createClass(DeriveJunction, [{\n    key: \"chainCode\",\n    get: function get() {\n      return _classPrivateFieldLooseBase(this, _chainCode)[_chainCode];\n    }\n  }, {\n    key: \"isHard\",\n    get: function get() {\n      return _classPrivateFieldLooseBase(this, _isHard)[_isHard];\n    }\n  }, {\n    key: \"isSoft\",\n    get: function get() {\n      return !_classPrivateFieldLooseBase(this, _isHard)[_isHard];\n    }\n  }, {\n    key: \"hard\",\n    value: function hard(value) {\n      return this.soft(value).harden();\n    }\n  }, {\n    key: \"harden\",\n    value: function harden() {\n      _classPrivateFieldLooseBase(this, _isHard)[_isHard] = true;\n      return this;\n    }\n  }, {\n    key: \"soft\",\n    value: function soft(value) {\n      if (isNumber(value) || isBn(value) || isBigInt(value)) {\n        return this.soft(bnToHex(value, BN_OPTIONS));\n      } else if (isHex(value)) {\n        return this.soft(hexToU8a(value));\n      } else if (isString(value)) {\n        return this.soft(compactAddLength(stringToU8a(value)));\n      } else if (value.length > JUNCTION_ID_LEN) {\n        return this.soft(blake2AsU8a(value));\n      }\n\n      _classPrivateFieldLooseBase(this, _chainCode)[_chainCode].fill(0);\n\n      _classPrivateFieldLooseBase(this, _chainCode)[_chainCode].set(value, 0);\n\n      return this;\n    }\n  }, {\n    key: \"soften\",\n    value: function soften() {\n      _classPrivateFieldLooseBase(this, _isHard)[_isHard] = false;\n      return this;\n    }\n  }], [{\n    key: \"from\",\n    value: function from(value) {\n      var result = new DeriveJunction();\n\n      var _ref = value.startsWith('/') ? [value.substr(1), true] : [value, false],\n          _ref2 = _slicedToArray(_ref, 2),\n          code = _ref2[0],\n          isHard = _ref2[1];\n\n      result.soft(RE_NUMBER.test(code) ? parseInt(code, 10) : code);\n      return isHard ? result.harden() : result;\n    }\n  }]);\n\n  return DeriveJunction;\n}();","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/util-crypto/key/DeriveJunction.js"],"names":["_classPrivateFieldLooseBase","_classPrivateFieldLooseKey","bnToHex","compactAddLength","hexToU8a","isBigInt","isBn","isHex","isNumber","isString","stringToU8a","blake2AsU8a","RE_NUMBER","JUNCTION_ID_LEN","BN_OPTIONS","bitLength","isLe","_chainCode","_isHard","DeriveJunction","Object","defineProperty","writable","value","Uint8Array","soft","harden","length","fill","set","result","startsWith","substr","code","isHard","test","parseInt"],"mappings":"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","sourcesContent":["import _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { bnToHex, compactAddLength, hexToU8a, isBigInt, isBn, isHex, isNumber, isString, stringToU8a } from '@polkadot/util';\nimport { blake2AsU8a } from \"../blake2/asU8a.js\";\nconst RE_NUMBER = /^\\d+$/;\nconst JUNCTION_ID_LEN = 32;\nconst BN_OPTIONS = {\n  bitLength: 256,\n  isLe: true\n};\n\nvar _chainCode = /*#__PURE__*/_classPrivateFieldLooseKey(\"chainCode\");\n\nvar _isHard = /*#__PURE__*/_classPrivateFieldLooseKey(\"isHard\");\n\nexport class DeriveJunction {\n  constructor() {\n    Object.defineProperty(this, _chainCode, {\n      writable: true,\n      value: new Uint8Array(32)\n    });\n    Object.defineProperty(this, _isHard, {\n      writable: true,\n      value: false\n    });\n  }\n\n  static from(value) {\n    const result = new DeriveJunction();\n    const [code, isHard] = value.startsWith('/') ? [value.substr(1), true] : [value, false];\n    result.soft(RE_NUMBER.test(code) ? parseInt(code, 10) : code);\n    return isHard ? result.harden() : result;\n  }\n\n  get chainCode() {\n    return _classPrivateFieldLooseBase(this, _chainCode)[_chainCode];\n  }\n\n  get isHard() {\n    return _classPrivateFieldLooseBase(this, _isHard)[_isHard];\n  }\n\n  get isSoft() {\n    return !_classPrivateFieldLooseBase(this, _isHard)[_isHard];\n  }\n\n  hard(value) {\n    return this.soft(value).harden();\n  }\n\n  harden() {\n    _classPrivateFieldLooseBase(this, _isHard)[_isHard] = true;\n    return this;\n  }\n\n  soft(value) {\n    if (isNumber(value) || isBn(value) || isBigInt(value)) {\n      return this.soft(bnToHex(value, BN_OPTIONS));\n    } else if (isHex(value)) {\n      return this.soft(hexToU8a(value));\n    } else if (isString(value)) {\n      return this.soft(compactAddLength(stringToU8a(value)));\n    } else if (value.length > JUNCTION_ID_LEN) {\n      return this.soft(blake2AsU8a(value));\n    }\n\n    _classPrivateFieldLooseBase(this, _chainCode)[_chainCode].fill(0);\n\n    _classPrivateFieldLooseBase(this, _chainCode)[_chainCode].set(value, 0);\n\n    return this;\n  }\n\n  soften() {\n    _classPrivateFieldLooseBase(this, _isHard)[_isHard] = false;\n    return this;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}