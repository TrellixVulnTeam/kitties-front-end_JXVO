{"ast":null,"code":"import _slicedToArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nexport function extractAuthor(digest) {\n  var sessionValidators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  var _digest$logs$filter = digest.logs.filter(function (_ref) {\n    var type = _ref.type;\n    return type === 'Consensus';\n  }),\n      _digest$logs$filter2 = _slicedToArray(_digest$logs$filter, 1),\n      citem = _digest$logs$filter2[0];\n\n  var _digest$logs$filter3 = digest.logs.filter(function (_ref2) {\n    var type = _ref2.type;\n    return type === 'PreRuntime';\n  }),\n      _digest$logs$filter4 = _slicedToArray(_digest$logs$filter3, 1),\n      pitem = _digest$logs$filter4[0];\n\n  var _digest$logs$filter5 = digest.logs.filter(function (_ref3) {\n    var type = _ref3.type;\n    return type === 'Seal';\n  }),\n      _digest$logs$filter6 = _slicedToArray(_digest$logs$filter5, 1),\n      sitem = _digest$logs$filter6[0];\n\n  var accountId; // This is critical to be first for BABE (before Consensus)\n  // If not first, we end up dropping the author at session-end\n\n  if (pitem) {\n    try {\n      var _pitem$asPreRuntime = _slicedToArray(pitem.asPreRuntime, 2),\n          engine = _pitem$asPreRuntime[0],\n          data = _pitem$asPreRuntime[1];\n\n      accountId = engine.extractAuthor(data, sessionValidators);\n    } catch (_unused) {// ignore\n    }\n  }\n\n  if (!accountId && citem) {\n    try {\n      var _citem$asConsensus = _slicedToArray(citem.asConsensus, 2),\n          _engine = _citem$asConsensus[0],\n          _data = _citem$asConsensus[1];\n\n      accountId = _engine.extractAuthor(_data, sessionValidators);\n    } catch (_unused2) {// ignore\n    }\n  } // SEAL, still used in e.g. Kulupu for pow\n\n\n  if (!accountId && sitem) {\n    try {\n      var _sitem$asSeal = _slicedToArray(sitem.asSeal, 2),\n          _engine2 = _sitem$asSeal[0],\n          _data2 = _sitem$asSeal[1];\n\n      accountId = _engine2.extractAuthor(_data2, sessionValidators);\n    } catch (_unused3) {// ignore\n    }\n  }\n\n  return accountId;\n}","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/api-derive/type/util.js"],"names":["extractAuthor","digest","sessionValidators","logs","filter","type","citem","pitem","sitem","accountId","asPreRuntime","engine","data","asConsensus","asSeal"],"mappings":";AAAA;AACA;AACA,OAAO,SAASA,aAAT,CAAuBC,MAAvB,EAAuD;AAAA,MAAxBC,iBAAwB,uEAAJ,EAAI;;AAC5D,4BAAgBD,MAAM,CAACE,IAAP,CAAYC,MAAZ,CAAmB;AAAA,QACjCC,IADiC,QACjCA,IADiC;AAAA,WAE7BA,IAAI,KAAK,WAFoB;AAAA,GAAnB,CAAhB;AAAA;AAAA,MAAOC,KAAP;;AAGA,6BAAgBL,MAAM,CAACE,IAAP,CAAYC,MAAZ,CAAmB;AAAA,QACjCC,IADiC,SACjCA,IADiC;AAAA,WAE7BA,IAAI,KAAK,YAFoB;AAAA,GAAnB,CAAhB;AAAA;AAAA,MAAOE,KAAP;;AAGA,6BAAgBN,MAAM,CAACE,IAAP,CAAYC,MAAZ,CAAmB;AAAA,QACjCC,IADiC,SACjCA,IADiC;AAAA,WAE7BA,IAAI,KAAK,MAFoB;AAAA,GAAnB,CAAhB;AAAA;AAAA,MAAOG,KAAP;;AAGA,MAAIC,SAAJ,CAV4D,CAU7C;AACf;;AAEA,MAAIF,KAAJ,EAAW;AACT,QAAI;AACF,+CAAuBA,KAAK,CAACG,YAA7B;AAAA,UAAOC,MAAP;AAAA,UAAeC,IAAf;;AACAH,MAAAA,SAAS,GAAGE,MAAM,CAACX,aAAP,CAAqBY,IAArB,EAA2BV,iBAA3B,CAAZ;AACD,KAHD,CAGE,gBAAM,CAAC;AACR;AACF;;AAED,MAAI,CAACO,SAAD,IAAcH,KAAlB,EAAyB;AACvB,QAAI;AACF,8CAAuBA,KAAK,CAACO,WAA7B;AAAA,UAAOF,OAAP;AAAA,UAAeC,KAAf;;AACAH,MAAAA,SAAS,GAAGE,OAAM,CAACX,aAAP,CAAqBY,KAArB,EAA2BV,iBAA3B,CAAZ;AACD,KAHD,CAGE,iBAAM,CAAC;AACR;AACF,GA3B2D,CA2B1D;;;AAGF,MAAI,CAACO,SAAD,IAAcD,KAAlB,EAAyB;AACvB,QAAI;AACF,yCAAuBA,KAAK,CAACM,MAA7B;AAAA,UAAOH,QAAP;AAAA,UAAeC,MAAf;;AACAH,MAAAA,SAAS,GAAGE,QAAM,CAACX,aAAP,CAAqBY,MAArB,EAA2BV,iBAA3B,CAAZ;AACD,KAHD,CAGE,iBAAM,CAAC;AACR;AACF;;AAED,SAAOO,SAAP;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nexport function extractAuthor(digest, sessionValidators = []) {\n  const [citem] = digest.logs.filter(({\n    type\n  }) => type === 'Consensus');\n  const [pitem] = digest.logs.filter(({\n    type\n  }) => type === 'PreRuntime');\n  const [sitem] = digest.logs.filter(({\n    type\n  }) => type === 'Seal');\n  let accountId; // This is critical to be first for BABE (before Consensus)\n  // If not first, we end up dropping the author at session-end\n\n  if (pitem) {\n    try {\n      const [engine, data] = pitem.asPreRuntime;\n      accountId = engine.extractAuthor(data, sessionValidators);\n    } catch {// ignore\n    }\n  }\n\n  if (!accountId && citem) {\n    try {\n      const [engine, data] = citem.asConsensus;\n      accountId = engine.extractAuthor(data, sessionValidators);\n    } catch {// ignore\n    }\n  } // SEAL, still used in e.g. Kulupu for pow\n\n\n  if (!accountId && sitem) {\n    try {\n      const [engine, data] = sitem.asSeal;\n      accountId = engine.extractAuthor(data, sessionValidators);\n    } catch {// ignore\n    }\n  }\n\n  return accountId;\n}"]},"metadata":{},"sourceType":"module"}