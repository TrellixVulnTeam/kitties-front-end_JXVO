{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, of } from 'rxjs';\nimport { assertReturn, isU8a } from '@polkadot/util';\nimport { decodeAddress } from '@polkadot/util-crypto';\nimport { memo } from \"../util/index.js\";\n\nfunction retrieve(api, address) {\n  var decoded = isU8a(address) ? address : decodeAddress((address || '').toString());\n\n  if (decoded.length > 8) {\n    return of(api.registry.createType('AccountId', decoded));\n  }\n\n  var accountIndex = api.registry.createType('AccountIndex', decoded);\n  return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map(function (accountId) {\n    return assertReturn(accountId, 'Unable to retrieve accountId');\n  }));\n}\n/**\n * @name accountId\n * @param {(Address | AccountId | AccountIndex | string | null)} address - An accounts address in various formats.\n * @description  An [[AccountId]]\n */\n\n\nexport function accountId(instanceId, api) {\n  return memo(instanceId, function (address) {\n    return retrieve(api, address);\n  });\n}","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/api-derive/accounts/accountId.js"],"names":["map","of","assertReturn","isU8a","decodeAddress","memo","retrieve","api","address","decoded","toString","length","registry","createType","accountIndex","derive","accounts","indexToId","pipe","accountId","instanceId"],"mappings":"AAAA;AACA;AACA,SAASA,GAAT,EAAcC,EAAd,QAAwB,MAAxB;AACA,SAASC,YAAT,EAAuBC,KAAvB,QAAoC,gBAApC;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,IAAT,QAAqB,kBAArB;;AAEA,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,OAAvB,EAAgC;AAC9B,MAAMC,OAAO,GAAGN,KAAK,CAACK,OAAD,CAAL,GAAiBA,OAAjB,GAA2BJ,aAAa,CAAC,CAACI,OAAO,IAAI,EAAZ,EAAgBE,QAAhB,EAAD,CAAxD;;AAEA,MAAID,OAAO,CAACE,MAAR,GAAiB,CAArB,EAAwB;AACtB,WAAOV,EAAE,CAACM,GAAG,CAACK,QAAJ,CAAaC,UAAb,CAAwB,WAAxB,EAAqCJ,OAArC,CAAD,CAAT;AACD;;AAED,MAAMK,YAAY,GAAGP,GAAG,CAACK,QAAJ,CAAaC,UAAb,CAAwB,cAAxB,EAAwCJ,OAAxC,CAArB;AACA,SAAOF,GAAG,CAACQ,MAAJ,CAAWC,QAAX,CAAoBC,SAApB,CAA8BH,YAAY,CAACJ,QAAb,EAA9B,EAAuDQ,IAAvD,CAA4DlB,GAAG,CAAC,UAAAmB,SAAS;AAAA,WAAIjB,YAAY,CAACiB,SAAD,EAAY,8BAAZ,CAAhB;AAAA,GAAV,CAA/D,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASA,SAAT,CAAmBC,UAAnB,EAA+Bb,GAA/B,EAAoC;AACzC,SAAOF,IAAI,CAACe,UAAD,EAAa,UAAAZ,OAAO;AAAA,WAAIF,QAAQ,CAACC,GAAD,EAAMC,OAAN,CAAZ;AAAA,GAApB,CAAX;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, of } from 'rxjs';\nimport { assertReturn, isU8a } from '@polkadot/util';\nimport { decodeAddress } from '@polkadot/util-crypto';\nimport { memo } from \"../util/index.js\";\n\nfunction retrieve(api, address) {\n  const decoded = isU8a(address) ? address : decodeAddress((address || '').toString());\n\n  if (decoded.length > 8) {\n    return of(api.registry.createType('AccountId', decoded));\n  }\n\n  const accountIndex = api.registry.createType('AccountIndex', decoded);\n  return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map(accountId => assertReturn(accountId, 'Unable to retrieve accountId')));\n}\n/**\n * @name accountId\n * @param {(Address | AccountId | AccountIndex | string | null)} address - An accounts address in various formats.\n * @description  An [[AccountId]]\n */\n\n\nexport function accountId(instanceId, api) {\n  return memo(instanceId, address => retrieve(api, address));\n}"]},"metadata":{},"sourceType":"module"}