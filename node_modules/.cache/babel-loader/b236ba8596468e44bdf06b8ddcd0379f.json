{"ast":null,"code":"import _slicedToArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _get from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\"; // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { assert, BN, BN_BILLION, BN_HUNDRED, BN_MILLION, BN_QUINTILL, BN_ZERO, bnToBn, bnToHex, bnToU8a, formatBalance, formatNumber, hexToBn, isHex, isString, isU8a, stringify, u8aToBn } from '@polkadot/util';\nexport var DEFAULT_UINT_BITS = 64; // Maximum allowed integer for JS is 2^53 - 1, set limit at 52\n// In this case however, we always print any >32 as hex\n\nvar MAX_NUMBER_BITS = 52;\nvar MUL_P = new BN(10000);\nvar FORMATTERS = [['Perquintill', BN_QUINTILL], ['Perbill', BN_BILLION], ['Permill', BN_MILLION], ['Percent', BN_HUNDRED]];\n\nfunction toPercentage(value, divisor) {\n  return \"\".concat((value.mul(MUL_P).div(divisor).toNumber() / 100).toFixed(2), \"%\");\n}\n/** @internal */\n\n\nfunction decodeAbstracIntU8a(value, bitLength, isNegative) {\n  if (!value.length) {\n    return '0';\n  }\n\n  try {\n    // NOTE When passing u8a in (typically from decoded data), it is always Little Endian\n    return u8aToBn(value.subarray(0, bitLength / 8), {\n      isLe: true,\n      isNegative: isNegative\n    }).toString();\n  } catch (error) {\n    throw new Error(\"AbstractInt: failed on \".concat(stringify(value), \":: \").concat(error.message));\n  }\n}\n/** @internal */\n\n\nfunction decodeAbstractInt(value, bitLength, isNegative) {\n  // This function returns a string, which will be passed in the BN\n  // constructor. It would be ideal to actually return a BN, but there's a\n  // bug: https://github.com/indutny/bn.js/issues/206.\n  if (isHex(value, -1, true)) {\n    return hexToBn(value, {\n      isLe: false,\n      isNegative: isNegative\n    }).toString();\n  } else if (isU8a(value)) {\n    return decodeAbstracIntU8a(value, bitLength, isNegative);\n  } else if (isString(value)) {\n    return new BN(value.toString(), 10).toString();\n  }\n\n  return bnToBn(value).toString();\n}\n/**\n * @name AbstractInt\n * @ignore\n * @noInheritDoc\n */\n\n\nvar _bitLength = /*#__PURE__*/_classPrivateFieldLooseKey(\"bitLength\");\n\nvar _isSigned = /*#__PURE__*/_classPrivateFieldLooseKey(\"isSigned\");\n\nexport var AbstractInt = /*#__PURE__*/function (_BN) {\n  _inherits(AbstractInt, _BN);\n\n  var _super = _createSuper(AbstractInt);\n\n  function AbstractInt(registry) {\n    var _thisSuper, _thisSuper2, _this;\n\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var bitLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_UINT_BITS;\n    var isSigned = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n    _classCallCheck(this, AbstractInt);\n\n    _this = _super.call(this, decodeAbstractInt(value, bitLength, isSigned));\n    _this.registry = void 0;\n    _this.createdAtHash = void 0;\n    Object.defineProperty(_assertThisInitialized(_this), _bitLength, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_assertThisInitialized(_this), _isSigned, {\n      writable: true,\n      value: void 0\n    });\n    _this.registry = registry;\n    _classPrivateFieldLooseBase(_assertThisInitialized(_this), _bitLength)[_bitLength] = bitLength;\n    _classPrivateFieldLooseBase(_assertThisInitialized(_this), _isSigned)[_isSigned] = isSigned;\n\n    var isPositive = _this.gte(BN_ZERO);\n\n    var maxBits = bitLength - (isSigned && isPositive ? 1 : 0);\n    assert(isSigned || isPositive, function () {\n      return \"\".concat(_this.toRawType(), \": Negative number passed to unsigned type\");\n    });\n    assert(_get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(AbstractInt.prototype)), \"bitLength\", _thisSuper).call(_thisSuper) <= maxBits, function () {\n      return \"\".concat(_this.toRawType(), \": Input too large. Found input with \").concat(_get((_thisSuper2 = _assertThisInitialized(_this), _getPrototypeOf(AbstractInt.prototype)), \"bitLength\", _thisSuper2).call(_thisSuper2), \" bits, expected \").concat(maxBits);\n    });\n    return _this;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  _createClass(AbstractInt, [{\n    key: \"encodedLength\",\n    get: function get() {\n      return _classPrivateFieldLooseBase(this, _bitLength)[_bitLength] / 8;\n    }\n    /**\n     * @description returns a hash of the contents\n     */\n\n  }, {\n    key: \"hash\",\n    get: function get() {\n      return this.registry.hash(this.toU8a());\n    }\n    /**\n     * @description Checks if the value is a zero value (align elsewhere)\n     */\n\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return this.isZero();\n    }\n    /**\n     * @description Checks if the value is an unsigned type\n     */\n\n  }, {\n    key: \"isUnsigned\",\n    get: function get() {\n      return !_classPrivateFieldLooseBase(this, _isSigned)[_isSigned];\n    }\n    /**\n     * @description Returns the number of bits in the value\n     */\n\n  }, {\n    key: \"bitLength\",\n    value: function bitLength() {\n      return _classPrivateFieldLooseBase(this, _bitLength)[_bitLength];\n    }\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      // Here we are actually overriding the built-in .eq to take care of both\n      // number and BN inputs (no `.eqn` needed) - numbers will be converted\n      return _get(_getPrototypeOf(AbstractInt.prototype), \"eq\", this).call(this, isHex(other) ? hexToBn(other.toString(), {\n        isLe: false,\n        isNegative: _classPrivateFieldLooseBase(this, _isSigned)[_isSigned]\n      }) : bnToBn(other));\n    }\n    /**\n     * @description True if this value is the max of the type\n     */\n\n  }, {\n    key: \"isMax\",\n    value: function isMax() {\n      var u8a = this.toU8a().filter(function (b) {\n        return b === 0xff;\n      });\n      return u8a.length === _classPrivateFieldLooseBase(this, _bitLength)[_bitLength] / 8;\n    }\n    /**\n     * @description Returns a BigInt representation of the number\n     */\n\n  }, {\n    key: \"toBigInt\",\n    value: function toBigInt() {\n      return BigInt(this.toString());\n    }\n    /**\n     * @description Returns the BN representation of the number. (Compatibility)\n     */\n\n  }, {\n    key: \"toBn\",\n    value: function toBn() {\n      return this;\n    }\n    /**\n     * @description Returns a hex string representation of the value\n     */\n\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      var isLe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      // For display/JSON, this is BE, for compare, use isLe\n      return bnToHex(this, {\n        bitLength: this.bitLength(),\n        isLe: isLe,\n        isNegative: !this.isUnsigned\n      });\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman(isExpanded) {\n      var rawType = this.toRawType();\n\n      if (rawType === 'Balance') {\n        return this.isMax() ? 'everything' // FIXME In the case of multiples we need some way of detecting which instance this belongs\n        // to. as it stands we will always format (incorrectly) against the first token defined\n        : formatBalance(this, {\n          decimals: this.registry.chainDecimals[0],\n          withSi: true,\n          withUnit: this.registry.chainTokens[0]\n        });\n      }\n\n      var _ref = FORMATTERS.find(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 1),\n            type = _ref4[0];\n\n        return type === rawType;\n      }) || [],\n          _ref2 = _slicedToArray(_ref, 2),\n          divisor = _ref2[1];\n\n      return divisor ? toPercentage(this, divisor) : formatNumber(this);\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var onlyHex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      // FIXME this return type should by string | number, however BN returns string\n      // Options here are\n      //   - super.bitLength() - the actual used bits\n      //   - this.#bitLength - the type bits (this should be used, however contracts RPC is problematic)\n      return onlyHex || _get(_getPrototypeOf(AbstractInt.prototype), \"bitLength\", this).call(this) > MAX_NUMBER_BITS ? this.toHex() : this.toNumber();\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      // NOTE In the case of balances, which have a special meaning on the UI\n      // and can be interpreted differently, return a specific value for it so\n      // underlying it always matches (no matter which length it actually is)\n      return this instanceof this.registry.createClass('Balance') ? 'Balance' : \"\".concat(this.isUnsigned ? 'u' : 'i').concat(this.bitLength());\n    }\n    /**\n     * @description Returns the string representation of the value\n     * @param base The base to use for the conversion\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString(base) {\n      // only included here since we do not inherit docs\n      return _get(_getPrototypeOf(AbstractInt.prototype), \"toString\", this).call(this, base);\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"toU8a\",\n    value: function toU8a(isBare) {\n      return bnToU8a(this, {\n        bitLength: this.bitLength(),\n        isLe: true,\n        isNegative: !this.isUnsigned\n      });\n    }\n  }]);\n\n  return AbstractInt;\n}(BN);","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types/codec/AbstractInt.js"],"names":["_classPrivateFieldLooseBase","_classPrivateFieldLooseKey","assert","BN","BN_BILLION","BN_HUNDRED","BN_MILLION","BN_QUINTILL","BN_ZERO","bnToBn","bnToHex","bnToU8a","formatBalance","formatNumber","hexToBn","isHex","isString","isU8a","stringify","u8aToBn","DEFAULT_UINT_BITS","MAX_NUMBER_BITS","MUL_P","FORMATTERS","toPercentage","value","divisor","mul","div","toNumber","toFixed","decodeAbstracIntU8a","bitLength","isNegative","length","subarray","isLe","toString","error","Error","message","decodeAbstractInt","_bitLength","_isSigned","AbstractInt","registry","isSigned","createdAtHash","Object","defineProperty","writable","isPositive","gte","maxBits","toRawType","hash","toU8a","isZero","other","u8a","filter","b","BigInt","isUnsigned","isExpanded","rawType","isMax","decimals","chainDecimals","withSi","withUnit","chainTokens","find","type","onlyHex","toHex","createClass","base","isBare"],"mappings":"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","sourcesContent":["import _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, BN, BN_BILLION, BN_HUNDRED, BN_MILLION, BN_QUINTILL, BN_ZERO, bnToBn, bnToHex, bnToU8a, formatBalance, formatNumber, hexToBn, isHex, isString, isU8a, stringify, u8aToBn } from '@polkadot/util';\nexport const DEFAULT_UINT_BITS = 64; // Maximum allowed integer for JS is 2^53 - 1, set limit at 52\n// In this case however, we always print any >32 as hex\n\nconst MAX_NUMBER_BITS = 52;\nconst MUL_P = new BN(10000);\nconst FORMATTERS = [['Perquintill', BN_QUINTILL], ['Perbill', BN_BILLION], ['Permill', BN_MILLION], ['Percent', BN_HUNDRED]];\n\nfunction toPercentage(value, divisor) {\n  return `${(value.mul(MUL_P).div(divisor).toNumber() / 100).toFixed(2)}%`;\n}\n/** @internal */\n\n\nfunction decodeAbstracIntU8a(value, bitLength, isNegative) {\n  if (!value.length) {\n    return '0';\n  }\n\n  try {\n    // NOTE When passing u8a in (typically from decoded data), it is always Little Endian\n    return u8aToBn(value.subarray(0, bitLength / 8), {\n      isLe: true,\n      isNegative\n    }).toString();\n  } catch (error) {\n    throw new Error(`AbstractInt: failed on ${stringify(value)}:: ${error.message}`);\n  }\n}\n/** @internal */\n\n\nfunction decodeAbstractInt(value, bitLength, isNegative) {\n  // This function returns a string, which will be passed in the BN\n  // constructor. It would be ideal to actually return a BN, but there's a\n  // bug: https://github.com/indutny/bn.js/issues/206.\n  if (isHex(value, -1, true)) {\n    return hexToBn(value, {\n      isLe: false,\n      isNegative\n    }).toString();\n  } else if (isU8a(value)) {\n    return decodeAbstracIntU8a(value, bitLength, isNegative);\n  } else if (isString(value)) {\n    return new BN(value.toString(), 10).toString();\n  }\n\n  return bnToBn(value).toString();\n}\n/**\n * @name AbstractInt\n * @ignore\n * @noInheritDoc\n */\n\n\nvar _bitLength = /*#__PURE__*/_classPrivateFieldLooseKey(\"bitLength\");\n\nvar _isSigned = /*#__PURE__*/_classPrivateFieldLooseKey(\"isSigned\");\n\nexport class AbstractInt extends BN {\n  constructor(registry, value = 0, bitLength = DEFAULT_UINT_BITS, isSigned = false) {\n    super(decodeAbstractInt(value, bitLength, isSigned));\n    this.registry = void 0;\n    this.createdAtHash = void 0;\n    Object.defineProperty(this, _bitLength, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _isSigned, {\n      writable: true,\n      value: void 0\n    });\n    this.registry = registry;\n    _classPrivateFieldLooseBase(this, _bitLength)[_bitLength] = bitLength;\n    _classPrivateFieldLooseBase(this, _isSigned)[_isSigned] = isSigned;\n    const isPositive = this.gte(BN_ZERO);\n    const maxBits = bitLength - (isSigned && isPositive ? 1 : 0);\n    assert(isSigned || isPositive, () => `${this.toRawType()}: Negative number passed to unsigned type`);\n    assert(super.bitLength() <= maxBits, () => `${this.toRawType()}: Input too large. Found input with ${super.bitLength()} bits, expected ${maxBits}`);\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return _classPrivateFieldLooseBase(this, _bitLength)[_bitLength] / 8;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Checks if the value is a zero value (align elsewhere)\n   */\n\n\n  get isEmpty() {\n    return this.isZero();\n  }\n  /**\n   * @description Checks if the value is an unsigned type\n   */\n\n\n  get isUnsigned() {\n    return !_classPrivateFieldLooseBase(this, _isSigned)[_isSigned];\n  }\n  /**\n   * @description Returns the number of bits in the value\n   */\n\n\n  bitLength() {\n    return _classPrivateFieldLooseBase(this, _bitLength)[_bitLength];\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  eq(other) {\n    // Here we are actually overriding the built-in .eq to take care of both\n    // number and BN inputs (no `.eqn` needed) - numbers will be converted\n    return super.eq(isHex(other) ? hexToBn(other.toString(), {\n      isLe: false,\n      isNegative: _classPrivateFieldLooseBase(this, _isSigned)[_isSigned]\n    }) : bnToBn(other));\n  }\n  /**\n   * @description True if this value is the max of the type\n   */\n\n\n  isMax() {\n    const u8a = this.toU8a().filter(b => b === 0xff);\n    return u8a.length === _classPrivateFieldLooseBase(this, _bitLength)[_bitLength] / 8;\n  }\n  /**\n   * @description Returns a BigInt representation of the number\n   */\n\n\n  toBigInt() {\n    return BigInt(this.toString());\n  }\n  /**\n   * @description Returns the BN representation of the number. (Compatibility)\n   */\n\n\n  toBn() {\n    return this;\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex(isLe = false) {\n    // For display/JSON, this is BE, for compare, use isLe\n    return bnToHex(this, {\n      bitLength: this.bitLength(),\n      isLe,\n      isNegative: !this.isUnsigned\n    });\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toHuman(isExpanded) {\n    const rawType = this.toRawType();\n\n    if (rawType === 'Balance') {\n      return this.isMax() ? 'everything' // FIXME In the case of multiples we need some way of detecting which instance this belongs\n      // to. as it stands we will always format (incorrectly) against the first token defined\n      : formatBalance(this, {\n        decimals: this.registry.chainDecimals[0],\n        withSi: true,\n        withUnit: this.registry.chainTokens[0]\n      });\n    }\n\n    const [, divisor] = FORMATTERS.find(([type]) => type === rawType) || [];\n    return divisor ? toPercentage(this, divisor) : formatNumber(this);\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON(onlyHex = false) {\n    // FIXME this return type should by string | number, however BN returns string\n    // Options here are\n    //   - super.bitLength() - the actual used bits\n    //   - this.#bitLength - the type bits (this should be used, however contracts RPC is problematic)\n    return onlyHex || super.bitLength() > MAX_NUMBER_BITS ? this.toHex() : this.toNumber();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    // NOTE In the case of balances, which have a special meaning on the UI\n    // and can be interpreted differently, return a specific value for it so\n    // underlying it always matches (no matter which length it actually is)\n    return this instanceof this.registry.createClass('Balance') ? 'Balance' : `${this.isUnsigned ? 'u' : 'i'}${this.bitLength()}`;\n  }\n  /**\n   * @description Returns the string representation of the value\n   * @param base The base to use for the conversion\n   */\n\n\n  toString(base) {\n    // only included here since we do not inherit docs\n    return super.toString(base);\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    return bnToU8a(this, {\n      bitLength: this.bitLength(),\n      isLe: true,\n      isNegative: !this.isUnsigned\n    });\n  }\n\n}"]},"metadata":{},"sourceType":"module"}