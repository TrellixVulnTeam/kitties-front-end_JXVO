{"ast":null,"code":"// Copyright 2017-2021 @polkadot/networks authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { knownGenesis, knownIcon, knownLedger, knownTestnet } from \"./defaults.js\";\nimport { knownSubstrate } from \"./substrate.js\"; // These are known prefixes that are not sorted\n\nvar UNSORTED = [0, 2, 42];\nexport var allNetworks = knownSubstrate.map(function (o) {\n  var network = o.network || '';\n  var n = o;\n  n.slip44 = knownLedger[network];\n  n.hasLedgerSupport = !!n.slip44;\n  n.genesisHash = knownGenesis[network] || [];\n  n.icon = knownIcon[network] || 'substrate';\n  n.isIgnored = !network || !!knownTestnet[network] || network.startsWith('reserved');\n  return n;\n}); // The list of available/claimed prefixes\n//   - no testnets\n//   - we only include those where we have a standardAccount\n//   - sort by name, however we keep 0, 2, 42 first in the list\n\nexport var availableNetworks = allNetworks.filter(function (n) {\n  return !n.isIgnored && !!n.network;\n}).sort(function (a, b) {\n  return UNSORTED.includes(a.prefix) === UNSORTED.includes(b.prefix) ? 0 : UNSORTED.includes(a.prefix) ? -1 : UNSORTED.includes(b.prefix) ? 1 : a.displayName.localeCompare(b.displayName);\n}); // A filtered list of those chains we have details about (genesisHashes)\n\nexport var selectableNetworks = availableNetworks.filter(function (n) {\n  return n.genesisHash.length || n.prefix === 42;\n});","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/networks/interfaces.js"],"names":["knownGenesis","knownIcon","knownLedger","knownTestnet","knownSubstrate","UNSORTED","allNetworks","map","o","network","n","slip44","hasLedgerSupport","genesisHash","icon","isIgnored","startsWith","availableNetworks","filter","sort","a","b","includes","prefix","displayName","localeCompare","selectableNetworks","length"],"mappings":"AAAA;AACA;AACA,SAASA,YAAT,EAAuBC,SAAvB,EAAkCC,WAAlC,EAA+CC,YAA/C,QAAmE,eAAnE;AACA,SAASC,cAAT,QAA+B,gBAA/B,C,CAAiD;;AAEjD,IAAMC,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,CAAjB;AACA,OAAO,IAAMC,WAAW,GAAGF,cAAc,CAACG,GAAf,CAAmB,UAAAC,CAAC,EAAI;AACjD,MAAMC,OAAO,GAAGD,CAAC,CAACC,OAAF,IAAa,EAA7B;AACA,MAAMC,CAAC,GAAGF,CAAV;AACAE,EAAAA,CAAC,CAACC,MAAF,GAAWT,WAAW,CAACO,OAAD,CAAtB;AACAC,EAAAA,CAAC,CAACE,gBAAF,GAAqB,CAAC,CAACF,CAAC,CAACC,MAAzB;AACAD,EAAAA,CAAC,CAACG,WAAF,GAAgBb,YAAY,CAACS,OAAD,CAAZ,IAAyB,EAAzC;AACAC,EAAAA,CAAC,CAACI,IAAF,GAASb,SAAS,CAACQ,OAAD,CAAT,IAAsB,WAA/B;AACAC,EAAAA,CAAC,CAACK,SAAF,GAAc,CAACN,OAAD,IAAY,CAAC,CAACN,YAAY,CAACM,OAAD,CAA1B,IAAuCA,OAAO,CAACO,UAAR,CAAmB,UAAnB,CAArD;AACA,SAAON,CAAP;AACD,CAT0B,CAApB,C,CASH;AACJ;AACA;AACA;;AAEA,OAAO,IAAMO,iBAAiB,GAAGX,WAAW,CAACY,MAAZ,CAAmB,UAAAR,CAAC;AAAA,SAAI,CAACA,CAAC,CAACK,SAAH,IAAgB,CAAC,CAACL,CAAC,CAACD,OAAxB;AAAA,CAApB,EAAqDU,IAArD,CAA0D,UAACC,CAAD,EAAIC,CAAJ;AAAA,SAAUhB,QAAQ,CAACiB,QAAT,CAAkBF,CAAC,CAACG,MAApB,MAAgClB,QAAQ,CAACiB,QAAT,CAAkBD,CAAC,CAACE,MAApB,CAAhC,GAA8D,CAA9D,GAAkElB,QAAQ,CAACiB,QAAT,CAAkBF,CAAC,CAACG,MAApB,IAA8B,CAAC,CAA/B,GAAmClB,QAAQ,CAACiB,QAAT,CAAkBD,CAAC,CAACE,MAApB,IAA8B,CAA9B,GAAkCH,CAAC,CAACI,WAAF,CAAcC,aAAd,CAA4BJ,CAAC,CAACG,WAA9B,CAAjJ;AAAA,CAA1D,CAA1B,C,CAAkR;;AAEzR,OAAO,IAAME,kBAAkB,GAAGT,iBAAiB,CAACC,MAAlB,CAAyB,UAAAR,CAAC;AAAA,SAAIA,CAAC,CAACG,WAAF,CAAcc,MAAd,IAAwBjB,CAAC,CAACa,MAAF,KAAa,EAAzC;AAAA,CAA1B,CAA3B","sourcesContent":["// Copyright 2017-2021 @polkadot/networks authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { knownGenesis, knownIcon, knownLedger, knownTestnet } from \"./defaults.js\";\nimport { knownSubstrate } from \"./substrate.js\"; // These are known prefixes that are not sorted\n\nconst UNSORTED = [0, 2, 42];\nexport const allNetworks = knownSubstrate.map(o => {\n  const network = o.network || '';\n  const n = o;\n  n.slip44 = knownLedger[network];\n  n.hasLedgerSupport = !!n.slip44;\n  n.genesisHash = knownGenesis[network] || [];\n  n.icon = knownIcon[network] || 'substrate';\n  n.isIgnored = !network || !!knownTestnet[network] || network.startsWith('reserved');\n  return n;\n}); // The list of available/claimed prefixes\n//   - no testnets\n//   - we only include those where we have a standardAccount\n//   - sort by name, however we keep 0, 2, 42 first in the list\n\nexport const availableNetworks = allNetworks.filter(n => !n.isIgnored && !!n.network).sort((a, b) => UNSORTED.includes(a.prefix) === UNSORTED.includes(b.prefix) ? 0 : UNSORTED.includes(a.prefix) ? -1 : UNSORTED.includes(b.prefix) ? 1 : a.displayName.localeCompare(b.displayName)); // A filtered list of those chains we have details about (genesisHashes)\n\nexport const selectableNetworks = availableNetworks.filter(n => n.genesisHash.length || n.prefix === 42);"]},"metadata":{},"sourceType":"module"}