{"ast":null,"code":"import _classCallCheck from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { hexToU8a, isHex, isString, isU8a, u8aToU8a } from '@polkadot/util';\nimport { ethereumEncode, isEthereumAddress } from '@polkadot/util-crypto';\nimport { U8aFixed } from \"../codec/U8aFixed.js\";\n/** @internal */\n\nfunction decodeAccountId(value) {\n  if (isU8a(value) || Array.isArray(value)) {\n    return u8aToU8a(value);\n  } else if (isHex(value) || isEthereumAddress(value)) {\n    return hexToU8a(value);\n  } else if (isString(value)) {\n    return u8aToU8a(value);\n  }\n\n  return value;\n}\n/**\n * @name GenericEthereumAccountId\n * @description\n * A wrapper around an Ethereum-compatible AccountId. Since we are dealing with\n * underlying addresses (20 bytes in length), we extend from U8aFixed which is\n * just a Uint8Array wrapper with a fixed length.\n */\n\n\nexport var GenericEthereumAccountId = /*#__PURE__*/function (_U8aFixed) {\n  _inherits(GenericEthereumAccountId, _U8aFixed);\n\n  var _super = _createSuper(GenericEthereumAccountId);\n\n  function GenericEthereumAccountId(registry) {\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint8Array();\n\n    _classCallCheck(this, GenericEthereumAccountId);\n\n    return _super.call(this, registry, decodeAccountId(value), 160);\n  }\n\n  _createClass(GenericEthereumAccountId, [{\n    key: \"eq\",\n    value:\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n    function eq(other) {\n      return _get(_getPrototypeOf(GenericEthereumAccountId.prototype), \"eq\", this).call(this, decodeAccountId(other));\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman() {\n      return this.toJSON();\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return GenericEthereumAccountId.encode(this);\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return 'AccountId';\n    }\n  }], [{\n    key: \"encode\",\n    value: function encode(value) {\n      return ethereumEncode(value);\n    }\n  }]);\n\n  return GenericEthereumAccountId;\n}(U8aFixed);","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types/ethereum/AccountId.js"],"names":["hexToU8a","isHex","isString","isU8a","u8aToU8a","ethereumEncode","isEthereumAddress","U8aFixed","decodeAccountId","value","Array","isArray","GenericEthereumAccountId","registry","Uint8Array","other","toJSON","toString","encode"],"mappings":";;;;;;AAAA;AACA;AACA,SAASA,QAAT,EAAmBC,KAAnB,EAA0BC,QAA1B,EAAoCC,KAApC,EAA2CC,QAA3C,QAA2D,gBAA3D;AACA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,uBAAlD;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,MAAIN,KAAK,CAACM,KAAD,CAAL,IAAgBC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAApB,EAA0C;AACxC,WAAOL,QAAQ,CAACK,KAAD,CAAf;AACD,GAFD,MAEO,IAAIR,KAAK,CAACQ,KAAD,CAAL,IAAgBH,iBAAiB,CAACG,KAAD,CAArC,EAA8C;AACnD,WAAOT,QAAQ,CAACS,KAAD,CAAf;AACD,GAFM,MAEA,IAAIP,QAAQ,CAACO,KAAD,CAAZ,EAAqB;AAC1B,WAAOL,QAAQ,CAACK,KAAD,CAAf;AACD;;AAED,SAAOA,KAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,WAAaG,wBAAb;AAAA;;AAAA;;AACE,oCAAYC,QAAZ,EAAgD;AAAA,QAA1BJ,KAA0B,uEAAlB,IAAIK,UAAJ,EAAkB;;AAAA;;AAAA,6BACxCD,QADwC,EAC9BL,eAAe,CAACC,KAAD,CADe,EACN,GADM;AAE/C;;AAHH;AAAA;AAAA;AAQE;AACF;AACA;AAGE,gBAAGM,KAAH,EAAU;AACR,8FAAgBP,eAAe,CAACO,KAAD,CAA/B;AACD;AACD;AACF;AACA;;AAlBA;AAAA;AAAA,WAqBE,mBAAU;AACR,aAAO,KAAKC,MAAL,EAAP;AACD;AACD;AACF;AACA;;AA1BA;AAAA;AAAA,WA6BE,kBAAS;AACP,aAAO,KAAKC,QAAL,EAAP;AACD;AACD;AACF;AACA;;AAlCA;AAAA;AAAA,WAqCE,oBAAW;AACT,aAAOL,wBAAwB,CAACM,MAAzB,CAAgC,IAAhC,CAAP;AACD;AACD;AACF;AACA;;AA1CA;AAAA;AAAA,WA6CE,qBAAY;AACV,aAAO,WAAP;AACD;AA/CH;AAAA;AAAA,WAKE,gBAAcT,KAAd,EAAqB;AACnB,aAAOJ,cAAc,CAACI,KAAD,CAArB;AACD;AAPH;;AAAA;AAAA,EAA8CF,QAA9C","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { hexToU8a, isHex, isString, isU8a, u8aToU8a } from '@polkadot/util';\nimport { ethereumEncode, isEthereumAddress } from '@polkadot/util-crypto';\nimport { U8aFixed } from \"../codec/U8aFixed.js\";\n/** @internal */\n\nfunction decodeAccountId(value) {\n  if (isU8a(value) || Array.isArray(value)) {\n    return u8aToU8a(value);\n  } else if (isHex(value) || isEthereumAddress(value)) {\n    return hexToU8a(value);\n  } else if (isString(value)) {\n    return u8aToU8a(value);\n  }\n\n  return value;\n}\n/**\n * @name GenericEthereumAccountId\n * @description\n * A wrapper around an Ethereum-compatible AccountId. Since we are dealing with\n * underlying addresses (20 bytes in length), we extend from U8aFixed which is\n * just a Uint8Array wrapper with a fixed length.\n */\n\n\nexport class GenericEthereumAccountId extends U8aFixed {\n  constructor(registry, value = new Uint8Array()) {\n    super(registry, decodeAccountId(value), 160);\n  }\n\n  static encode(value) {\n    return ethereumEncode(value);\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return super.eq(decodeAccountId(other));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return GenericEthereumAccountId.encode(this);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'AccountId';\n  }\n\n}"]},"metadata":{},"sourceType":"module"}