{"ast":null,"code":"// Copyright 2017-2021 @polkadot/keyring authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { encodeAddress } from '@polkadot/util-crypto';\nconst publicKey = new Uint8Array(32);\nconst address = encodeAddress(publicKey);\nconst meta = {\n  isTesting: true,\n  name: 'nobody'\n};\nconst json = {\n  address,\n  encoded: '',\n  encoding: {\n    content: ['pkcs8', 'ed25519'],\n    type: 'none',\n    version: '0'\n  },\n  meta\n};\nexport function nobody() {\n  const pair = {\n    address,\n    addressRaw: publicKey,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    decodePkcs8: (passphrase, encoded) => undefined,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    decryptMessage: (encryptedMessageWithNonce, senderPublicKey) => null,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    derive: (suri, meta) => pair,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    encodePkcs8: passphrase => new Uint8Array(0),\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    encryptMessage: (message, recipientPublicKey, _nonce) => new Uint8Array(),\n    isLocked: true,\n    lock: () => {// no locking, it is always locked\n    },\n    meta,\n    publicKey,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setMeta: meta => undefined,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    sign: message => new Uint8Array(64),\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    toJson: passphrase => json,\n    type: 'ed25519',\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    unlock: passphrase => undefined,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    verify: (message, signature) => false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    vrfSign: (message, context, extra) => new Uint8Array(96),\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    vrfVerify: (message, vrfResult, context, extra) => false\n  };\n  return pair;\n}","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/keyring/pair/nobody.js"],"names":["encodeAddress","publicKey","Uint8Array","address","meta","isTesting","name","json","encoded","encoding","content","type","version","nobody","pair","addressRaw","decodePkcs8","passphrase","undefined","decryptMessage","encryptedMessageWithNonce","senderPublicKey","derive","suri","encodePkcs8","encryptMessage","message","recipientPublicKey","_nonce","isLocked","lock","setMeta","sign","toJson","unlock","verify","signature","vrfSign","context","extra","vrfVerify","vrfResult"],"mappings":"AAAA;AACA;AACA,SAASA,aAAT,QAA8B,uBAA9B;AACA,MAAMC,SAAS,GAAG,IAAIC,UAAJ,CAAe,EAAf,CAAlB;AACA,MAAMC,OAAO,GAAGH,aAAa,CAACC,SAAD,CAA7B;AACA,MAAMG,IAAI,GAAG;AACXC,EAAAA,SAAS,EAAE,IADA;AAEXC,EAAAA,IAAI,EAAE;AAFK,CAAb;AAIA,MAAMC,IAAI,GAAG;AACXJ,EAAAA,OADW;AAEXK,EAAAA,OAAO,EAAE,EAFE;AAGXC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,CAAC,OAAD,EAAU,SAAV,CADD;AAERC,IAAAA,IAAI,EAAE,MAFE;AAGRC,IAAAA,OAAO,EAAE;AAHD,GAHC;AAQXR,EAAAA;AARW,CAAb;AAUA,OAAO,SAASS,MAAT,GAAkB;AACvB,QAAMC,IAAI,GAAG;AACXX,IAAAA,OADW;AAEXY,IAAAA,UAAU,EAAEd,SAFD;AAGX;AACAe,IAAAA,WAAW,EAAE,CAACC,UAAD,EAAaT,OAAb,KAAyBU,SAJ3B;AAKX;AACAC,IAAAA,cAAc,EAAE,CAACC,yBAAD,EAA4BC,eAA5B,KAAgD,IANrD;AAOX;AACAC,IAAAA,MAAM,EAAE,CAACC,IAAD,EAAOnB,IAAP,KAAgBU,IARb;AASX;AACAU,IAAAA,WAAW,EAAEP,UAAU,IAAI,IAAIf,UAAJ,CAAe,CAAf,CAVhB;AAWX;AACAuB,IAAAA,cAAc,EAAE,CAACC,OAAD,EAAUC,kBAAV,EAA8BC,MAA9B,KAAyC,IAAI1B,UAAJ,EAZ9C;AAaX2B,IAAAA,QAAQ,EAAE,IAbC;AAcXC,IAAAA,IAAI,EAAE,MAAM,CAAC;AACZ,KAfU;AAgBX1B,IAAAA,IAhBW;AAiBXH,IAAAA,SAjBW;AAkBX;AACA8B,IAAAA,OAAO,EAAE3B,IAAI,IAAIc,SAnBN;AAoBX;AACAc,IAAAA,IAAI,EAAEN,OAAO,IAAI,IAAIxB,UAAJ,CAAe,EAAf,CArBN;AAsBX;AACA+B,IAAAA,MAAM,EAAEhB,UAAU,IAAIV,IAvBX;AAwBXI,IAAAA,IAAI,EAAE,SAxBK;AAyBX;AACAuB,IAAAA,MAAM,EAAEjB,UAAU,IAAIC,SA1BX;AA2BX;AACAiB,IAAAA,MAAM,EAAE,CAACT,OAAD,EAAUU,SAAV,KAAwB,KA5BrB;AA6BX;AACAC,IAAAA,OAAO,EAAE,CAACX,OAAD,EAAUY,OAAV,EAAmBC,KAAnB,KAA6B,IAAIrC,UAAJ,CAAe,EAAf,CA9B3B;AA+BX;AACAsC,IAAAA,SAAS,EAAE,CAACd,OAAD,EAAUe,SAAV,EAAqBH,OAArB,EAA8BC,KAA9B,KAAwC;AAhCxC,GAAb;AAkCA,SAAOzB,IAAP;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/keyring authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { encodeAddress } from '@polkadot/util-crypto';\nconst publicKey = new Uint8Array(32);\nconst address = encodeAddress(publicKey);\nconst meta = {\n  isTesting: true,\n  name: 'nobody'\n};\nconst json = {\n  address,\n  encoded: '',\n  encoding: {\n    content: ['pkcs8', 'ed25519'],\n    type: 'none',\n    version: '0'\n  },\n  meta\n};\nexport function nobody() {\n  const pair = {\n    address,\n    addressRaw: publicKey,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    decodePkcs8: (passphrase, encoded) => undefined,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    decryptMessage: (encryptedMessageWithNonce, senderPublicKey) => null,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    derive: (suri, meta) => pair,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    encodePkcs8: passphrase => new Uint8Array(0),\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    encryptMessage: (message, recipientPublicKey, _nonce) => new Uint8Array(),\n    isLocked: true,\n    lock: () => {// no locking, it is always locked\n    },\n    meta,\n    publicKey,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setMeta: meta => undefined,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    sign: message => new Uint8Array(64),\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    toJson: passphrase => json,\n    type: 'ed25519',\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    unlock: passphrase => undefined,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    verify: (message, signature) => false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    vrfSign: (message, context, extra) => new Uint8Array(96),\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    vrfVerify: (message, vrfResult, context, extra) => false\n  };\n  return pair;\n}"]},"metadata":{},"sourceType":"module"}