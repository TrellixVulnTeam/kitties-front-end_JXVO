{"ast":null,"code":"import _get from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { AbstractInt } from \"./AbstractInt.js\";\n/**\n * @name Int\n * @description\n * A generic signed integer codec. For Substrate all numbers are Little Endian encoded,\n * this handles the encoding and decoding of those numbers. Upon construction\n * the bitLength is provided and any additional use keeps the number to this\n * length. This extends `BN`, so all methods available on a normal `BN` object\n * is available here.\n * @noInheritDoc\n */\n\nexport var Int = /*#__PURE__*/function (_AbstractInt) {\n  _inherits(Int, _AbstractInt);\n\n  var _super = _createSuper(Int);\n\n  function Int(registry) {\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var bitLength = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, Int);\n\n    return _super.call(this, registry, value, bitLength, true);\n  }\n\n  _createClass(Int, null, [{\n    key: \"with\",\n    value: function _with(bitLength, typeName) {\n      return /*#__PURE__*/function (_Int) {\n        _inherits(_class, _Int);\n\n        var _super2 = _createSuper(_class);\n\n        function _class(registry, value) {\n          _classCallCheck(this, _class);\n\n          return _super2.call(this, registry, value, bitLength);\n        }\n\n        _createClass(_class, [{\n          key: \"toRawType\",\n          value: function toRawType() {\n            return typeName || _get(_getPrototypeOf(_class.prototype), \"toRawType\", this).call(this);\n          }\n        }]);\n\n        return _class;\n      }(Int);\n    }\n  }]);\n\n  return Int;\n}(AbstractInt);","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types/codec/Int.js"],"names":["AbstractInt","Int","registry","value","bitLength","typeName"],"mappings":";;;;;;AAAA;AACA;AACA,SAASA,WAAT,QAA4B,kBAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAaC,GAAb;AAAA;;AAAA;;AACE,eAAYC,QAAZ,EAA4C;AAAA,QAAtBC,KAAsB,uEAAd,CAAc;AAAA,QAAXC,SAAW;;AAAA;;AAAA,6BACpCF,QADoC,EAC1BC,KAD0B,EACnBC,SADmB,EACR,IADQ;AAE3C;;AAHH;AAAA;AAAA,WAKE,eAAYA,SAAZ,EAAuBC,QAAvB,EAAiC;AAC/B;AAAA;;AAAA;;AACE,wBAAYH,QAAZ,EAAsBC,KAAtB,EAA6B;AAAA;;AAAA,oCACrBD,QADqB,EACXC,KADW,EACJC,SADI;AAE5B;;AAHH;AAAA;AAAA,iBAKE,qBAAY;AACV,mBAAOC,QAAQ,yEAAf;AACD;AAPH;;AAAA;AAAA,QAAqBJ,GAArB;AAUD;AAhBH;;AAAA;AAAA,EAAyBD,WAAzB","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { AbstractInt } from \"./AbstractInt.js\";\n/**\n * @name Int\n * @description\n * A generic signed integer codec. For Substrate all numbers are Little Endian encoded,\n * this handles the encoding and decoding of those numbers. Upon construction\n * the bitLength is provided and any additional use keeps the number to this\n * length. This extends `BN`, so all methods available on a normal `BN` object\n * is available here.\n * @noInheritDoc\n */\n\nexport class Int extends AbstractInt {\n  constructor(registry, value = 0, bitLength) {\n    super(registry, value, bitLength, true);\n  }\n\n  static with(bitLength, typeName) {\n    return class extends Int {\n      constructor(registry, value) {\n        super(registry, value, bitLength);\n      }\n\n      toRawType() {\n        return typeName || super.toRawType();\n      }\n\n    };\n  }\n\n}"]},"metadata":{},"sourceType":"module"}