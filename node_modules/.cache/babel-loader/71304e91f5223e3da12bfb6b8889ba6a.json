{"ast":null,"code":"import _toConsumableArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, compactToU8a, isHex, isU8a, u8aConcat } from '@polkadot/util';\nimport { AbstractArray } from \"./AbstractArray.js\";\nimport { typeToConstructor } from \"./utils/index.js\";\nimport { Vec } from \"./Vec.js\";\n/** @internal */\n\nfunction decodeVecFixed(registry, Type, allocLength, value) {\n  var values = Vec.decodeVec(registry, Type, isU8a(value) || isHex(value) ? u8aConcat(compactToU8a(allocLength), value) : value);\n\n  while (values.length < allocLength) {\n    values.push(new Type(registry));\n  }\n\n  assert(values.length === allocLength, function () {\n    return \"Expected a length of exactly \".concat(allocLength, \" entries\");\n  });\n  return values;\n}\n/**\n * @name VecFixed\n * @description\n * This manages codec arrays of a fixed length\n */\n\n\nexport var VecFixed = /*#__PURE__*/function (_AbstractArray) {\n  _inherits(VecFixed, _AbstractArray);\n\n  var _super = _createSuper(VecFixed);\n\n  function VecFixed(registry, Type, length) {\n    var _this;\n\n    var value = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n    _classCallCheck(this, VecFixed);\n\n    var Clazz = typeToConstructor(registry, Type);\n    _this = _super.call.apply(_super, [this, registry].concat(_toConsumableArray(decodeVecFixed(registry, Clazz, length, value))));\n    _this._Type = void 0;\n    _this._Type = Clazz;\n    return _this;\n  }\n\n  _createClass(VecFixed, [{\n    key: \"Type\",\n    get:\n    /**\n     * @description The type for the items\n     */\n    function get() {\n      return new this._Type(this.registry).toRawType();\n    }\n    /**\n     * @description The length of the value when encoded as a Uint8Array\n     */\n\n  }, {\n    key: \"encodedLength\",\n    get: function get() {\n      return this.reduce(function (total, entry) {\n        return total + entry.encodedLength;\n      }, 0);\n    }\n  }, {\n    key: \"toU8a\",\n    value: function toU8a() {\n      // we override, we don't add the length prefix for ourselves, and at the same time we\n      // ignore isBare on entries, since they should be properly encoded at all times\n      var encoded = this.map(function (entry) {\n        return entry.toU8a();\n      });\n      return encoded.length ? u8aConcat.apply(void 0, _toConsumableArray(encoded)) : new Uint8Array([]);\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return \"[\".concat(this.Type, \";\").concat(this.length, \"]\");\n    }\n  }], [{\n    key: \"with\",\n    value: function _with(Type, length) {\n      return /*#__PURE__*/function (_VecFixed) {\n        _inherits(_class, _VecFixed);\n\n        var _super2 = _createSuper(_class);\n\n        function _class(registry, value) {\n          _classCallCheck(this, _class);\n\n          return _super2.call(this, registry, Type, length, value);\n        }\n\n        return _class;\n      }(VecFixed);\n    }\n  }]);\n\n  return VecFixed;\n}(AbstractArray);","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types/codec/VecFixed.js"],"names":["assert","compactToU8a","isHex","isU8a","u8aConcat","AbstractArray","typeToConstructor","Vec","decodeVecFixed","registry","Type","allocLength","value","values","decodeVec","length","push","VecFixed","Clazz","_Type","toRawType","reduce","total","entry","encodedLength","encoded","map","toU8a","Uint8Array"],"mappings":";;;;;AAAA;AACA;AACA,SAASA,MAAT,EAAiBC,YAAjB,EAA+BC,KAA/B,EAAsCC,KAAtC,EAA6CC,SAA7C,QAA8D,gBAA9D;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,SAASC,GAAT,QAAoB,UAApB;AACA;;AAEA,SAASC,cAAT,CAAwBC,QAAxB,EAAkCC,IAAlC,EAAwCC,WAAxC,EAAqDC,KAArD,EAA4D;AAC1D,MAAMC,MAAM,GAAGN,GAAG,CAACO,SAAJ,CAAcL,QAAd,EAAwBC,IAAxB,EAA8BP,KAAK,CAACS,KAAD,CAAL,IAAgBV,KAAK,CAACU,KAAD,CAArB,GAA+BR,SAAS,CAACH,YAAY,CAACU,WAAD,CAAb,EAA4BC,KAA5B,CAAxC,GAA6EA,KAA3G,CAAf;;AAEA,SAAOC,MAAM,CAACE,MAAP,GAAgBJ,WAAvB,EAAoC;AAClCE,IAAAA,MAAM,CAACG,IAAP,CAAY,IAAIN,IAAJ,CAASD,QAAT,CAAZ;AACD;;AAEDT,EAAAA,MAAM,CAACa,MAAM,CAACE,MAAP,KAAkBJ,WAAnB,EAAgC;AAAA,kDAAsCA,WAAtC;AAAA,GAAhC,CAAN;AACA,SAAOE,MAAP;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,WAAaI,QAAb;AAAA;;AAAA;;AACE,oBAAYR,QAAZ,EAAsBC,IAAtB,EAA4BK,MAA5B,EAAgD;AAAA;;AAAA,QAAZH,KAAY,uEAAJ,EAAI;;AAAA;;AAC9C,QAAMM,KAAK,GAAGZ,iBAAiB,CAACG,QAAD,EAAWC,IAAX,CAA/B;AACA,6CAAMD,QAAN,4BAAmBD,cAAc,CAACC,QAAD,EAAWS,KAAX,EAAkBH,MAAlB,EAA0BH,KAA1B,CAAjC;AACA,UAAKO,KAAL,GAAa,KAAK,CAAlB;AACA,UAAKA,KAAL,GAAaD,KAAb;AAJ8C;AAK/C;;AANH;AAAA;AAAA;AAgBE;AACF;AACA;AAGE,mBAAW;AACT,aAAO,IAAI,KAAKC,KAAT,CAAe,KAAKV,QAApB,EAA8BW,SAA9B,EAAP;AACD;AACD;AACF;AACA;;AA1BA;AAAA;AAAA,SA6BE,eAAoB;AAClB,aAAO,KAAKC,MAAL,CAAY,UAACC,KAAD,EAAQC,KAAR;AAAA,eAAkBD,KAAK,GAAGC,KAAK,CAACC,aAAhC;AAAA,OAAZ,EAA2D,CAA3D,CAAP;AACD;AA/BH;AAAA;AAAA,WAiCE,iBAAQ;AACN;AACA;AACA,UAAMC,OAAO,GAAG,KAAKC,GAAL,CAAS,UAAAH,KAAK;AAAA,eAAIA,KAAK,CAACI,KAAN,EAAJ;AAAA,OAAd,CAAhB;AACA,aAAOF,OAAO,CAACV,MAAR,GAAiBX,SAAS,MAAT,4BAAaqB,OAAb,EAAjB,GAAyC,IAAIG,UAAJ,CAAe,EAAf,CAAhD;AACD;AACD;AACF;AACA;;AAzCA;AAAA;AAAA,WA4CE,qBAAY;AACV,wBAAW,KAAKlB,IAAhB,cAAwB,KAAKK,MAA7B;AACD;AA9CH;AAAA;AAAA,WAQE,eAAYL,IAAZ,EAAkBK,MAAlB,EAA0B;AACxB;AAAA;;AAAA;;AACE,wBAAYN,QAAZ,EAAsBG,KAAtB,EAA6B;AAAA;;AAAA,oCACrBH,QADqB,EACXC,IADW,EACLK,MADK,EACGH,KADH;AAE5B;;AAHH;AAAA,QAAqBK,QAArB;AAMD;AAfH;;AAAA;AAAA,EAA8BZ,aAA9B","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, compactToU8a, isHex, isU8a, u8aConcat } from '@polkadot/util';\nimport { AbstractArray } from \"./AbstractArray.js\";\nimport { typeToConstructor } from \"./utils/index.js\";\nimport { Vec } from \"./Vec.js\";\n/** @internal */\n\nfunction decodeVecFixed(registry, Type, allocLength, value) {\n  const values = Vec.decodeVec(registry, Type, isU8a(value) || isHex(value) ? u8aConcat(compactToU8a(allocLength), value) : value);\n\n  while (values.length < allocLength) {\n    values.push(new Type(registry));\n  }\n\n  assert(values.length === allocLength, () => `Expected a length of exactly ${allocLength} entries`);\n  return values;\n}\n/**\n * @name VecFixed\n * @description\n * This manages codec arrays of a fixed length\n */\n\n\nexport class VecFixed extends AbstractArray {\n  constructor(registry, Type, length, value = []) {\n    const Clazz = typeToConstructor(registry, Type);\n    super(registry, ...decodeVecFixed(registry, Clazz, length, value));\n    this._Type = void 0;\n    this._Type = Clazz;\n  }\n\n  static with(Type, length) {\n    return class extends VecFixed {\n      constructor(registry, value) {\n        super(registry, Type, length, value);\n      }\n\n    };\n  }\n  /**\n   * @description The type for the items\n   */\n\n\n  get Type() {\n    return new this._Type(this.registry).toRawType();\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.reduce((total, entry) => total + entry.encodedLength, 0);\n  }\n\n  toU8a() {\n    // we override, we don't add the length prefix for ourselves, and at the same time we\n    // ignore isBare on entries, since they should be properly encoded at all times\n    const encoded = this.map(entry => entry.toU8a());\n    return encoded.length ? u8aConcat(...encoded) : new Uint8Array([]);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `[${this.Type};${this.length}]`;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}