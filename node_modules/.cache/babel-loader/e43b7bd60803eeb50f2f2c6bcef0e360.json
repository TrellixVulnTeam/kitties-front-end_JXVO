{"ast":null,"code":"import _toConsumableArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { isFunction, isHex, isString, isU8a, stringify, u8aConcat, u8aToU8a } from '@polkadot/util';\nimport { AbstractArray } from \"./AbstractArray.js\";\nimport { decodeU8a, mapToTypeMap, typeToConstructor } from \"./utils/index.js\";\n/** @internal */\n\nfunction decodeTuple(registry, _Types, value) {\n  if (isU8a(value) || isHex(value)) {\n    return decodeU8a(registry, u8aToU8a(value), _Types);\n  }\n\n  var Types = Array.isArray(_Types) ? _Types : Object.values(_Types);\n  return Types.map(function (Type, index) {\n    try {\n      var entry = value === null || value === void 0 ? void 0 : value[index];\n\n      if (entry instanceof Type) {\n        return entry;\n      }\n\n      return new Type(registry, entry);\n    } catch (error) {\n      throw new Error(\"Tuple: failed on \".concat(index, \":: \").concat(error.message));\n    }\n  });\n}\n/**\n * @name Tuple\n * @description\n * A Tuple defines an anonymous fixed-length array, where each element has its\n * own type. It extends the base JS `Array` object.\n */\n\n\nexport var Tuple = /*#__PURE__*/function (_AbstractArray) {\n  _inherits(Tuple, _AbstractArray);\n\n  var _super = _createSuper(Tuple);\n\n  function Tuple(registry, Types, value) {\n    var _this;\n\n    _classCallCheck(this, Tuple);\n\n    var Clazzes = Array.isArray(Types) ? Types.map(function (t) {\n      return typeToConstructor(registry, t);\n    }) : isFunction(Types) || isString(Types) ? [typeToConstructor(registry, Types)] : mapToTypeMap(registry, Types);\n    _this = _super.call.apply(_super, [this, registry].concat(_toConsumableArray(decodeTuple(registry, Clazzes, value))));\n    _this._Types = void 0;\n    _this._Types = Clazzes;\n    return _this;\n  }\n\n  _createClass(Tuple, [{\n    key: \"encodedLength\",\n    get:\n    /**\n     * @description The length of the value when encoded as a Uint8Array\n     */\n    function get() {\n      return this.reduce(function (total, entry) {\n        return total + entry.encodedLength;\n      }, 0);\n    }\n    /**\n     * @description The types definition of the tuple\n     */\n\n  }, {\n    key: \"Types\",\n    get: function get() {\n      var _this2 = this;\n\n      return Array.isArray(this._Types) ? this._Types.map(function (Type) {\n        return new Type(_this2.registry).toRawType();\n      }) : Object.keys(this._Types);\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      var _this3 = this;\n\n      var types = (Array.isArray(this._Types) ? this._Types : Object.values(this._Types)).map(function (Type) {\n        return _this3.registry.getClassName(Type) || new Type(_this3.registry).toRawType();\n      });\n      return \"(\".concat(types.join(','), \")\");\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      // Overwrite the default toString representation of Array.\n      return stringify(this.toJSON());\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\n     */\n\n  }, {\n    key: \"toU8a\",\n    value: function toU8a(isBare) {\n      return u8aConcat.apply(void 0, _toConsumableArray(this.map(function (entry) {\n        return entry.toU8a(isBare);\n      })));\n    }\n  }], [{\n    key: \"with\",\n    value: function _with(Types) {\n      return /*#__PURE__*/function (_Tuple) {\n        _inherits(_class, _Tuple);\n\n        var _super2 = _createSuper(_class);\n\n        function _class(registry, value) {\n          _classCallCheck(this, _class);\n\n          return _super2.call(this, registry, Types, value);\n        }\n\n        return _class;\n      }(Tuple);\n    }\n  }]);\n\n  return Tuple;\n}(AbstractArray);","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types/codec/Tuple.js"],"names":["isFunction","isHex","isString","isU8a","stringify","u8aConcat","u8aToU8a","AbstractArray","decodeU8a","mapToTypeMap","typeToConstructor","decodeTuple","registry","_Types","value","Types","Array","isArray","Object","values","map","Type","index","entry","error","Error","message","Tuple","Clazzes","t","reduce","total","encodedLength","toRawType","keys","types","getClassName","join","toJSON","isBare","toU8a"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { isFunction, isHex, isString, isU8a, stringify, u8aConcat, u8aToU8a } from '@polkadot/util';\nimport { AbstractArray } from \"./AbstractArray.js\";\nimport { decodeU8a, mapToTypeMap, typeToConstructor } from \"./utils/index.js\";\n\n/** @internal */\nfunction decodeTuple(registry, _Types, value) {\n  if (isU8a(value) || isHex(value)) {\n    return decodeU8a(registry, u8aToU8a(value), _Types);\n  }\n\n  const Types = Array.isArray(_Types) ? _Types : Object.values(_Types);\n  return Types.map((Type, index) => {\n    try {\n      const entry = value === null || value === void 0 ? void 0 : value[index];\n\n      if (entry instanceof Type) {\n        return entry;\n      }\n\n      return new Type(registry, entry);\n    } catch (error) {\n      throw new Error(`Tuple: failed on ${index}:: ${error.message}`);\n    }\n  });\n}\n/**\n * @name Tuple\n * @description\n * A Tuple defines an anonymous fixed-length array, where each element has its\n * own type. It extends the base JS `Array` object.\n */\n\n\nexport class Tuple extends AbstractArray {\n  constructor(registry, Types, value) {\n    const Clazzes = Array.isArray(Types) ? Types.map(t => typeToConstructor(registry, t)) : isFunction(Types) || isString(Types) ? [typeToConstructor(registry, Types)] : mapToTypeMap(registry, Types);\n    super(registry, ...decodeTuple(registry, Clazzes, value));\n    this._Types = void 0;\n    this._Types = Clazzes;\n  }\n\n  static with(Types) {\n    return class extends Tuple {\n      constructor(registry, value) {\n        super(registry, Types, value);\n      }\n\n    };\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.reduce((total, entry) => total + entry.encodedLength, 0);\n  }\n  /**\n   * @description The types definition of the tuple\n   */\n\n\n  get Types() {\n    return Array.isArray(this._Types) ? this._Types.map(Type => new Type(this.registry).toRawType()) : Object.keys(this._Types);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    const types = (Array.isArray(this._Types) ? this._Types : Object.values(this._Types)).map(Type => this.registry.getClassName(Type) || new Type(this.registry).toRawType());\n    return `(${types.join(',')})`;\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    // Overwrite the default toString representation of Array.\n    return stringify(this.toJSON());\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    return u8aConcat(...this.map(entry => entry.toU8a(isBare)));\n  }\n\n}"]},"metadata":{},"sourceType":"module"}