{"ast":null,"code":"import _objectSpread from\"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{Form,Input,Grid,Card,Statistic}from'semantic-ui-react';import{useSubstrate}from'./substrate-lib';import{TxButton}from'./substrate-lib/components';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Main(props){var _useSubstrate=useSubstrate(),api=_useSubstrate.api;var accountPair=props.accountPair;// The transaction submission status\nvar _useState=useState(''),_useState2=_slicedToArray(_useState,2),status=_useState2[0],setStatus=_useState2[1];// The currently stored value\nvar _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),currentValue=_useState4[0],setCurrentValue=_useState4[1];var _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),formValue=_useState6[0],setFormValue=_useState6[1];useEffect(function(){var unsubscribe;api.query.templateModule.something(function(newValue){// The storage value is an Option<u32>\n// So we have to check whether it is None first\n// There is also unwrapOr\nif(newValue.isNone){setCurrentValue('<None>');}else{setCurrentValue(newValue.unwrap().toNumber());}}).then(function(unsub){unsubscribe=unsub;}).catch(console.error);return function(){return unsubscribe&&unsubscribe();};},[api.query.templateModule]);return/*#__PURE__*/_jsxs(Grid.Column,{width:8,children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Template Module\"}),/*#__PURE__*/_jsx(Card,{centered:true,children:/*#__PURE__*/_jsx(Card.Content,{textAlign:\"center\",children:/*#__PURE__*/_jsx(Statistic,{label:\"Current Value\",value:currentValue})})}),/*#__PURE__*/_jsxs(Form,{children:[/*#__PURE__*/_jsx(Form.Field,{children:/*#__PURE__*/_jsx(Input,{label:\"New Value\",state:\"newValue\",type:\"number\",onChange:function onChange(_,_ref){var value=_ref.value;return setFormValue(value);}})}),/*#__PURE__*/_jsx(Form.Field,{style:{textAlign:'center'},children:/*#__PURE__*/_jsx(TxButton,{accountPair:accountPair,label:\"Store Something\",type:\"SIGNED-TX\",setStatus:setStatus,attrs:{palletRpc:'templateModule',callable:'doSomething',inputParams:[formValue],paramFields:[true]}})}),/*#__PURE__*/_jsx(\"div\",{style:{overflowWrap:'break-word'},children:status})]})]});}export default function TemplateModule(props){var _useSubstrate2=useSubstrate(),api=_useSubstrate2.api;return api.query.templateModule&&api.query.templateModule.something?/*#__PURE__*/_jsx(Main,_objectSpread({},props)):null;}","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/src/TemplateModule.js"],"names":["React","useEffect","useState","Form","Input","Grid","Card","Statistic","useSubstrate","TxButton","Main","props","api","accountPair","status","setStatus","currentValue","setCurrentValue","formValue","setFormValue","unsubscribe","query","templateModule","something","newValue","isNone","unwrap","toNumber","then","unsub","catch","console","error","_","value","textAlign","palletRpc","callable","inputParams","paramFields","overflowWrap","TemplateModule"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Form, Input, Grid, Card, Statistic } from 'semantic-ui-react'\n\nimport { useSubstrate } from './substrate-lib'\nimport { TxButton } from './substrate-lib/components'\n\nfunction Main (props) {\n  const { api } = useSubstrate()\n  const { accountPair } = props\n\n  // The transaction submission status\n  const [status, setStatus] = useState('')\n\n  // The currently stored value\n  const [currentValue, setCurrentValue] = useState(0)\n  const [formValue, setFormValue] = useState(0)\n\n  useEffect(() => {\n    let unsubscribe\n    api.query.templateModule.something(newValue => {\n      // The storage value is an Option<u32>\n      // So we have to check whether it is None first\n      // There is also unwrapOr\n      if (newValue.isNone) {\n        setCurrentValue('<None>')\n      } else {\n        setCurrentValue(newValue.unwrap().toNumber())\n      }\n    }).then(unsub => {\n      unsubscribe = unsub\n    })\n      .catch(console.error)\n\n    return () => unsubscribe && unsubscribe()\n  }, [api.query.templateModule])\n\n  return (\n    <Grid.Column width={8}>\n      <h1>Template Module</h1>\n      <Card centered>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label='Current Value'\n            value={currentValue}\n          />\n        </Card.Content>\n      </Card>\n      <Form>\n        <Form.Field>\n          <Input\n            label='New Value'\n            state='newValue'\n            type='number'\n            onChange={(_, { value }) => setFormValue(value)}\n          />\n        </Form.Field>\n        <Form.Field style={{ textAlign: 'center' }}>\n          <TxButton\n            accountPair={accountPair}\n            label='Store Something'\n            type='SIGNED-TX'\n            setStatus={setStatus}\n            attrs={{\n              palletRpc: 'templateModule',\n              callable: 'doSomething',\n              inputParams: [formValue],\n              paramFields: [true]\n            }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  )\n}\n\nexport default function TemplateModule (props) {\n  const { api } = useSubstrate()\n  return (api.query.templateModule && api.query.templateModule.something\n    ? <Main {...props} />\n    : null)\n}\n"]},"metadata":{},"sourceType":"module"}