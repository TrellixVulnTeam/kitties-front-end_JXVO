{"ast":null,"code":"import _inherits from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\"; // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { compactFromU8a, compactToU8a, isBigInt, isBn, isNumber, isString } from '@polkadot/util';\nimport { typeToConstructor } from \"./utils/index.js\";\n/**\n * @name Compact\n * @description\n * A compact length-encoding codec wrapper. It performs the same function as Length, however\n * differs in that it uses a variable number of bytes to do the actual encoding. This is mostly\n * used by other types to add length-prefixed encoding, or in the case of wrapped types, taking\n * a number and making the compact representation thereof\n */\n\nvar _Type = /*#__PURE__*/_classPrivateFieldLooseKey(\"Type\");\n\nvar _raw = /*#__PURE__*/_classPrivateFieldLooseKey(\"raw\");\n\nexport var Compact = /*#__PURE__*/function () {\n  function Compact(registry, Type) {\n    var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n    _classCallCheck(this, Compact);\n\n    this.registry = void 0;\n    this.createdAtHash = void 0;\n    Object.defineProperty(this, _Type, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _raw, {\n      writable: true,\n      value: void 0\n    });\n    this.registry = registry;\n    _classPrivateFieldLooseBase(this, _Type)[_Type] = typeToConstructor(registry, Type);\n    _classPrivateFieldLooseBase(this, _raw)[_raw] = Compact.decodeCompact(registry, _classPrivateFieldLooseBase(this, _Type)[_Type], value);\n  }\n\n  _createClass(Compact, [{\n    key: \"encodedLength\",\n    get:\n    /**\n     * @description The length of the value when encoded as a Uint8Array\n     */\n    function get() {\n      return this.toU8a().length;\n    }\n    /**\n     * @description returns a hash of the contents\n     */\n\n  }, {\n    key: \"hash\",\n    get: function get() {\n      return this.registry.hash(this.toU8a());\n    }\n    /**\n     * @description Checks if the value is an empty value\n     */\n\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return _classPrivateFieldLooseBase(this, _raw)[_raw].isEmpty;\n    }\n    /**\n     * @description Returns the number of bits in the value\n     */\n\n  }, {\n    key: \"bitLength\",\n    value: function bitLength() {\n      return _classPrivateFieldLooseBase(this, _raw)[_raw].bitLength();\n    }\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return _classPrivateFieldLooseBase(this, _raw)[_raw].eq(other instanceof Compact ? _classPrivateFieldLooseBase(other, _raw)[_raw] : other);\n    }\n    /**\n     * @description Returns a BigInt representation of the number\n     */\n\n  }, {\n    key: \"toBigInt\",\n    value: function toBigInt() {\n      return _classPrivateFieldLooseBase(this, _raw)[_raw].toBigInt();\n    }\n    /**\n     * @description Returns the BN representation of the number\n     */\n\n  }, {\n    key: \"toBn\",\n    value: function toBn() {\n      return _classPrivateFieldLooseBase(this, _raw)[_raw].toBn();\n    }\n    /**\n     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n     */\n\n  }, {\n    key: \"toHex\",\n    value: function toHex(isLe) {\n      return _classPrivateFieldLooseBase(this, _raw)[_raw].toHex(isLe);\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman(isExtended) {\n      return _classPrivateFieldLooseBase(this, _raw)[_raw].toHuman(isExtended);\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return _classPrivateFieldLooseBase(this, _raw)[_raw].toJSON();\n    }\n    /**\n     * @description Returns the number representation for the value\n     */\n\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      return _classPrivateFieldLooseBase(this, _raw)[_raw].toNumber();\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return \"Compact<\".concat(this.registry.getClassName(_classPrivateFieldLooseBase(this, _Type)[_Type]) || _classPrivateFieldLooseBase(this, _raw)[_raw].toRawType(), \">\");\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return _classPrivateFieldLooseBase(this, _raw)[_raw].toString();\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"toU8a\",\n    value: function toU8a(isBare) {\n      return compactToU8a(_classPrivateFieldLooseBase(this, _raw)[_raw].toBn());\n    }\n    /**\n     * @description Returns the embedded [[UInt]] or [[Moment]] value\n     */\n\n  }, {\n    key: \"unwrap\",\n    value: function unwrap() {\n      return _classPrivateFieldLooseBase(this, _raw)[_raw];\n    }\n  }], [{\n    key: \"with\",\n    value: function _with(Type) {\n      return /*#__PURE__*/function (_Compact) {\n        _inherits(_class, _Compact);\n\n        var _super = _createSuper(_class);\n\n        function _class(registry, value) {\n          _classCallCheck(this, _class);\n\n          return _super.call(this, registry, Type, value);\n        }\n\n        return _class;\n      }(Compact);\n    }\n    /** @internal */\n\n  }, {\n    key: \"decodeCompact\",\n    value: function decodeCompact(registry, Type, value) {\n      if (value instanceof Compact) {\n        return new Type(registry, _classPrivateFieldLooseBase(value, _raw)[_raw]);\n      } else if (isString(value) || isNumber(value) || isBn(value) || isBigInt(value)) {\n        return new Type(registry, value);\n      }\n\n      return new Type(registry, compactFromU8a(value)[1]);\n    }\n  }]);\n\n  return Compact;\n}();","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types/codec/Compact.js"],"names":["_classPrivateFieldLooseBase","_classPrivateFieldLooseKey","compactFromU8a","compactToU8a","isBigInt","isBn","isNumber","isString","typeToConstructor","_Type","_raw","Compact","registry","Type","value","createdAtHash","Object","defineProperty","writable","decodeCompact","toU8a","length","hash","isEmpty","bitLength","other","eq","toBigInt","toBn","isLe","toHex","isExtended","toHuman","toJSON","toNumber","getClassName","toRawType","toString","isBare"],"mappings":"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","sourcesContent":["import _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { compactFromU8a, compactToU8a, isBigInt, isBn, isNumber, isString } from '@polkadot/util';\nimport { typeToConstructor } from \"./utils/index.js\";\n/**\n * @name Compact\n * @description\n * A compact length-encoding codec wrapper. It performs the same function as Length, however\n * differs in that it uses a variable number of bytes to do the actual encoding. This is mostly\n * used by other types to add length-prefixed encoding, or in the case of wrapped types, taking\n * a number and making the compact representation thereof\n */\n\nvar _Type = /*#__PURE__*/_classPrivateFieldLooseKey(\"Type\");\n\nvar _raw = /*#__PURE__*/_classPrivateFieldLooseKey(\"raw\");\n\nexport class Compact {\n  constructor(registry, Type, value = 0) {\n    this.registry = void 0;\n    this.createdAtHash = void 0;\n    Object.defineProperty(this, _Type, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _raw, {\n      writable: true,\n      value: void 0\n    });\n    this.registry = registry;\n    _classPrivateFieldLooseBase(this, _Type)[_Type] = typeToConstructor(registry, Type);\n    _classPrivateFieldLooseBase(this, _raw)[_raw] = Compact.decodeCompact(registry, _classPrivateFieldLooseBase(this, _Type)[_Type], value);\n  }\n\n  static with(Type) {\n    return class extends Compact {\n      constructor(registry, value) {\n        super(registry, Type, value);\n      }\n\n    };\n  }\n  /** @internal */\n\n\n  static decodeCompact(registry, Type, value) {\n    if (value instanceof Compact) {\n      return new Type(registry, _classPrivateFieldLooseBase(value, _raw)[_raw]);\n    } else if (isString(value) || isNumber(value) || isBn(value) || isBigInt(value)) {\n      return new Type(registry, value);\n    }\n\n    return new Type(registry, compactFromU8a(value)[1]);\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].isEmpty;\n  }\n  /**\n   * @description Returns the number of bits in the value\n   */\n\n\n  bitLength() {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].bitLength();\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].eq(other instanceof Compact ? _classPrivateFieldLooseBase(other, _raw)[_raw] : other);\n  }\n  /**\n   * @description Returns a BigInt representation of the number\n   */\n\n\n  toBigInt() {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].toBigInt();\n  }\n  /**\n   * @description Returns the BN representation of the number\n   */\n\n\n  toBn() {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].toBn();\n  }\n  /**\n   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n   */\n\n\n  toHex(isLe) {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].toHex(isLe);\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].toHuman(isExtended);\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].toJSON();\n  }\n  /**\n   * @description Returns the number representation for the value\n   */\n\n\n  toNumber() {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].toNumber();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `Compact<${this.registry.getClassName(_classPrivateFieldLooseBase(this, _Type)[_Type]) || _classPrivateFieldLooseBase(this, _raw)[_raw].toRawType()}>`;\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].toString();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    return compactToU8a(_classPrivateFieldLooseBase(this, _raw)[_raw].toBn());\n  }\n  /**\n   * @description Returns the embedded [[UInt]] or [[Moment]] value\n   */\n\n\n  unwrap() {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw];\n  }\n\n}"]},"metadata":{},"sourceType":"module"}