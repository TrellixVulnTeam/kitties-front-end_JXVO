{"ast":null,"code":"import _classCallCheck from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { Struct } from \"../codec/Struct.js\";\nimport { UNMASK_VERSION } from \"./constants.js\";\n/**\n * @name GenericExtrinsicUnknown\n * @description\n * A default handler for extrinsics where the version is not known (default throw)\n */\n\nexport var GenericExtrinsicUnknown = /*#__PURE__*/function (_Struct) {\n  _inherits(GenericExtrinsicUnknown, _Struct);\n\n  var _super = _createSuper(GenericExtrinsicUnknown);\n\n  function GenericExtrinsicUnknown(registry, value) {\n    var _this;\n\n    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        _ref$isSigned = _ref.isSigned,\n        isSigned = _ref$isSigned === void 0 ? false : _ref$isSigned,\n        _ref$version = _ref.version,\n        version = _ref$version === void 0 ? 0 : _ref$version;\n\n    _classCallCheck(this, GenericExtrinsicUnknown);\n\n    _this = _super.call(this, registry, {});\n    throw new Error(\"Unsupported \".concat(isSigned ? '' : 'un', \"signed extrinsic version \").concat(version & UNMASK_VERSION));\n    return _this;\n  }\n\n  return GenericExtrinsicUnknown;\n}(Struct);","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types/extrinsic/ExtrinsicUnknown.js"],"names":["Struct","UNMASK_VERSION","GenericExtrinsicUnknown","registry","value","isSigned","version","Error"],"mappings":";;;AAAA;AACA;AACA,SAASA,MAAT,QAAuB,oBAAvB;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAaC,uBAAb;AAAA;;AAAA;;AACE,mCAAYC,QAAZ,EAAsBC,KAAtB,EAGQ;AAAA;;AAAA,mFAAJ,EAAI;AAAA,6BAFNC,QAEM;AAAA,QAFNA,QAEM,8BAFK,KAEL;AAAA,4BADNC,OACM;AAAA,QADNA,OACM,6BADI,CACJ;;AAAA;;AACN,8BAAMH,QAAN,EAAgB,EAAhB;AACA,UAAM,IAAII,KAAJ,uBAAyBF,QAAQ,GAAG,EAAH,GAAQ,IAAzC,sCAAyEC,OAAO,GAAGL,cAAnF,EAAN;AAFM;AAGP;;AAPH;AAAA,EAA6CD,MAA7C","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { Struct } from \"../codec/Struct.js\";\nimport { UNMASK_VERSION } from \"./constants.js\";\n/**\n * @name GenericExtrinsicUnknown\n * @description\n * A default handler for extrinsics where the version is not known (default throw)\n */\n\nexport class GenericExtrinsicUnknown extends Struct {\n  constructor(registry, value, {\n    isSigned = false,\n    version = 0\n  } = {}) {\n    super(registry, {});\n    throw new Error(`Unsupported ${isSigned ? '' : 'un'}signed extrinsic version ${version & UNMASK_VERSION}`);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}