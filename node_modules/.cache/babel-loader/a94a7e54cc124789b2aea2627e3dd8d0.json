{"ast":null,"code":"import _objectSpread from\"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{CopyToClipboard}from'react-copy-to-clipboard';import{Menu,Button,Dropdown,Container,Icon,Image,Label}from'semantic-ui-react';import{useSubstrate}from'./substrate-lib';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Main(props){var _useSubstrate=useSubstrate(),keyring=_useSubstrate.keyring;var setAccountAddress=props.setAccountAddress;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),accountSelected=_useState2[0],setAccountSelected=_useState2[1];// Get the list of accounts we possess the private key for\nvar keyringOptions=keyring.getPairs().map(function(account){return{key:account.address,value:account.address,text:account.meta.name.toUpperCase(),icon:'user'};});var initialAddress=keyringOptions.length>0?keyringOptions[0].value:'';// Set the initial address\nuseEffect(function(){setAccountAddress(initialAddress);setAccountSelected(initialAddress);},[setAccountAddress,initialAddress]);var _onChange=function onChange(address){// Update state with new account address\nsetAccountAddress(address);setAccountSelected(address);};return/*#__PURE__*/_jsx(Menu,{attached:\"top\",tabular:true,style:{backgroundColor:'#fff',borderColor:'#fff',paddingTop:'1em',paddingBottom:'1em'},children:/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(Menu.Menu,{children:/*#__PURE__*/_jsx(Image,{src:\"\".concat(process.env.PUBLIC_URL,\"/assets/substrate-logo.png\"),size:\"mini\"})}),/*#__PURE__*/_jsxs(Menu.Menu,{position:\"right\",style:{alignItems:'center'},children:[!accountSelected?/*#__PURE__*/_jsxs(\"span\",{children:[\"Add your account with the\",' ',/*#__PURE__*/_jsx(\"a\",{target:\"_blank\",rel:\"noopener noreferrer\",href:\"https://github.com/polkadot-js/extension\",children:\"Polkadot JS Extension\"})]}):null,/*#__PURE__*/_jsx(CopyToClipboard,{text:accountSelected,children:/*#__PURE__*/_jsx(Button,{basic:true,circular:true,size:\"large\",icon:\"user\",color:accountSelected?'green':'red'})}),/*#__PURE__*/_jsx(Dropdown,{search:true,selection:true,clearable:true,placeholder:\"Select an account\",options:keyringOptions,onChange:function onChange(_,dropdown){_onChange(dropdown.value);},value:accountSelected}),/*#__PURE__*/_jsx(BalanceAnnotation,{accountSelected:accountSelected})]})]})});}function BalanceAnnotation(props){var accountSelected=props.accountSelected;var _useSubstrate2=useSubstrate(),api=_useSubstrate2.api;var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),accountBalance=_useState4[0],setAccountBalance=_useState4[1];// When account address changes, update subscriptions\nuseEffect(function(){var unsubscribe;// If the user has selected an address, create a new subscription\naccountSelected&&api.query.system.account(accountSelected,function(balance){setAccountBalance(balance.data.free.toHuman());}).then(function(unsub){unsubscribe=unsub;}).catch(console.error);return function(){return unsubscribe&&unsubscribe();};},[api,accountSelected]);return accountSelected?/*#__PURE__*/_jsxs(Label,{pointing:\"left\",children:[/*#__PURE__*/_jsx(Icon,{name:\"money\",color:\"green\"}),accountBalance]}):null;}export default function AccountSelector(props){var _useSubstrate3=useSubstrate(),api=_useSubstrate3.api,keyring=_useSubstrate3.keyring;return keyring.getPairs&&api.query?/*#__PURE__*/_jsx(Main,_objectSpread({},props)):null;}","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/src/AccountSelector.js"],"names":["React","useState","useEffect","CopyToClipboard","Menu","Button","Dropdown","Container","Icon","Image","Label","useSubstrate","Main","props","keyring","setAccountAddress","accountSelected","setAccountSelected","keyringOptions","getPairs","map","account","key","address","value","text","meta","name","toUpperCase","icon","initialAddress","length","onChange","backgroundColor","borderColor","paddingTop","paddingBottom","process","env","PUBLIC_URL","alignItems","_","dropdown","BalanceAnnotation","api","accountBalance","setAccountBalance","unsubscribe","query","system","balance","data","free","toHuman","then","unsub","catch","console","error","AccountSelector"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\n\nimport {\n  Menu,\n  Button,\n  Dropdown,\n  Container,\n  Icon,\n  Image,\n  Label\n} from 'semantic-ui-react'\n\nimport { useSubstrate } from './substrate-lib'\n\nfunction Main (props) {\n  const { keyring } = useSubstrate()\n  const { setAccountAddress } = props\n  const [accountSelected, setAccountSelected] = useState('')\n\n  // Get the list of accounts we possess the private key for\n  const keyringOptions = keyring.getPairs().map(account => ({\n    key: account.address,\n    value: account.address,\n    text: account.meta.name.toUpperCase(),\n    icon: 'user'\n  }))\n\n  const initialAddress =\n    keyringOptions.length > 0 ? keyringOptions[0].value : ''\n\n  // Set the initial address\n  useEffect(() => {\n    setAccountAddress(initialAddress)\n    setAccountSelected(initialAddress)\n  }, [setAccountAddress, initialAddress])\n\n  const onChange = address => {\n    // Update state with new account address\n    setAccountAddress(address)\n    setAccountSelected(address)\n  }\n\n  return (\n    <Menu\n      attached='top'\n      tabular\n      style={{\n        backgroundColor: '#fff',\n        borderColor: '#fff',\n        paddingTop: '1em',\n        paddingBottom: '1em'\n      }}\n    >\n      <Container>\n        <Menu.Menu>\n          <Image src={`${process.env.PUBLIC_URL}/assets/substrate-logo.png`} size='mini' />\n        </Menu.Menu>\n        <Menu.Menu position='right' style={{ alignItems: 'center' }}>\n          { !accountSelected\n            ? <span>\n              Add your account with the{' '}\n              <a\n                target='_blank'\n                rel='noopener noreferrer'\n                href='https://github.com/polkadot-js/extension'\n              >\n                Polkadot JS Extension\n              </a>\n            </span>\n            : null }\n          <CopyToClipboard text={accountSelected}>\n            <Button\n              basic\n              circular\n              size='large'\n              icon='user'\n              color={accountSelected ? 'green' : 'red'}\n            />\n          </CopyToClipboard>\n          <Dropdown\n            search\n            selection\n            clearable\n            placeholder='Select an account'\n            options={keyringOptions}\n            onChange={(_, dropdown) => {\n              onChange(dropdown.value)\n            }}\n            value={accountSelected}\n          />\n          <BalanceAnnotation accountSelected={accountSelected} />\n        </Menu.Menu>\n      </Container>\n    </Menu>\n  )\n}\n\nfunction BalanceAnnotation (props) {\n  const { accountSelected } = props\n  const { api } = useSubstrate()\n  const [accountBalance, setAccountBalance] = useState(0)\n\n  // When account address changes, update subscriptions\n  useEffect(() => {\n    let unsubscribe\n\n    // If the user has selected an address, create a new subscription\n    accountSelected &&\n      api.query.system.account(accountSelected, balance => {\n        setAccountBalance(balance.data.free.toHuman())\n      })\n        .then(unsub => {\n          unsubscribe = unsub\n        })\n        .catch(console.error)\n\n    return () => unsubscribe && unsubscribe()\n  }, [api, accountSelected])\n\n  return accountSelected\n    ? (\n    <Label pointing='left'>\n      <Icon name='money' color='green' />\n      {accountBalance}\n    </Label>\n      )\n    : null\n}\n\nexport default function AccountSelector (props) {\n  const { api, keyring } = useSubstrate()\n  return keyring.getPairs && api.query ? <Main {...props} /> : null\n}\n"]},"metadata":{},"sourceType":"module"}