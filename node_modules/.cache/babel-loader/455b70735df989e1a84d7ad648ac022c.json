{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { l } from \"./logging.js\";\nexport function filterEvents(extHash, _ref, allEvents, status) {\n  var _ref$block = _ref.block,\n      extrinsics = _ref$block.extrinsics,\n      header = _ref$block.header;\n  // extrinsics to hashes\n  var myHash = extHash.toHex();\n  var allHashes = extrinsics.map(function (ext) {\n    return ext.hash.toHex();\n  }); // find the index of our extrinsic in the block\n\n  var index = allHashes.indexOf(myHash); // if we do get the block after finalized, it _should_ be there\n\n  if (index === -1) {\n    // only warn on filtering with isInBlock (finalization finalizes after)\n    if (status.isInBlock) {\n      l.warn(\"block \".concat(header.hash.toHex(), \": Unable to find extrinsic \").concat(myHash, \" inside \").concat(allHashes.join(', ')));\n    }\n\n    return;\n  }\n\n  return allEvents.filter(function (_ref2) {\n    var phase = _ref2.phase;\n    return (// only ApplyExtrinsic has the extrinsic index\n      phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(index)\n    );\n  });\n}","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/api/util/filterEvents.js"],"names":["l","filterEvents","extHash","allEvents","status","block","extrinsics","header","myHash","toHex","allHashes","map","ext","hash","index","indexOf","isInBlock","warn","join","filter","phase","isApplyExtrinsic","asApplyExtrinsic","eqn"],"mappings":"AAAA;AACA;AACA,SAASA,CAAT,QAAkB,cAAlB;AACA,OAAO,SAASC,YAAT,CAAsBC,OAAtB,QAKJC,SALI,EAKOC,MALP,EAKe;AAAA,wBAJpBC,KAIoB;AAAA,MAHlBC,UAGkB,cAHlBA,UAGkB;AAAA,MAFlBC,MAEkB,cAFlBA,MAEkB;AACpB;AACA,MAAMC,MAAM,GAAGN,OAAO,CAACO,KAAR,EAAf;AACA,MAAMC,SAAS,GAAGJ,UAAU,CAACK,GAAX,CAAe,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,CAASJ,KAAT,EAAJ;AAAA,GAAlB,CAAlB,CAHoB,CAGuC;;AAE3D,MAAMK,KAAK,GAAGJ,SAAS,CAACK,OAAV,CAAkBP,MAAlB,CAAd,CALoB,CAKqB;;AAEzC,MAAIM,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB;AACA,QAAIV,MAAM,CAACY,SAAX,EAAsB;AACpBhB,MAAAA,CAAC,CAACiB,IAAF,iBAAgBV,MAAM,CAACM,IAAP,CAAYJ,KAAZ,EAAhB,wCAAiED,MAAjE,qBAAkFE,SAAS,CAACQ,IAAV,CAAe,IAAf,CAAlF;AACD;;AAED;AACD;;AAED,SAAOf,SAAS,CAACgB,MAAV,CAAiB;AAAA,QACtBC,KADsB,SACtBA,KADsB;AAAA,WAElB;AACNA,MAAAA,KAAK,CAACC,gBAAN,IAA0BD,KAAK,CAACE,gBAAN,CAAuBC,GAAvB,CAA2BT,KAA3B;AAHF;AAAA,GAAjB,CAAP;AAID","sourcesContent":["// Copyright 2017-2021 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { l } from \"./logging.js\";\nexport function filterEvents(extHash, {\n  block: {\n    extrinsics,\n    header\n  }\n}, allEvents, status) {\n  // extrinsics to hashes\n  const myHash = extHash.toHex();\n  const allHashes = extrinsics.map(ext => ext.hash.toHex()); // find the index of our extrinsic in the block\n\n  const index = allHashes.indexOf(myHash); // if we do get the block after finalized, it _should_ be there\n\n  if (index === -1) {\n    // only warn on filtering with isInBlock (finalization finalizes after)\n    if (status.isInBlock) {\n      l.warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${myHash} inside ${allHashes.join(', ')}`);\n    }\n\n    return;\n  }\n\n  return allEvents.filter(({\n    phase\n  }) => // only ApplyExtrinsic has the extrinsic index\n  phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(index));\n}"]},"metadata":{},"sourceType":"module"}