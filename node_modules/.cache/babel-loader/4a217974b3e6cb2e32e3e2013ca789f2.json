{"ast":null,"code":"import _slicedToArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/ui-keyring authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nimport { createPair } from '@polkadot/keyring';\nimport { chains } from '@polkadot/ui-settings';\nimport { bnToBn, hexToU8a, isHex, isString, stringToU8a, u8aSorted, u8aToString } from '@polkadot/util';\nimport { base64Decode, createKeyMulti, jsonDecrypt, jsonEncrypt } from '@polkadot/util-crypto';\nimport { env } from \"./observable/env.js\";\nimport { Base } from \"./Base.js\";\nimport { accountKey, accountRegex, addressKey, addressRegex, contractKey, contractRegex } from \"./defaults.js\";\nimport { KeyringOption } from \"./options/index.js\";\nvar RECENT_EXPIRY = 24 * 60 * 60; // No accounts (or test accounts) should be loaded until after the chain determination.\n// Chain determination occurs outside of Keyring. Loading `keyring.loadAll({ type: 'ed25519' | 'sr25519' })` is triggered\n// from the API after the chain is received\n\nvar _stores = /*#__PURE__*/_classPrivateFieldLooseKey(\"stores\");\n\nexport var Keyring = /*#__PURE__*/function (_Base) {\n  _inherits(Keyring, _Base);\n\n  var _super = _createSuper(Keyring);\n\n  function Keyring() {\n    var _this;\n\n    _classCallCheck(this, Keyring);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.keyringOption = new KeyringOption();\n    Object.defineProperty(_assertThisInitialized(_this), _stores, {\n      writable: true,\n      value: {\n        account: function account() {\n          return _this.accounts;\n        },\n        address: function address() {\n          return _this.addresses;\n        },\n        contract: function contract() {\n          return _this.contracts;\n        }\n      }\n    });\n    return _this;\n  }\n\n  _createClass(Keyring, [{\n    key: \"addExternal\",\n    value: function addExternal(address) {\n      var meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var pair = this.keyring.addFromAddress(address, _objectSpread(_objectSpread({}, meta), {}, {\n        isExternal: true\n      }), null);\n      return {\n        json: this.saveAccount(pair),\n        pair: pair\n      };\n    }\n  }, {\n    key: \"addHardware\",\n    value: function addHardware(address, hardwareType) {\n      var meta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.addExternal(address, _objectSpread(_objectSpread({}, meta), {}, {\n        hardwareType: hardwareType,\n        isHardware: true\n      }));\n    }\n  }, {\n    key: \"addMultisig\",\n    value: function addMultisig(addresses, threshold) {\n      var _this2 = this;\n\n      var meta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var address = createKeyMulti(addresses, threshold); // we could use `sortAddresses`, but rather use internal encode/decode so we are 100%\n\n      var who = u8aSorted(addresses.map(function (who) {\n        return _this2.decodeAddress(who);\n      })).map(function (who) {\n        return _this2.encodeAddress(who);\n      });\n      return this.addExternal(address, _objectSpread(_objectSpread({}, meta), {}, {\n        isMultisig: true,\n        threshold: bnToBn(threshold).toNumber(),\n        who: who\n      }));\n    }\n  }, {\n    key: \"addPair\",\n    value: function addPair(pair, password) {\n      this.keyring.addPair(pair);\n      return {\n        json: this.saveAccount(pair, password),\n        pair: pair\n      };\n    }\n  }, {\n    key: \"addUri\",\n    value: function addUri(suri, password) {\n      var meta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var type = arguments.length > 3 ? arguments[3] : undefined;\n      var pair = this.keyring.addFromUri(suri, meta, type);\n      return {\n        json: this.saveAccount(pair, password),\n        pair: pair\n      };\n    }\n  }, {\n    key: \"backupAccount\",\n    value: function backupAccount(pair, password) {\n      if (!pair.isLocked) {\n        pair.lock();\n      }\n\n      pair.decodePkcs8(password);\n      return pair.toJson(password);\n    }\n  }, {\n    key: \"backupAccounts\",\n    value: function () {\n      var _backupAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(addresses, password) {\n        var _this3 = this;\n\n        var accountPromises, accounts;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                accountPromises = addresses.map(function (address) {\n                  return new Promise(function (resolve) {\n                    _this3._store.get(accountKey(address), resolve);\n                  });\n                });\n                _context.next = 3;\n                return Promise.all(accountPromises);\n\n              case 3:\n                accounts = _context.sent;\n                return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, jsonEncrypt(stringToU8a(JSON.stringify(accounts)), ['batch-pkcs8'], password)), {}, {\n                  accounts: accounts.map(function (account) {\n                    return {\n                      address: account.address,\n                      meta: account.meta\n                    };\n                  })\n                }));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function backupAccounts(_x, _x2) {\n        return _backupAccounts.apply(this, arguments);\n      }\n\n      return backupAccounts;\n    }()\n  }, {\n    key: \"createFromJson\",\n    value: function createFromJson(json) {\n      var meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.keyring.createFromJson(_objectSpread(_objectSpread({}, json), {}, {\n        meta: _objectSpread(_objectSpread({}, json.meta || {}), {}, {\n          meta: meta\n        })\n      }));\n    }\n  }, {\n    key: \"createFromUri\",\n    value: function createFromUri(suri) {\n      var meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var type = arguments.length > 2 ? arguments[2] : undefined;\n      return this.keyring.createFromUri(suri, meta, type);\n    }\n  }, {\n    key: \"encryptAccount\",\n    value: function encryptAccount(pair, password) {\n      var json = pair.toJson(password);\n      json.meta.whenEdited = Date.now();\n      this.keyring.addFromJson(json);\n      this.accounts.add(this._store, pair.address, json, pair.type);\n    }\n  }, {\n    key: \"forgetAccount\",\n    value: function forgetAccount(address) {\n      this.keyring.removePair(address);\n      this.accounts.remove(this._store, address);\n    }\n  }, {\n    key: \"forgetAddress\",\n    value: function forgetAddress(address) {\n      this.addresses.remove(this._store, address);\n    }\n  }, {\n    key: \"forgetContract\",\n    value: function forgetContract(address) {\n      this.contracts.remove(this._store, address);\n    }\n  }, {\n    key: \"getAccount\",\n    value: function getAccount(address) {\n      return this.getAddress(address, 'account');\n    }\n  }, {\n    key: \"getAccounts\",\n    value: function getAccounts() {\n      var _this4 = this;\n\n      var available = this.accounts.subject.getValue();\n      return Object.keys(available).map(function (address) {\n        return _this4.getAddress(address, 'account');\n      }).filter(function (account) {\n        return env.isDevelopment() || account.meta.isTesting !== true;\n      });\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(_address) {\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var address = isString(_address) ? _address : this.encodeAddress(_address);\n      var publicKey = this.decodeAddress(address);\n      var stores = type ? [_classPrivateFieldLooseBase(this, _stores)[_stores][type]] : Object.values(_classPrivateFieldLooseBase(this, _stores)[_stores]);\n      var info = stores.reduce(function (lastInfo, store) {\n        return store().subject.getValue()[address] || lastInfo;\n      }, undefined);\n      return info && {\n        address: address,\n        meta: info.json.meta,\n        publicKey: publicKey\n      };\n    }\n  }, {\n    key: \"getAddresses\",\n    value: function getAddresses() {\n      var _this5 = this;\n\n      var available = this.addresses.subject.getValue();\n      return Object.keys(available).map(function (address) {\n        return _this5.getAddress(address);\n      });\n    }\n  }, {\n    key: \"getContract\",\n    value: function getContract(address) {\n      return this.getAddress(address, 'contract');\n    }\n  }, {\n    key: \"getContracts\",\n    value: function getContracts() {\n      var _this6 = this;\n\n      var available = this.contracts.subject.getValue();\n      return Object.entries(available).filter(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            contract = _ref2[1].json.meta.contract;\n\n        return !!contract && contract.genesisHash === _this6.genesisHash;\n      }).map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 1),\n            address = _ref4[0];\n\n        return _this6.getContract(address);\n      });\n    }\n  }, {\n    key: \"rewriteKey\",\n    value: function rewriteKey(json, key, hexAddr, creator) {\n      if (hexAddr.substr(0, 2) === '0x') {\n        return;\n      }\n\n      this._store.remove(key);\n\n      this._store.set(creator(hexAddr), json);\n    }\n  }, {\n    key: \"loadAccount\",\n    value: function loadAccount(json, key) {\n      if (!json.meta.isTesting && json.encoded) {\n        // FIXME Just for the transition period (ignoreChecksum)\n        var pair = this.keyring.addFromJson(json, true);\n        this.accounts.add(this._store, pair.address, json, pair.type);\n      }\n\n      var _key$split = key.split(':'),\n          _key$split2 = _slicedToArray(_key$split, 2),\n          hexAddr = _key$split2[1];\n\n      this.rewriteKey(json, key, hexAddr.trim(), accountKey);\n    }\n  }, {\n    key: \"loadAddress\",\n    value: function loadAddress(json, key) {\n      var _json$meta = json.meta,\n          isRecent = _json$meta.isRecent,\n          _json$meta$whenCreate = _json$meta.whenCreated,\n          whenCreated = _json$meta$whenCreate === void 0 ? 0 : _json$meta$whenCreate;\n\n      if (isRecent && Date.now() - whenCreated > RECENT_EXPIRY) {\n        this._store.remove(key);\n\n        return;\n      } // We assume anything hex that is not 32bytes (64 + 2 bytes hex) is an Ethereum-like address\n      // (this caters for both H160 addresses as well as full or compressed publicKeys) - in the case\n      // of both ecdsa and ethereum, we keep it as-is\n\n\n      var address = isHex(json.address) && json.address.length !== 66 ? json.address : this.encodeAddress(isHex(json.address) ? hexToU8a(json.address) // FIXME Just for the transition period (ignoreChecksum)\n      : this.decodeAddress(json.address, true));\n\n      var _key$split3 = key.split(':'),\n          _key$split4 = _slicedToArray(_key$split3, 2),\n          hexAddr = _key$split4[1];\n\n      this.addresses.add(this._store, address, json);\n      this.rewriteKey(json, key, hexAddr, addressKey);\n    }\n  }, {\n    key: \"loadContract\",\n    value: function loadContract(json, key) {\n      var address = this.encodeAddress(this.decodeAddress(json.address));\n\n      var _key$split5 = key.split(':'),\n          _key$split6 = _slicedToArray(_key$split5, 2),\n          hexAddr = _key$split6[1]; // move genesisHash to top-level (TODO Remove from contracts section?)\n\n\n      json.meta.genesisHash = json.meta.genesisHash || json.meta.contract && json.meta.contract.genesisHash;\n      this.contracts.add(this._store, address, json);\n      this.rewriteKey(json, key, hexAddr, contractKey);\n    }\n  }, {\n    key: \"loadInjected\",\n    value: function loadInjected(address, meta, type) {\n      var json = {\n        address: address,\n        meta: _objectSpread(_objectSpread({}, meta), {}, {\n          isInjected: true\n        })\n      };\n      var pair = this.keyring.addFromAddress(address, json.meta, null, type);\n      this.accounts.add(this._store, pair.address, json, pair.type);\n    }\n  }, {\n    key: \"allowGenesis\",\n    value: function allowGenesis(json) {\n      var _this7 = this;\n\n      if (json && json.meta && this.genesisHash) {\n        var hashes = Object.values(chains).find(function (hashes) {\n          return hashes.includes(_this7.genesisHash || '');\n        }) || [this.genesisHash];\n\n        if (json.meta.genesisHash) {\n          return hashes.includes(json.meta.genesisHash);\n        } else if (json.meta.contract) {\n          return hashes.includes(json.meta.contract.genesisHash);\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"loadAll\",\n    value: function loadAll(options) {\n      var _this8 = this;\n\n      var injected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n      _get(_getPrototypeOf(Keyring.prototype), \"initKeyring\", this).call(this, options);\n\n      this._store.all(function (key, json) {\n        if (options.filter ? options.filter(json) : true) {\n          try {\n            if (_this8.allowGenesis(json)) {\n              if (accountRegex.test(key)) {\n                _this8.loadAccount(json, key);\n              } else if (addressRegex.test(key)) {\n                _this8.loadAddress(json, key);\n              } else if (contractRegex.test(key)) {\n                _this8.loadContract(json, key);\n              }\n            }\n          } catch (error) {// ignore\n          }\n        }\n      });\n\n      injected.forEach(function (account) {\n        if (_this8.allowGenesis(account)) {\n          try {\n            _this8.loadInjected(account.address, account.meta, account.type);\n          } catch (error) {// ignore\n          }\n        }\n      });\n      this.keyringOption.init(this);\n    }\n  }, {\n    key: \"restoreAccount\",\n    value: function restoreAccount(json, password) {\n      var cryptoType = Array.isArray(json.encoding.content) ? json.encoding.content[1] : 'ed25519';\n      var encType = Array.isArray(json.encoding.type) ? json.encoding.type : [json.encoding.type];\n      var pair = createPair({\n        toSS58: this.encodeAddress,\n        type: cryptoType\n      }, {\n        publicKey: this.decodeAddress(json.address, true)\n      }, json.meta, isHex(json.encoded) ? hexToU8a(json.encoded) : base64Decode(json.encoded), encType); // unlock, save account and then lock (locking cleans secretKey, so needs to be last)\n\n      pair.decodePkcs8(password);\n      this.addPair(pair, password);\n      pair.lock();\n      return pair;\n    }\n  }, {\n    key: \"restoreAccounts\",\n    value: function restoreAccounts(json, password) {\n      var _this9 = this;\n\n      var accounts = JSON.parse(u8aToString(jsonDecrypt(json, password)));\n      accounts.forEach(function (account) {\n        _this9.loadAccount(account, accountKey(account.address));\n      });\n    }\n  }, {\n    key: \"saveAccount\",\n    value: function saveAccount(pair, password) {\n      this.addTimestamp(pair);\n      var json = pair.toJson(password);\n      this.keyring.addFromJson(json);\n      this.accounts.add(this._store, pair.address, json, pair.type);\n      return json;\n    }\n  }, {\n    key: \"saveAccountMeta\",\n    value: function saveAccountMeta(pair, meta) {\n      var _this10 = this;\n\n      var address = pair.address;\n\n      this._store.get(accountKey(address), function (json) {\n        pair.setMeta(meta);\n        json.meta = pair.meta;\n\n        _this10.accounts.add(_this10._store, address, json, pair.type);\n      });\n    }\n  }, {\n    key: \"saveAddress\",\n    value: function saveAddress(address, meta) {\n      var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'address';\n      var available = this.addresses.subject.getValue();\n      var json = available[address] && available[address].json || {\n        address: address,\n        meta: {\n          isRecent: undefined,\n          whenCreated: Date.now()\n        }\n      };\n      Object.keys(meta).forEach(function (key) {\n        json.meta[key] = meta[key];\n      });\n      delete json.meta.isRecent;\n\n      _classPrivateFieldLooseBase(this, _stores)[_stores][type]().add(this._store, address, json);\n\n      return json;\n    }\n  }, {\n    key: \"saveContract\",\n    value: function saveContract(address, meta) {\n      return this.saveAddress(address, meta, 'contract');\n    }\n  }, {\n    key: \"saveRecent\",\n    value: function saveRecent(address) {\n      var available = this.addresses.subject.getValue();\n\n      if (!available[address]) {\n        this.addresses.add(this._store, address, {\n          address: address,\n          meta: {\n            genesisHash: this.genesisHash,\n            isRecent: true,\n            whenCreated: Date.now()\n          }\n        });\n      }\n\n      return this.addresses.subject.getValue()[address];\n    }\n  }]);\n\n  return Keyring;\n}(Base);","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/ui-keyring/Keyring.js"],"names":["_defineProperty","_classPrivateFieldLooseBase","_classPrivateFieldLooseKey","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","createPair","chains","bnToBn","hexToU8a","isHex","isString","stringToU8a","u8aSorted","u8aToString","base64Decode","createKeyMulti","jsonDecrypt","jsonEncrypt","env","Base","accountKey","accountRegex","addressKey","addressRegex","contractKey","contractRegex","KeyringOption","RECENT_EXPIRY","_stores","Keyring","args","keyringOption","writable","value","account","accounts","address","addresses","contract","contracts","meta","pair","keyring","addFromAddress","isExternal","json","saveAccount","hardwareType","addExternal","isHardware","threshold","who","map","decodeAddress","encodeAddress","isMultisig","toNumber","password","addPair","suri","type","addFromUri","isLocked","lock","decodePkcs8","toJson","accountPromises","Promise","resolve","_store","get","all","JSON","stringify","createFromJson","createFromUri","whenEdited","Date","now","addFromJson","add","removePair","remove","getAddress","available","subject","getValue","isDevelopment","isTesting","_address","publicKey","stores","values","info","reduce","lastInfo","store","undefined","entries","genesisHash","getContract","hexAddr","creator","substr","set","encoded","split","rewriteKey","trim","isRecent","whenCreated","isInjected","hashes","find","includes","options","injected","allowGenesis","test","loadAccount","loadAddress","loadContract","error","loadInjected","init","cryptoType","Array","isArray","encoding","content","encType","toSS58","parse","addTimestamp","setMeta","saveAddress"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Copyright 2017-2021 @polkadot/ui-keyring authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { createPair } from '@polkadot/keyring';\nimport { chains } from '@polkadot/ui-settings';\nimport { bnToBn, hexToU8a, isHex, isString, stringToU8a, u8aSorted, u8aToString } from '@polkadot/util';\nimport { base64Decode, createKeyMulti, jsonDecrypt, jsonEncrypt } from '@polkadot/util-crypto';\nimport { env } from \"./observable/env.js\";\nimport { Base } from \"./Base.js\";\nimport { accountKey, accountRegex, addressKey, addressRegex, contractKey, contractRegex } from \"./defaults.js\";\nimport { KeyringOption } from \"./options/index.js\";\nconst RECENT_EXPIRY = 24 * 60 * 60; // No accounts (or test accounts) should be loaded until after the chain determination.\n// Chain determination occurs outside of Keyring. Loading `keyring.loadAll({ type: 'ed25519' | 'sr25519' })` is triggered\n// from the API after the chain is received\n\nvar _stores = /*#__PURE__*/_classPrivateFieldLooseKey(\"stores\");\n\nexport class Keyring extends Base {\n  constructor(...args) {\n    super(...args);\n    this.keyringOption = new KeyringOption();\n    Object.defineProperty(this, _stores, {\n      writable: true,\n      value: {\n        account: () => this.accounts,\n        address: () => this.addresses,\n        contract: () => this.contracts\n      }\n    });\n  }\n\n  addExternal(address, meta = {}) {\n    const pair = this.keyring.addFromAddress(address, _objectSpread(_objectSpread({}, meta), {}, {\n      isExternal: true\n    }), null);\n    return {\n      json: this.saveAccount(pair),\n      pair\n    };\n  }\n\n  addHardware(address, hardwareType, meta = {}) {\n    return this.addExternal(address, _objectSpread(_objectSpread({}, meta), {}, {\n      hardwareType,\n      isHardware: true\n    }));\n  }\n\n  addMultisig(addresses, threshold, meta = {}) {\n    const address = createKeyMulti(addresses, threshold); // we could use `sortAddresses`, but rather use internal encode/decode so we are 100%\n\n    const who = u8aSorted(addresses.map(who => this.decodeAddress(who))).map(who => this.encodeAddress(who));\n    return this.addExternal(address, _objectSpread(_objectSpread({}, meta), {}, {\n      isMultisig: true,\n      threshold: bnToBn(threshold).toNumber(),\n      who\n    }));\n  }\n\n  addPair(pair, password) {\n    this.keyring.addPair(pair);\n    return {\n      json: this.saveAccount(pair, password),\n      pair\n    };\n  }\n\n  addUri(suri, password, meta = {}, type) {\n    const pair = this.keyring.addFromUri(suri, meta, type);\n    return {\n      json: this.saveAccount(pair, password),\n      pair\n    };\n  }\n\n  backupAccount(pair, password) {\n    if (!pair.isLocked) {\n      pair.lock();\n    }\n\n    pair.decodePkcs8(password);\n    return pair.toJson(password);\n  }\n\n  async backupAccounts(addresses, password) {\n    const accountPromises = addresses.map(address => {\n      return new Promise(resolve => {\n        this._store.get(accountKey(address), resolve);\n      });\n    });\n    const accounts = await Promise.all(accountPromises);\n    return _objectSpread(_objectSpread({}, jsonEncrypt(stringToU8a(JSON.stringify(accounts)), ['batch-pkcs8'], password)), {}, {\n      accounts: accounts.map(account => ({\n        address: account.address,\n        meta: account.meta\n      }))\n    });\n  }\n\n  createFromJson(json, meta = {}) {\n    return this.keyring.createFromJson(_objectSpread(_objectSpread({}, json), {}, {\n      meta: _objectSpread(_objectSpread({}, json.meta || {}), {}, {\n        meta\n      })\n    }));\n  }\n\n  createFromUri(suri, meta = {}, type) {\n    return this.keyring.createFromUri(suri, meta, type);\n  }\n\n  encryptAccount(pair, password) {\n    const json = pair.toJson(password);\n    json.meta.whenEdited = Date.now();\n    this.keyring.addFromJson(json);\n    this.accounts.add(this._store, pair.address, json, pair.type);\n  }\n\n  forgetAccount(address) {\n    this.keyring.removePair(address);\n    this.accounts.remove(this._store, address);\n  }\n\n  forgetAddress(address) {\n    this.addresses.remove(this._store, address);\n  }\n\n  forgetContract(address) {\n    this.contracts.remove(this._store, address);\n  }\n\n  getAccount(address) {\n    return this.getAddress(address, 'account');\n  }\n\n  getAccounts() {\n    const available = this.accounts.subject.getValue();\n    return Object.keys(available).map(address => this.getAddress(address, 'account')).filter(account => env.isDevelopment() || account.meta.isTesting !== true);\n  }\n\n  getAddress(_address, type = null) {\n    const address = isString(_address) ? _address : this.encodeAddress(_address);\n    const publicKey = this.decodeAddress(address);\n    const stores = type ? [_classPrivateFieldLooseBase(this, _stores)[_stores][type]] : Object.values(_classPrivateFieldLooseBase(this, _stores)[_stores]);\n    const info = stores.reduce((lastInfo, store) => store().subject.getValue()[address] || lastInfo, undefined);\n    return info && {\n      address,\n      meta: info.json.meta,\n      publicKey\n    };\n  }\n\n  getAddresses() {\n    const available = this.addresses.subject.getValue();\n    return Object.keys(available).map(address => this.getAddress(address));\n  }\n\n  getContract(address) {\n    return this.getAddress(address, 'contract');\n  }\n\n  getContracts() {\n    const available = this.contracts.subject.getValue();\n    return Object.entries(available).filter(([, {\n      json: {\n        meta: {\n          contract\n        }\n      }\n    }]) => !!contract && contract.genesisHash === this.genesisHash).map(([address]) => this.getContract(address));\n  }\n\n  rewriteKey(json, key, hexAddr, creator) {\n    if (hexAddr.substr(0, 2) === '0x') {\n      return;\n    }\n\n    this._store.remove(key);\n\n    this._store.set(creator(hexAddr), json);\n  }\n\n  loadAccount(json, key) {\n    if (!json.meta.isTesting && json.encoded) {\n      // FIXME Just for the transition period (ignoreChecksum)\n      const pair = this.keyring.addFromJson(json, true);\n      this.accounts.add(this._store, pair.address, json, pair.type);\n    }\n\n    const [, hexAddr] = key.split(':');\n    this.rewriteKey(json, key, hexAddr.trim(), accountKey);\n  }\n\n  loadAddress(json, key) {\n    const {\n      isRecent,\n      whenCreated = 0\n    } = json.meta;\n\n    if (isRecent && Date.now() - whenCreated > RECENT_EXPIRY) {\n      this._store.remove(key);\n\n      return;\n    } // We assume anything hex that is not 32bytes (64 + 2 bytes hex) is an Ethereum-like address\n    // (this caters for both H160 addresses as well as full or compressed publicKeys) - in the case\n    // of both ecdsa and ethereum, we keep it as-is\n\n\n    const address = isHex(json.address) && json.address.length !== 66 ? json.address : this.encodeAddress(isHex(json.address) ? hexToU8a(json.address) // FIXME Just for the transition period (ignoreChecksum)\n    : this.decodeAddress(json.address, true));\n    const [, hexAddr] = key.split(':');\n    this.addresses.add(this._store, address, json);\n    this.rewriteKey(json, key, hexAddr, addressKey);\n  }\n\n  loadContract(json, key) {\n    const address = this.encodeAddress(this.decodeAddress(json.address));\n    const [, hexAddr] = key.split(':'); // move genesisHash to top-level (TODO Remove from contracts section?)\n\n    json.meta.genesisHash = json.meta.genesisHash || json.meta.contract && json.meta.contract.genesisHash;\n    this.contracts.add(this._store, address, json);\n    this.rewriteKey(json, key, hexAddr, contractKey);\n  }\n\n  loadInjected(address, meta, type) {\n    const json = {\n      address,\n      meta: _objectSpread(_objectSpread({}, meta), {}, {\n        isInjected: true\n      })\n    };\n    const pair = this.keyring.addFromAddress(address, json.meta, null, type);\n    this.accounts.add(this._store, pair.address, json, pair.type);\n  }\n\n  allowGenesis(json) {\n    if (json && json.meta && this.genesisHash) {\n      const hashes = Object.values(chains).find(hashes => hashes.includes(this.genesisHash || '')) || [this.genesisHash];\n\n      if (json.meta.genesisHash) {\n        return hashes.includes(json.meta.genesisHash);\n      } else if (json.meta.contract) {\n        return hashes.includes(json.meta.contract.genesisHash);\n      }\n    }\n\n    return true;\n  }\n\n  loadAll(options, injected = []) {\n    super.initKeyring(options);\n\n    this._store.all((key, json) => {\n      if (options.filter ? options.filter(json) : true) {\n        try {\n          if (this.allowGenesis(json)) {\n            if (accountRegex.test(key)) {\n              this.loadAccount(json, key);\n            } else if (addressRegex.test(key)) {\n              this.loadAddress(json, key);\n            } else if (contractRegex.test(key)) {\n              this.loadContract(json, key);\n            }\n          }\n        } catch (error) {// ignore\n        }\n      }\n    });\n\n    injected.forEach(account => {\n      if (this.allowGenesis(account)) {\n        try {\n          this.loadInjected(account.address, account.meta, account.type);\n        } catch (error) {// ignore\n        }\n      }\n    });\n    this.keyringOption.init(this);\n  }\n\n  restoreAccount(json, password) {\n    const cryptoType = Array.isArray(json.encoding.content) ? json.encoding.content[1] : 'ed25519';\n    const encType = Array.isArray(json.encoding.type) ? json.encoding.type : [json.encoding.type];\n    const pair = createPair({\n      toSS58: this.encodeAddress,\n      type: cryptoType\n    }, {\n      publicKey: this.decodeAddress(json.address, true)\n    }, json.meta, isHex(json.encoded) ? hexToU8a(json.encoded) : base64Decode(json.encoded), encType); // unlock, save account and then lock (locking cleans secretKey, so needs to be last)\n\n    pair.decodePkcs8(password);\n    this.addPair(pair, password);\n    pair.lock();\n    return pair;\n  }\n\n  restoreAccounts(json, password) {\n    const accounts = JSON.parse(u8aToString(jsonDecrypt(json, password)));\n    accounts.forEach(account => {\n      this.loadAccount(account, accountKey(account.address));\n    });\n  }\n\n  saveAccount(pair, password) {\n    this.addTimestamp(pair);\n    const json = pair.toJson(password);\n    this.keyring.addFromJson(json);\n    this.accounts.add(this._store, pair.address, json, pair.type);\n    return json;\n  }\n\n  saveAccountMeta(pair, meta) {\n    const address = pair.address;\n\n    this._store.get(accountKey(address), json => {\n      pair.setMeta(meta);\n      json.meta = pair.meta;\n      this.accounts.add(this._store, address, json, pair.type);\n    });\n  }\n\n  saveAddress(address, meta, type = 'address') {\n    const available = this.addresses.subject.getValue();\n    const json = available[address] && available[address].json || {\n      address,\n      meta: {\n        isRecent: undefined,\n        whenCreated: Date.now()\n      }\n    };\n    Object.keys(meta).forEach(key => {\n      json.meta[key] = meta[key];\n    });\n    delete json.meta.isRecent;\n\n    _classPrivateFieldLooseBase(this, _stores)[_stores][type]().add(this._store, address, json);\n\n    return json;\n  }\n\n  saveContract(address, meta) {\n    return this.saveAddress(address, meta, 'contract');\n  }\n\n  saveRecent(address) {\n    const available = this.addresses.subject.getValue();\n\n    if (!available[address]) {\n      this.addresses.add(this._store, address, {\n        address,\n        meta: {\n          genesisHash: this.genesisHash,\n          isRecent: true,\n          whenCreated: Date.now()\n        }\n      });\n    }\n\n    return this.addresses.subject.getValue()[address];\n  }\n\n}"]},"metadata":{},"sourceType":"module"}