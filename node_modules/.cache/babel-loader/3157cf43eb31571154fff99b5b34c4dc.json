{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from '@polkadot/util';\nimport { bip39ToSeed, isReady } from '@polkadot/wasm-crypto';\nimport { mnemonicToSeedSync } from \"./bip39.js\";\nimport { mnemonicValidate } from \"./validate.js\";\n/**\n * @name toSeed\n * @summary Creates a valid Ethereum/Bitcoin-compatible seed from a mnemonic input\n * @example\n * <BR>\n *\n * ```javascript\n * import { mnemonicGenerate, mnemonicToLegacySeed, mnemonicValidate } from '@polkadot/util-crypto';\n *\n * const mnemonic = mnemonicGenerate(); // => string\n * const isValidMnemonic = mnemonicValidate(mnemonic); // => boolean\n *\n * if (isValidMnemonic) {\n *   console.log(`Seed generated from mnemonic: ${mnemonicToLegacySeed(mnemonic)}`); => u8a\n * }\n * ```\n */\n\nexport function mnemonicToLegacySeed(mnemonic) {\n  var password = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var onlyJs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var byteLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 32;\n  assert(mnemonicValidate(mnemonic), 'Invalid bip39 mnemonic specified');\n  assert([32, 64].includes(byteLength), function () {\n    return \"Invalid seed length \".concat(byteLength, \", expected 32 or 64\");\n  });\n\n  if (byteLength && byteLength === 32) {\n    return isReady() && !onlyJs ? bip39ToSeed(mnemonic, password) : mnemonicToSeedSync(mnemonic, password).subarray(0, 32);\n  } else if (byteLength === 64) {\n    return mnemonicToSeedSync(mnemonic, password);\n  } else {\n    return new Uint8Array();\n  }\n}","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/util-crypto/mnemonic/toLegacySeed.js"],"names":["assert","bip39ToSeed","isReady","mnemonicToSeedSync","mnemonicValidate","mnemonicToLegacySeed","mnemonic","password","onlyJs","byteLength","includes","subarray","Uint8Array"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,QAAuB,gBAAvB;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,uBAArC;AACA,SAASC,kBAAT,QAAmC,YAAnC;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,oBAAT,CAA8BC,QAA9B,EAAwF;AAAA,MAAhDC,QAAgD,uEAArC,EAAqC;AAAA,MAAjCC,MAAiC,uEAAxB,KAAwB;AAAA,MAAjBC,UAAiB,uEAAJ,EAAI;AAC7FT,EAAAA,MAAM,CAACI,gBAAgB,CAACE,QAAD,CAAjB,EAA6B,kCAA7B,CAAN;AACAN,EAAAA,MAAM,CAAC,CAAC,EAAD,EAAK,EAAL,EAASU,QAAT,CAAkBD,UAAlB,CAAD,EAAgC;AAAA,yCAA6BA,UAA7B;AAAA,GAAhC,CAAN;;AAEA,MAAIA,UAAU,IAAIA,UAAU,KAAK,EAAjC,EAAqC;AACnC,WAAOP,OAAO,MAAM,CAACM,MAAd,GAAuBP,WAAW,CAACK,QAAD,EAAWC,QAAX,CAAlC,GAAyDJ,kBAAkB,CAACG,QAAD,EAAWC,QAAX,CAAlB,CAAuCI,QAAvC,CAAgD,CAAhD,EAAmD,EAAnD,CAAhE;AACD,GAFD,MAEO,IAAIF,UAAU,KAAK,EAAnB,EAAuB;AAC5B,WAAON,kBAAkB,CAACG,QAAD,EAAWC,QAAX,CAAzB;AACD,GAFM,MAEA;AACL,WAAO,IAAIK,UAAJ,EAAP;AACD;AACF","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from '@polkadot/util';\nimport { bip39ToSeed, isReady } from '@polkadot/wasm-crypto';\nimport { mnemonicToSeedSync } from \"./bip39.js\";\nimport { mnemonicValidate } from \"./validate.js\";\n/**\n * @name toSeed\n * @summary Creates a valid Ethereum/Bitcoin-compatible seed from a mnemonic input\n * @example\n * <BR>\n *\n * ```javascript\n * import { mnemonicGenerate, mnemonicToLegacySeed, mnemonicValidate } from '@polkadot/util-crypto';\n *\n * const mnemonic = mnemonicGenerate(); // => string\n * const isValidMnemonic = mnemonicValidate(mnemonic); // => boolean\n *\n * if (isValidMnemonic) {\n *   console.log(`Seed generated from mnemonic: ${mnemonicToLegacySeed(mnemonic)}`); => u8a\n * }\n * ```\n */\n\nexport function mnemonicToLegacySeed(mnemonic, password = '', onlyJs = false, byteLength = 32) {\n  assert(mnemonicValidate(mnemonic), 'Invalid bip39 mnemonic specified');\n  assert([32, 64].includes(byteLength), () => `Invalid seed length ${byteLength}, expected 32 or 64`);\n\n  if (byteLength && byteLength === 32) {\n    return isReady() && !onlyJs ? bip39ToSeed(mnemonic, password) : mnemonicToSeedSync(mnemonic, password).subarray(0, 32);\n  } else if (byteLength === 64) {\n    return mnemonicToSeedSync(mnemonic, password);\n  } else {\n    return new Uint8Array();\n  }\n}"]},"metadata":{},"sourceType":"module"}