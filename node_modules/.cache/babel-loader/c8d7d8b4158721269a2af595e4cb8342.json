{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { xglobal } from '@polkadot/x-global';\nimport { isFunction } from \"./is/function.js\";\nimport { isString } from \"./is/string.js\";\nimport { assert } from \"./assert.js\";\nvar DEDUPE = 'Either remove and explicitly install matching versions or dedupe using your package manager.\\nThe following conflicting packages were found:';\n/** @internal */\n\nfunction getEntry(name) {\n  var _global = xglobal;\n\n  if (!_global.__polkadotjs) {\n    _global.__polkadotjs = {};\n  }\n\n  if (!_global.__polkadotjs[name]) {\n    _global.__polkadotjs[name] = [];\n  }\n\n  return _global.__polkadotjs[name];\n}\n\nfunction getVersionLength(all) {\n  return all.reduce(function (max, _ref) {\n    var version = _ref.version;\n    return Math.max(max, version.length);\n  }, 0);\n}\n/** @internal */\n\n\nfunction flattenInfos(all) {\n  var verLength = getVersionLength(all);\n  return all.map(function (_ref2) {\n    var name = _ref2.name,\n        version = _ref2.version;\n    return \"\\t\".concat(version.padEnd(verLength), \"\\t\").concat(name);\n  }).join('\\n');\n}\n/** @internal */\n\n\nfunction flattenVersions(entry) {\n  var all = entry.map(function (version) {\n    return isString(version) ? {\n      version: version\n    } : version;\n  });\n  var verLength = getVersionLength(all);\n  return all.map(function (_ref3) {\n    var path = _ref3.path,\n        version = _ref3.version;\n    return \"\\t\".concat(version.padEnd(verLength), \"\\t\").concat(!path || path.length < 5 ? '<unknown>' : path);\n  }).join('\\n');\n}\n/** @internal */\n\n\nfunction getPath(pathOrFn) {\n  if (isFunction(pathOrFn)) {\n    try {\n      return pathOrFn() || '';\n    } catch (error) {\n      return '';\n    }\n  }\n\n  return pathOrFn || '';\n}\n/**\n * @name detectPackage\n * @summary Checks that a specific package is only imported once\n */\n\n\nexport function detectPackage(_ref4, pathOrFn) {\n  var name = _ref4.name,\n      version = _ref4.version;\n  var deps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  assert(name.startsWith('@polkadot'), function () {\n    return \"Invalid package descriptor \".concat(name);\n  });\n  var entry = getEntry(name);\n  entry.push({\n    path: getPath(pathOrFn),\n    version: version\n  });\n\n  if (entry.length !== 1) {\n    console.warn(\"\".concat(name, \" has multiple versions, ensure that there is only one installed.\\n\").concat(DEDUPE, \"\\n\").concat(flattenVersions(entry)));\n  } else {\n    var mismatches = deps.filter(function (d) {\n      return d && d.version !== version;\n    });\n\n    if (mismatches.length) {\n      console.warn(\"\".concat(name, \" requires direct dependencies exactly matching version \").concat(version, \".\\n\").concat(DEDUPE, \"\\n\").concat(flattenInfos(mismatches)));\n    }\n  }\n}","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/util/versionDetect.js"],"names":["xglobal","isFunction","isString","assert","DEDUPE","getEntry","name","_global","__polkadotjs","getVersionLength","all","reduce","max","version","Math","length","flattenInfos","verLength","map","padEnd","join","flattenVersions","entry","path","getPath","pathOrFn","error","detectPackage","deps","startsWith","push","console","warn","mismatches","filter","d"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { xglobal } from '@polkadot/x-global';\nimport { isFunction } from \"./is/function.js\";\nimport { isString } from \"./is/string.js\";\nimport { assert } from \"./assert.js\";\nconst DEDUPE = 'Either remove and explicitly install matching versions or dedupe using your package manager.\\nThe following conflicting packages were found:';\n/** @internal */\n\nfunction getEntry(name) {\n  const _global = xglobal;\n\n  if (!_global.__polkadotjs) {\n    _global.__polkadotjs = {};\n  }\n\n  if (!_global.__polkadotjs[name]) {\n    _global.__polkadotjs[name] = [];\n  }\n\n  return _global.__polkadotjs[name];\n}\n\nfunction getVersionLength(all) {\n  return all.reduce((max, {\n    version\n  }) => Math.max(max, version.length), 0);\n}\n/** @internal */\n\n\nfunction flattenInfos(all) {\n  const verLength = getVersionLength(all);\n  return all.map(({\n    name,\n    version\n  }) => `\\t${version.padEnd(verLength)}\\t${name}`).join('\\n');\n}\n/** @internal */\n\n\nfunction flattenVersions(entry) {\n  const all = entry.map(version => isString(version) ? {\n    version\n  } : version);\n  const verLength = getVersionLength(all);\n  return all.map(({\n    path,\n    version\n  }) => `\\t${version.padEnd(verLength)}\\t${!path || path.length < 5 ? '<unknown>' : path}`).join('\\n');\n}\n/** @internal */\n\n\nfunction getPath(pathOrFn) {\n  if (isFunction(pathOrFn)) {\n    try {\n      return pathOrFn() || '';\n    } catch (error) {\n      return '';\n    }\n  }\n\n  return pathOrFn || '';\n}\n/**\n * @name detectPackage\n * @summary Checks that a specific package is only imported once\n */\n\n\nexport function detectPackage({\n  name,\n  version\n}, pathOrFn, deps = []) {\n  assert(name.startsWith('@polkadot'), () => `Invalid package descriptor ${name}`);\n  const entry = getEntry(name);\n  entry.push({\n    path: getPath(pathOrFn),\n    version\n  });\n\n  if (entry.length !== 1) {\n    console.warn(`${name} has multiple versions, ensure that there is only one installed.\\n${DEDUPE}\\n${flattenVersions(entry)}`);\n  } else {\n    const mismatches = deps.filter(d => d && d.version !== version);\n\n    if (mismatches.length) {\n      console.warn(`${name} requires direct dependencies exactly matching version ${version}.\\n${DEDUPE}\\n${flattenInfos(mismatches)}`);\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}