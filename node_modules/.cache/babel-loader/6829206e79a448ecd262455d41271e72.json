{"ast":null,"code":"var _jsxFileName = \"/home/spren/workspace/kitties-front-end/src/Kitties.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Form, Grid } from 'semantic-ui-react';\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\nimport KittyCards from './KittyCards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Kitties(props) {\n  _s();\n\n  const {\n    api,\n    keyring\n  } = useSubstrate();\n  const {\n    accountPair\n  } = props;\n  const [kitties, setKitties] = useState([]);\n  const [status, setStatus] = useState('');\n  const [kittiesCount, setKittiesCount] = useState(0);\n  const [kittyDNAs, setKittyDNAs] = useState([]);\n  const [kittyOwners, setKittyOwners] = useState([]);\n\n  const fetchKittyCount = () => {\n    let unsub = null;\n\n    const asyncFetch = async () => {\n      unsub = await api.query.kittiesModule.kittiesCount(count => {\n        setKittiesCount(count);\n      });\n    };\n\n    asyncFetch();\n    return () => {\n      unsub && unsub();\n    };\n  };\n\n  const fetchKitties = () => {\n    // TODO: 在这里调用 `api.query.kittiesModule.*` 函数去取得猫咪的信息。\n    // 你需要取得：\n    //   - 共有多少只猫咪\n    //   - 每只猫咪的主人是谁\n    //   - 每只猫咪的 DNA 是什么，用来组合出它的形态\n    let unsubDNAs = null;\n    let unsubOwners = null;\n\n    const asyncFetch = async () => {\n      const indices = Array.from({\n        length: kittiesCount\n      }, (v, i) => i);\n      unsubDNAs = await api.query.kittiesModule.kitties.multi(indices, dnas => {\n        setKittyDNAs(dnas);\n      });\n      unsubOwners = await api.query.kittiesModule.owner.multi(indices, owners => {\n        setKittyOwners(owners);\n      });\n    };\n\n    asyncFetch();\n    return () => {\n      unsubDNAs && unsubDNAs();\n      unsubOwners && unsubOwners();\n    };\n  };\n\n  const populateKitties = () => {\n    // TODO: 在这里添加额外的逻辑。你需要组成这样的数组结构：\n    //  ```javascript\n    //  const kitties = [{\n    //    id: 0,\n    //    dna: ...,\n    //    owner: ...\n    //  }, { id: ..., dna: ..., owner: ... }]\n    //  ```\n    // 这个 kitties 会传入 <KittyCards/> 然后对每只猫咪进行处理\n    const kitties = [];\n\n    for (let i = 0, len = kittyOwners.length; i < len; ++i) {\n      kitties[i] = {};\n      kitties[i].id = i;\n      kitties[i].dna = kittyDNAs[i].unwrap();\n      kitties[i].owner = kittyOwners[i].unwrap().toString();\n    }\n\n    setKitties(kitties);\n  };\n\n  useEffect(fetchKittyCount, [api, keyring]);\n  useEffect(fetchKitties, [api.query.kittiesModule.kitties, api.query.kittiesModule.owner, kittiesCount]);\n  useEffect(populateKitties, [kittyDNAs, kittyOwners]);\n  return /*#__PURE__*/_jsxDEV(Grid.Column, {\n    width: 16,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u5C0F\\u6BDB\\u5B69\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(KittyCards, {\n      kitties: kitties,\n      accountPair: accountPair,\n      setStatus: setStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      style: {\n        margin: '1em 0'\n      },\n      children: /*#__PURE__*/_jsxDEV(Form.Field, {\n        style: {\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(TxButton, {\n          accountPair: accountPair,\n          label: \"\\u521B\\u5EFA\\u5C0F\\u6BDB\\u5B69\",\n          type: \"SIGNED-TX\",\n          setStatus: setStatus,\n          attrs: {\n            palletRpc: 'kittiesModule',\n            callable: 'create',\n            inputParams: [],\n            paramFields: []\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        overflowWrap: 'break-word'\n      },\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Kitties, \"wgvYdD9c69+OF/Ng0eIwOcJce98=\", false, function () {\n  return [useSubstrate];\n});\n\n_c = Kitties;\n\nvar _c;\n\n$RefreshReg$(_c, \"Kitties\");","map":{"version":3,"sources":["/home/spren/workspace/kitties-front-end/src/Kitties.js"],"names":["React","useEffect","useState","Form","Grid","useSubstrate","TxButton","KittyCards","Kitties","props","api","keyring","accountPair","kitties","setKitties","status","setStatus","kittiesCount","setKittiesCount","kittyDNAs","setKittyDNAs","kittyOwners","setKittyOwners","fetchKittyCount","unsub","asyncFetch","query","kittiesModule","count","fetchKitties","unsubDNAs","unsubOwners","indices","Array","from","length","v","i","multi","dnas","owner","owners","populateKitties","len","id","dna","unwrap","toString","margin","textAlign","palletRpc","callable","inputParams","paramFields","overflowWrap"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Form, Grid } from 'semantic-ui-react'\n\nimport { useSubstrate } from './substrate-lib'\nimport { TxButton } from './substrate-lib/components'\n\nimport KittyCards from './KittyCards'\n\nexport default function Kitties (props) {\n  const { api, keyring } = useSubstrate()\n  const { accountPair } = props\n\n  const [kitties, setKitties] = useState([])\n  const [status, setStatus] = useState('')\n\n  const [kittiesCount, setKittiesCount] = useState(0)\n  const [kittyDNAs, setKittyDNAs] = useState([])\n  const [kittyOwners, setKittyOwners] = useState([])\n\n  const fetchKittyCount = () => {\n    let unsub = null\n\n    const asyncFetch = async () => {\n      unsub = await api.query.kittiesModule.kittiesCount((count) => {\n        setKittiesCount(count)\n      })\n    }\n\n    asyncFetch()\n\n    return () => {\n      unsub && unsub()\n    }\n  }\n\n  const fetchKitties = () => {\n    // TODO: 在这里调用 `api.query.kittiesModule.*` 函数去取得猫咪的信息。\n    // 你需要取得：\n    //   - 共有多少只猫咪\n    //   - 每只猫咪的主人是谁\n    //   - 每只猫咪的 DNA 是什么，用来组合出它的形态\n\n    let unsubDNAs = null\n    let unsubOwners = null\n\n    const asyncFetch = async () => {\n      const indices = Array.from({ length: kittiesCount }, (v, i) => i)\n\n      unsubDNAs = await api.query.kittiesModule.kitties.multi(indices, (dnas) => {\n        setKittyDNAs(dnas)\n      })\n\n      unsubOwners = await api.query.kittiesModule.owner.multi(indices, (owners) => {\n        setKittyOwners(owners)\n      })\n    }\n\n    asyncFetch()\n\n    return () => {\n      unsubDNAs && unsubDNAs()\n      unsubOwners && unsubOwners()\n    }\n  }\n\n  const populateKitties = () => {\n    // TODO: 在这里添加额外的逻辑。你需要组成这样的数组结构：\n    //  ```javascript\n    //  const kitties = [{\n    //    id: 0,\n    //    dna: ...,\n    //    owner: ...\n    //  }, { id: ..., dna: ..., owner: ... }]\n    //  ```\n    // 这个 kitties 会传入 <KittyCards/> 然后对每只猫咪进行处理\n    const kitties = []\n\n    for (let i = 0, len = kittyOwners.length; i < len; ++i) {\n      kitties[i] = {}\n      kitties[i].id = i\n      kitties[i].dna = kittyDNAs[i].unwrap()\n      kitties[i].owner = kittyOwners[i].unwrap().toString()\n    }\n\n    setKitties(kitties)\n  }\n\n  useEffect(fetchKittyCount, [api, keyring])\n  useEffect(fetchKitties, [api.query.kittiesModule.kitties, api.query.kittiesModule.owner, kittiesCount])\n  useEffect(populateKitties, [kittyDNAs, kittyOwners])\n\n  return <Grid.Column width={16}>\n    <h1>小毛孩</h1>\n    <KittyCards kitties={kitties} accountPair={accountPair} setStatus={setStatus}/>\n    <Form style={{ margin: '1em 0' }}>\n      <Form.Field style={{ textAlign: 'center' }}>\n        <TxButton\n          accountPair={accountPair} label='创建小毛孩' type='SIGNED-TX' setStatus={setStatus}\n          attrs={{\n            palletRpc: 'kittiesModule',\n            callable: 'create',\n            inputParams: [],\n            paramFields: []\n          }}\n        />\n      </Form.Field>\n    </Form>\n    <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n  </Grid.Column>\n}\n"]},"metadata":{},"sourceType":"module"}