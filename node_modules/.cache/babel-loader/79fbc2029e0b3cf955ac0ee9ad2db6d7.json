{"ast":null,"code":"var _jsxFileName = \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/src/Kitties.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Form, Grid } from \"semantic-ui-react\";\nimport { useSubstrate } from \"./substrate-lib\";\nimport { TxButton } from \"./substrate-lib/components\";\nimport KittyCards from \"./KittyCards\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Kitties(props) {\n  _s();\n\n  const {\n    api,\n    keyring\n  } = useSubstrate();\n  const {\n    accountPair\n  } = props;\n  const [kitties, setKitties] = useState([]);\n  const [status, setStatus] = useState(\"\");\n  const [kittyCount, setKittyCount] = useState(0);\n  const [kittyDNAs, setKittyDNAs] = useState([]);\n  const [kittyOwners, setKittyOwners] = useState([]);\n\n  const fetchKitties = () => {\n    // TODO: 在这里调用 `api.query.kittiesModule.*` 函数去取得猫咪的信息。\n    // 你需要取得：\n    //   - 共有多少只猫咪\n    //   - 每只猫咪的主人是谁\n    //   - 每只猫咪的 DNA 是什么，用来组合出它的形态\n    let unsub = null;\n\n    const asyncFetch = async () => {\n      const count = await api.query.kittiesModule.kittiesCount();\n      setKittyCount(count);\n      const indexArray = Array.from({\n        length: count\n      }, (v, i) => i);\n      const dnaArray = await api.query.kittiesModule.kitties.multi(indexArray);\n      setKittyDNAs(dnaArray);\n      const ownerArray = await api.query.kittiesModule.owner.multi(indexArray);\n      setKittyOwners(ownerArray);\n    };\n\n    asyncFetch();\n  };\n\n  const populateKitties = () => {\n    // TODO: 在这里添加额外的逻辑。你需要组成这样的数组结构：\n    //  ```javascript\n    //  const kitties = [{\n    //    id: 0,\n    //    dna: ...,\n    //    owner: ...\n    //  }, { id: ..., dna: ..., owner: ... }]\n    //  ```\n    // 这个 kitties 会传入 <KittyCards/> 然后对每只猫咪进行处理\n    const kitties = [];\n    console.log(`Kitties Count: ${kittyCount}`);\n    console.log(`DNAs: ${kittyDNAs}`);\n    console.log(`Owners: ${kittyOwners}`);\n\n    for (let i = 0; i < kittyCount; ++i) {\n      kitties[i] = {};\n      kitties[i].id = i;\n      kitties[i].dna = kittyDNAs[i].unwrap();\n      kitties[i].owner = keyring.encodeAddress(kittyOwners[i].unwrap());\n      console.log(`item: ${kitties[i].id}, ${kitties[i].dna}, ${kitties[i].owner}`);\n    }\n\n    console.log(`kitties Array: ${kitties}`);\n    setKitties(kitties);\n  };\n\n  useEffect(fetchKitties, [api, keyring]);\n  useEffect(populateKitties, [keyring, kittyOwners]);\n  return /*#__PURE__*/_jsxDEV(Grid.Column, {\n    width: 16,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u5C0F\\u6BDB\\u5B69\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(KittyCards, {\n      kitties: kitties,\n      accountPair: accountPair,\n      setStatus: setStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      style: {\n        margin: \"1em 0\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Form.Field, {\n        style: {\n          textAlign: \"center\"\n        },\n        children: /*#__PURE__*/_jsxDEV(TxButton, {\n          accountPair: accountPair,\n          label: \"\\u521B\\u5EFA\\u5C0F\\u6BDB\\u5B69\",\n          type: \"SIGNED-TX\",\n          setStatus: setStatus,\n          attrs: {\n            palletRpc: \"kittiesModule\",\n            callable: \"create\",\n            inputParams: [],\n            paramFields: []\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        overflowWrap: \"break-word\"\n      },\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Kitties, \"/GwJGWD68JrgAwbZB+JT8Mg77Uk=\", false, function () {\n  return [useSubstrate];\n});\n\n_c = Kitties;\n\nvar _c;\n\n$RefreshReg$(_c, \"Kitties\");","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/src/Kitties.js"],"names":["React","useEffect","useState","Form","Grid","useSubstrate","TxButton","KittyCards","Kitties","props","api","keyring","accountPair","kitties","setKitties","status","setStatus","kittyCount","setKittyCount","kittyDNAs","setKittyDNAs","kittyOwners","setKittyOwners","fetchKitties","unsub","asyncFetch","count","query","kittiesModule","kittiesCount","indexArray","Array","from","length","v","i","dnaArray","multi","ownerArray","owner","populateKitties","console","log","id","dna","unwrap","encodeAddress","margin","textAlign","palletRpc","callable","inputParams","paramFields","overflowWrap"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,mBAA3B;AAEA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,QAAT,QAAyB,4BAAzB;AAEA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA;;AACrC,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAmBN,YAAY,EAArC;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAkBH,KAAxB;AAEA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACa,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACe,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACmB,WAAD,EAAcC,cAAd,IAAgCpB,QAAQ,CAAC,EAAD,CAA9C;;AAEA,QAAMqB,YAAY,GAAG,MAAM;AACzB;AACA;AACA;AACA;AACA;AAEA,QAAIC,KAAK,GAAG,IAAZ;;AAEA,UAAMC,UAAU,GAAG,YAAY;AAC7B,YAAMC,KAAK,GAAG,MAAMhB,GAAG,CAACiB,KAAJ,CAAUC,aAAV,CAAwBC,YAAxB,EAApB;AACAX,MAAAA,aAAa,CAACQ,KAAD,CAAb;AAGA,YAAMI,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAW;AAAEC,QAAAA,MAAM,EAAEP;AAAV,OAAX,EAA8B,CAACQ,CAAD,EAAIC,CAAJ,KAAUA,CAAxC,CAAnB;AAEA,YAAMC,QAAQ,GAAG,MAAM1B,GAAG,CAACiB,KAAJ,CAAUC,aAAV,CAAwBf,OAAxB,CAAgCwB,KAAhC,CAAsCP,UAAtC,CAAvB;AACAV,MAAAA,YAAY,CAACgB,QAAD,CAAZ;AAEA,YAAME,UAAU,GAAG,MAAM5B,GAAG,CAACiB,KAAJ,CAAUC,aAAV,CAAwBW,KAAxB,CAA8BF,KAA9B,CAAoCP,UAApC,CAAzB;AACAR,MAAAA,cAAc,CAACgB,UAAD,CAAd;AACD,KAZD;;AAcAb,IAAAA,UAAU;AACX,GAxBD;;AA0BA,QAAMe,eAAe,GAAG,MAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,UAAM3B,OAAO,GAAG,EAAhB;AAEA4B,IAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiBzB,UAAW,EAAzC;AACAwB,IAAAA,OAAO,CAACC,GAAR,CAAa,SAAQvB,SAAU,EAA/B;AACAsB,IAAAA,OAAO,CAACC,GAAR,CAAa,WAAUrB,WAAY,EAAnC;;AACA,SAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,UAApB,EAAgC,EAAEkB,CAAlC,EAAqC;AACnCtB,MAAAA,OAAO,CAACsB,CAAD,CAAP,GAAa,EAAb;AACAtB,MAAAA,OAAO,CAACsB,CAAD,CAAP,CAAWQ,EAAX,GAAgBR,CAAhB;AACAtB,MAAAA,OAAO,CAACsB,CAAD,CAAP,CAAWS,GAAX,GAAiBzB,SAAS,CAACgB,CAAD,CAAT,CAAaU,MAAb,EAAjB;AACAhC,MAAAA,OAAO,CAACsB,CAAD,CAAP,CAAWI,KAAX,GAAmB5B,OAAO,CAACmC,aAAR,CAAsBzB,WAAW,CAACc,CAAD,CAAX,CAAeU,MAAf,EAAtB,CAAnB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAa,SAAQ7B,OAAO,CAACsB,CAAD,CAAP,CAAWQ,EAAG,KAAI9B,OAAO,CAACsB,CAAD,CAAP,CAAWS,GAAI,KAAI/B,OAAO,CAACsB,CAAD,CAAP,CAAWI,KAAM,EAA3E;AACD;;AACDE,IAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiB7B,OAAQ,EAAtC;AACAC,IAAAA,UAAU,CAACD,OAAD,CAAV;AACD,GAzBD;;AA2BAZ,EAAAA,SAAS,CAACsB,YAAD,EAAe,CAACb,GAAD,EAAMC,OAAN,CAAf,CAAT;AACAV,EAAAA,SAAS,CAACuC,eAAD,EAAkB,CAAC7B,OAAD,EAAUU,WAAV,CAAlB,CAAT;AAEA,sBACE,QAAC,IAAD,CAAM,MAAN;AAAa,IAAA,KAAK,EAAE,EAApB;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,UAAD;AACE,MAAA,OAAO,EAAER,OADX;AAEE,MAAA,WAAW,EAAED,WAFf;AAGE,MAAA,SAAS,EAAEI;AAHb;AAAA;AAAA;AAAA;AAAA,YAFF,eAOE,QAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAE+B,QAAAA,MAAM,EAAE;AAAV,OAAb;AAAA,6BACE,QAAC,IAAD,CAAM,KAAN;AAAY,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAAnB;AAAA,+BACE,QAAC,QAAD;AACE,UAAA,WAAW,EAAEpC,WADf;AAEE,UAAA,KAAK,EAAC,gCAFR;AAGE,UAAA,IAAI,EAAC,WAHP;AAIE,UAAA,SAAS,EAAEI,SAJb;AAKE,UAAA,KAAK,EAAE;AACLiC,YAAAA,SAAS,EAAE,eADN;AAELC,YAAAA,QAAQ,EAAE,QAFL;AAGLC,YAAAA,WAAW,EAAE,EAHR;AAILC,YAAAA,WAAW,EAAE;AAJR;AALT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAPF,eAuBE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,YAAY,EAAE;AAAhB,OAAZ;AAAA,gBAA6CtC;AAA7C;AAAA;AAAA;AAAA;AAAA,YAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD;;GA7FuBP,O;UACGH,Y;;;KADHG,O","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Form, Grid } from \"semantic-ui-react\";\n\nimport { useSubstrate } from \"./substrate-lib\";\nimport { TxButton } from \"./substrate-lib/components\";\n\nimport KittyCards from \"./KittyCards\";\n\nexport default function Kitties(props) {\n  const { api, keyring } = useSubstrate();\n  const { accountPair } = props;\n\n  const [kitties, setKitties] = useState([]);\n  const [status, setStatus] = useState(\"\");\n  const [kittyCount, setKittyCount] = useState(0);\n  const [kittyDNAs, setKittyDNAs] = useState([]);\n  const [kittyOwners, setKittyOwners] = useState([]);\n\n  const fetchKitties = () => {\n    // TODO: 在这里调用 `api.query.kittiesModule.*` 函数去取得猫咪的信息。\n    // 你需要取得：\n    //   - 共有多少只猫咪\n    //   - 每只猫咪的主人是谁\n    //   - 每只猫咪的 DNA 是什么，用来组合出它的形态\n\n    let unsub = null;\n\n    const asyncFetch = async () => {\n      const count = await api.query.kittiesModule.kittiesCount();\n      setKittyCount(count);\n\n\n      const indexArray = Array.from({ length: count }, (v, i) => i);\n\n      const dnaArray = await api.query.kittiesModule.kitties.multi(indexArray);\n      setKittyDNAs(dnaArray);\n\n      const ownerArray = await api.query.kittiesModule.owner.multi(indexArray);\n      setKittyOwners(ownerArray);\n    };\n\n    asyncFetch();\n  };\n\n  const populateKitties = () => {\n    // TODO: 在这里添加额外的逻辑。你需要组成这样的数组结构：\n    //  ```javascript\n    //  const kitties = [{\n    //    id: 0,\n    //    dna: ...,\n    //    owner: ...\n    //  }, { id: ..., dna: ..., owner: ... }]\n    //  ```\n    // 这个 kitties 会传入 <KittyCards/> 然后对每只猫咪进行处理\n\n    const kitties = [];\n\n    console.log(`Kitties Count: ${kittyCount}`);\n    console.log(`DNAs: ${kittyDNAs}`);\n    console.log(`Owners: ${kittyOwners}`);\n    for (let i = 0; i < kittyCount; ++i) {\n      kitties[i] = {};\n      kitties[i].id = i;\n      kitties[i].dna = kittyDNAs[i].unwrap();\n      kitties[i].owner = keyring.encodeAddress(kittyOwners[i].unwrap())\n      console.log(`item: ${kitties[i].id}, ${kitties[i].dna}, ${kitties[i].owner}`);\n    }\n    console.log(`kitties Array: ${kitties}`);\n    setKitties(kitties);\n  };\n\n  useEffect(fetchKitties, [api, keyring]);\n  useEffect(populateKitties, [keyring, kittyOwners]);\n\n  return (\n    <Grid.Column width={16}>\n      <h1>小毛孩</h1>\n      <KittyCards\n        kitties={kitties}\n        accountPair={accountPair}\n        setStatus={setStatus}\n      />\n      <Form style={{ margin: \"1em 0\" }}>\n        <Form.Field style={{ textAlign: \"center\" }}>\n          <TxButton\n            accountPair={accountPair}\n            label=\"创建小毛孩\"\n            type=\"SIGNED-TX\"\n            setStatus={setStatus}\n            attrs={{\n              palletRpc: \"kittiesModule\",\n              callable: \"create\",\n              inputParams: [],\n              paramFields: [],\n            }}\n          />\n        </Form.Field>\n      </Form>\n      <div style={{ overflowWrap: \"break-word\" }}>{status}</div>\n    </Grid.Column>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}