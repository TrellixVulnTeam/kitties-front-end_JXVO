{"ast":null,"code":"import _defineProperty from\"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{Table,Grid,Button}from'semantic-ui-react';import{CopyToClipboard}from'react-copy-to-clipboard';import{useSubstrate}from'./substrate-lib';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Main(props){var _useSubstrate=useSubstrate(),api=_useSubstrate.api,keyring=_useSubstrate.keyring;var accounts=keyring.getPairs();var _useState=useState({}),_useState2=_slicedToArray(_useState,2),balances=_useState2[0],setBalances=_useState2[1];useEffect(function(){var addresses=keyring.getPairs().map(function(account){return account.address;});var unsubscribeAll=null;api.query.system.account.multi(addresses,function(balances){var balancesMap=addresses.reduce(function(acc,address,index){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},address,balances[index].data.free.toHuman()));},{});setBalances(balancesMap);}).then(function(unsub){unsubscribeAll=unsub;}).catch(console.error);return function(){return unsubscribeAll&&unsubscribeAll();};},[api,keyring,setBalances]);return/*#__PURE__*/_jsxs(Grid.Column,{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Balances\"}),/*#__PURE__*/_jsx(Table,{celled:true,striped:true,size:\"small\",children:/*#__PURE__*/_jsx(Table.Body,{children:accounts.map(function(account){return/*#__PURE__*/_jsxs(Table.Row,{children:[/*#__PURE__*/_jsx(Table.Cell,{width:3,textAlign:\"right\",children:account.meta.name}),/*#__PURE__*/_jsxs(Table.Cell,{width:10,children:[/*#__PURE__*/_jsx(\"span\",{style:{display:'inline-block',minWidth:'31em'},children:account.address}),/*#__PURE__*/_jsx(CopyToClipboard,{text:account.address,children:/*#__PURE__*/_jsx(Button,{basic:true,circular:true,compact:true,size:\"mini\",color:\"blue\",icon:\"copy outline\"})})]}),/*#__PURE__*/_jsx(Table.Cell,{width:3,children:balances&&balances[account.address]&&balances[account.address]})]},account.address);})})})]});}","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/src/Balances.js"],"names":["React","useEffect","useState","Table","Grid","Button","CopyToClipboard","useSubstrate","Main","props","api","keyring","accounts","getPairs","balances","setBalances","addresses","map","account","address","unsubscribeAll","query","system","multi","balancesMap","reduce","acc","index","data","free","toHuman","then","unsub","catch","console","error","meta","name","display","minWidth"],"mappings":"ylBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,KAAT,CAAgBC,IAAhB,CAAsBC,MAAtB,KAAoC,mBAApC,CACA,OAASC,eAAT,KAAgC,yBAAhC,CACA,OAASC,YAAT,KAA6B,iBAA7B,C,wFAEA,cAAe,SAASC,CAAAA,IAAT,CAAeC,KAAf,CAAsB,CACnC,kBAAyBF,YAAY,EAArC,CAAQG,GAAR,eAAQA,GAAR,CAAaC,OAAb,eAAaA,OAAb,CACA,GAAMC,CAAAA,QAAQ,CAAGD,OAAO,CAACE,QAAR,EAAjB,CACA,cAAgCX,QAAQ,CAAC,EAAD,CAAxC,wCAAOY,QAAP,eAAiBC,WAAjB,eAEAd,SAAS,CAAC,UAAM,CACd,GAAMe,CAAAA,SAAS,CAAGL,OAAO,CAACE,QAAR,GAAmBI,GAAnB,CAAuB,SAAAC,OAAO,QAAIA,CAAAA,OAAO,CAACC,OAAZ,EAA9B,CAAlB,CACA,GAAIC,CAAAA,cAAc,CAAG,IAArB,CAEAV,GAAG,CAACW,KAAJ,CAAUC,MAAV,CAAiBJ,OAAjB,CACGK,KADH,CACSP,SADT,CACoB,SAAAF,QAAQ,CAAI,CAC5B,GAAMU,CAAAA,WAAW,CAAGR,SAAS,CAACS,MAAV,CAAiB,SAACC,GAAD,CAAMP,OAAN,CAAeQ,KAAf,wCAChCD,GADgC,wBAC1BP,OAD0B,CAChBL,QAAQ,CAACa,KAAD,CAAR,CAAgBC,IAAhB,CAAqBC,IAArB,CAA0BC,OAA1B,EADgB,IAAjB,CAEhB,EAFgB,CAApB,CAGAf,WAAW,CAACS,WAAD,CAAX,CACD,CANH,EAMKO,IANL,CAMU,SAAAC,KAAK,CAAI,CACfZ,cAAc,CAAGY,KAAjB,CACD,CARH,EAQKC,KARL,CAQWC,OAAO,CAACC,KARnB,EAUA,MAAO,kBAAMf,CAAAA,cAAc,EAAIA,cAAc,EAAtC,EAAP,CACD,CAfQ,CAeN,CAACV,GAAD,CAAMC,OAAN,CAAeI,WAAf,CAfM,CAAT,CAiBA,mBACE,MAAC,IAAD,CAAM,MAAN,yBACE,gCADF,cAEE,KAAC,KAAD,EAAO,MAAM,KAAb,CAAc,OAAO,KAArB,CAAsB,IAAI,CAAC,OAA3B,uBACE,KAAC,KAAD,CAAO,IAAP,WAAaH,QAAQ,CAACK,GAAT,CAAa,SAAAC,OAAO,qBAC/B,MAAC,KAAD,CAAO,GAAP,yBACE,KAAC,KAAD,CAAO,IAAP,EAAY,KAAK,CAAE,CAAnB,CAAsB,SAAS,CAAC,OAAhC,UAAyCA,OAAO,CAACkB,IAAR,CAAaC,IAAtD,EADF,cAEE,MAAC,KAAD,CAAO,IAAP,EAAY,KAAK,CAAE,EAAnB,wBACE,aAAM,KAAK,CAAE,CAAEC,OAAO,CAAE,cAAX,CAA2BC,QAAQ,CAAE,MAArC,CAAb,UACGrB,OAAO,CAACC,OADX,EADF,cAIE,KAAC,eAAD,EAAiB,IAAI,CAAED,OAAO,CAACC,OAA/B,uBACE,KAAC,MAAD,EACE,KAAK,KADP,CAEE,QAAQ,KAFV,CAGE,OAAO,KAHT,CAIE,IAAI,CAAC,MAJP,CAKE,KAAK,CAAC,MALR,CAME,IAAI,CAAC,cANP,EADF,EAJF,GAFF,cAiBE,KAAC,KAAD,CAAO,IAAP,EAAY,KAAK,CAAE,CAAnB,UACEL,QAAQ,EAAIA,QAAQ,CAACI,OAAO,CAACC,OAAT,CAApB,EACAL,QAAQ,CAACI,OAAO,CAACC,OAAT,CAFV,EAjBF,GAAgBD,OAAO,CAACC,OAAxB,CAD+B,EAApB,CAAb,EADF,EAFF,GADF,CAgCD","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Table, Grid, Button } from 'semantic-ui-react'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport { useSubstrate } from './substrate-lib'\n\nexport default function Main (props) {\n  const { api, keyring } = useSubstrate()\n  const accounts = keyring.getPairs()\n  const [balances, setBalances] = useState({})\n\n  useEffect(() => {\n    const addresses = keyring.getPairs().map(account => account.address)\n    let unsubscribeAll = null\n\n    api.query.system.account\n      .multi(addresses, balances => {\n        const balancesMap = addresses.reduce((acc, address, index) => ({\n          ...acc, [address]: balances[index].data.free.toHuman()\n        }), {})\n        setBalances(balancesMap)\n      }).then(unsub => {\n        unsubscribeAll = unsub\n      }).catch(console.error)\n\n    return () => unsubscribeAll && unsubscribeAll()\n  }, [api, keyring, setBalances])\n\n  return (\n    <Grid.Column>\n      <h1>Balances</h1>\n      <Table celled striped size='small'>\n        <Table.Body>{accounts.map(account =>\n          <Table.Row key={account.address}>\n            <Table.Cell width={3} textAlign='right'>{account.meta.name}</Table.Cell>\n            <Table.Cell width={10}>\n              <span style={{ display: 'inline-block', minWidth: '31em' }}>\n                {account.address}\n              </span>\n              <CopyToClipboard text={account.address}>\n                <Button\n                  basic\n                  circular\n                  compact\n                  size='mini'\n                  color='blue'\n                  icon='copy outline'\n                />\n              </CopyToClipboard>\n            </Table.Cell>\n            <Table.Cell width={3}>{\n              balances && balances[account.address] &&\n              balances[account.address]\n            }</Table.Cell>\n          </Table.Row>\n        )}\n        </Table.Body>\n      </Table>\n    </Grid.Column>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}