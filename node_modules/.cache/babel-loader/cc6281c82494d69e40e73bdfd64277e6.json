{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// order important in structs... :)\n\n/* eslint-disable sort-keys */\n\n\nimport hrmpTypes from \"./hrmp.js\";\nimport slotTypes from \"./slots.js\"; // proposeParachain\n\nvar proposeTypes = {\n  ParachainProposal: {\n    proposer: 'AccountId',\n    genesisHead: 'HeadData',\n    validators: 'Vec<ValidatorId>',\n    name: 'Bytes',\n    balance: 'Balance'\n  },\n  RegisteredParachainInfo: {\n    validators: 'Vec<ValidatorId>',\n    proposer: 'AccountId'\n  }\n};\nvar cumulusTypes = {\n  ServiceQuality: {\n    _enum: ['Ordered', 'Fast']\n  }\n};\nexport default {\n  rpc: {},\n  types: _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, cumulusTypes), hrmpTypes), proposeTypes), slotTypes), {}, {\n    AbridgedCandidateReceipt: {\n      parachainIndex: 'ParaId',\n      relayParent: 'Hash',\n      headData: 'HeadData',\n      collator: 'CollatorId',\n      signature: 'CollatorSignature',\n      povBlockHash: 'Hash',\n      commitments: 'CandidateCommitments'\n    },\n    AbridgedHostConfiguration: {\n      maxCodeSize: 'u32',\n      maxHeadDataSize: 'u32',\n      maxUpwardQueueCount: 'u32',\n      maxUpwardQueueSize: 'u32',\n      maxUpwardMessageSize: 'u32',\n      maxUpwardMessageNumPerCandidate: 'u32',\n      hrmpMaxMessageNumPerCandidate: 'u32',\n      validationUpgradeFrequency: 'BlockNumber',\n      validationUpgradeDelay: 'BlockNumber'\n    },\n    AbridgedHrmpChannel: {\n      maxCapacity: 'u32',\n      maxTotalSize: 'u32',\n      maxMessageSize: 'u32',\n      msgCount: 'u32',\n      totalSize: 'u32',\n      mqcHead: 'Option<Hash>'\n    },\n    AssignmentId: 'AccountId',\n    AssignmentKind: {\n      _enum: {\n        Parachain: 'Null',\n        Parathread: '(CollatorId, u32)'\n      }\n    },\n    AttestedCandidate: {\n      candidate: 'AbridgedCandidateReceipt',\n      validityVotes: 'Vec<ValidityAttestation>',\n      validatorIndices: 'BitVec'\n    },\n    AuthorityDiscoveryId: 'AccountId',\n    AvailabilityBitfield: 'BitVec',\n    AvailabilityBitfieldRecord: {\n      bitfield: 'AvailabilityBitfield',\n      submittedTt: 'BlockNumber'\n    },\n    BackedCandidate: {\n      candidate: 'CommittedCandidateReceipt',\n      validityVotes: 'Vec<ValidityAttestation>',\n      validatorIndices: 'BitVec'\n    },\n    BufferedSessionChange: {\n      applyAt: 'BlockNumber',\n      validators: 'Vec<ValidatorId>',\n      queued: 'Vec<ValidatorId>',\n      sessionIndex: 'SessionIndex'\n    },\n    CandidateCommitments: {\n      upwardMessages: 'Vec<UpwardMessage>',\n      horizontalMessages: 'Vec<OutboundHrmpMessage>',\n      newValidationCode: 'Option<ValidationCode>',\n      headData: 'HeadData',\n      processedDownwardMessages: 'u32',\n      hrmpWatermark: 'BlockNumber'\n    },\n    CandidateDescriptor: {\n      paraId: 'ParaId',\n      relayParent: 'RelayChainHash',\n      collatorId: 'CollatorId',\n      persistedValidationDataHash: 'Hash',\n      povHash: 'Hash',\n      erasureRoot: 'Hash',\n      signature: 'CollatorSignature',\n      paraHead: 'Hash',\n      validationCodeHash: 'ValidationCodeHash'\n    },\n    CandidateHash: 'Hash',\n    CandidateInfo: {\n      who: 'AccountId',\n      deposit: 'Balance'\n    },\n    CandidatePendingAvailability: {\n      core: 'CoreIndex',\n      hash: 'CandidateHash',\n      descriptor: 'CandidateDescriptor',\n      availabilityVotes: 'BitVec',\n      backers: 'BitVec',\n      relayParentNumber: 'BlockNumber',\n      backedInNumber: 'BlockNumber',\n      backingGroup: 'GroupIndex'\n    },\n    CandidateReceipt: {\n      descriptor: 'CandidateDescriptor',\n      commitmentsHash: 'Hash'\n    },\n    GlobalValidationData: {\n      maxCodeSize: 'u32',\n      maxHeadDataSize: 'u32',\n      blockNumber: 'BlockNumber'\n    },\n    CollatorId: 'H256',\n    CollatorSignature: 'Signature',\n    CommittedCandidateReceipt: {\n      descriptor: 'CandidateDescriptor',\n      commitments: 'CandidateCommitments'\n    },\n    CoreAssignment: {\n      core: 'CoreIndex',\n      paraId: 'ParaId',\n      kind: 'AssignmentKind',\n      groupIdx: 'GroupIndex'\n    },\n    CoreIndex: 'u32',\n    CoreOccupied: {\n      _enum: {\n        Parathread: 'ParathreadEntry',\n        Parachain: 'Null'\n      }\n    },\n    DisputeStatementSet: {\n      candidateHash: 'CandidateHash',\n      session: 'SessionIndex',\n      statements: 'Vec<(DisputeStatement, ParaValidatorIndex, ValidatorSignature)>'\n    },\n    MultiDisputeStatementSet: 'Vec<DisputeStatementSet>',\n    DisputeStatement: {\n      _enum: {\n        Valid: 'ValidDisputeStatementKind',\n        Invalid: 'InvalidDisputeStatementKind'\n      }\n    },\n    ValidDisputeStatementKind: {\n      _enum: {\n        Explicit: 'Null',\n        BackingSeconded: 'Hash',\n        BackingValid: 'Hash',\n        ApprovalChecking: 'Null'\n      }\n    },\n    InvalidDisputeStatementKind: {\n      _enum: ['Explicit']\n    },\n    ExplicitDisputeStatement: {\n      valid: 'bool',\n      candidateHash: 'CandidateHash',\n      session: 'SessionIndex'\n    },\n    DoubleVoteReport: {\n      identity: 'ValidatorId',\n      first: '(Statement, ValidatorSignature)',\n      second: '(Statement, ValidatorSignature)',\n      proof: 'MembershipProof',\n      signingContext: 'SigningContext'\n    },\n    DownwardMessage: 'Bytes',\n    GroupIndex: 'u32',\n    GlobalValidationSchedule: {\n      maxCodeSize: 'u32',\n      maxHeadDataSize: 'u32',\n      blockNumber: 'BlockNumber'\n    },\n    HeadData: 'Bytes',\n    HostConfiguration: {\n      maxCodeSize: 'u32',\n      maxHeadDataSize: 'u32',\n      maxUpwardQueueCount: 'u32',\n      maxUpwardQueueSize: 'u32',\n      maxUpwardMessageSize: 'u32',\n      maxUpwardMessageNumPerCandidate: 'u32',\n      hrmpMaxMessageNumPerCandidate: 'u32',\n      validationUpgradeFrequency: 'BlockNumber',\n      validationUpgradeDelay: 'BlockNumber',\n      maxPovSize: 'u32',\n      maxDownwardMessageSize: 'u32',\n      preferredDispatchableUpwardMessagesStepWeight: 'Weight',\n      hrmpMaxParachainOutboundChannels: 'u32',\n      hrmpMaxParathreadOutboundChannels: 'u32',\n      hrmpOpenRequestTtl: 'u32',\n      hrmpSenderDeposit: 'Balance',\n      hrmpRecipientDeposit: 'Balance',\n      hrmpChannelMaxCapacity: 'u32',\n      hrmpChannelMaxTotalSize: 'u32',\n      hrmpMaxParachainInboundChannels: 'u32',\n      hrmpMaxParathreadInboundChannels: 'u32',\n      hrmpChannelMaxMessageSize: 'u32',\n      codeRetentionPeriod: 'BlockNumber',\n      parathreadCores: 'u32',\n      parathreadRetries: 'u32',\n      groupRotationFrequency: 'BlockNumber',\n      chainAvailabilityPeriod: 'BlockNumber',\n      threadAvailabilityPeriod: 'BlockNumber',\n      schedulingLookahead: 'u32',\n      maxValidatorsPerCore: 'Option<u32>',\n      maxValidators: 'Option<u32>',\n      disputePeriod: 'SessionIndex',\n      disputePostConclusionAcceptancePeriod: 'BlockNumber',\n      disputeMaxSpamSlots: 'u32',\n      disputeConclusionByTimeOutPeriod: 'BlockNumber',\n      noShowSlots: 'u32',\n      nDelayTranches: 'u32',\n      zerothDelayTrancheWidth: 'u32',\n      neededApprovals: 'u32',\n      relayVrfModuloSamples: 'u32'\n    },\n    InboundDownwardMessage: {\n      pubSentAt: 'BlockNumber',\n      pubMsg: 'DownwardMessage'\n    },\n    InboundHrmpMessage: {\n      sentAt: 'BlockNumber',\n      data: 'Bytes'\n    },\n    InboundHrmpMessages: 'Vec<InboundHrmpMessage>',\n    LocalValidationData: {\n      parentHead: 'HeadData',\n      balance: 'Balance',\n      codeUpgradeAllowed: 'Option<BlockNumber>'\n    },\n    MessageIngestionType: {\n      downwardMessages: 'Vec<InboundDownwardMessage>',\n      horizontalMessages: 'BTreeMap<ParaId, InboundHrmpMessages>'\n    },\n    MessageQueueChain: 'RelayChainHash',\n    OutboundHrmpMessage: {\n      recipient: 'u32',\n      data: 'Bytes'\n    },\n    ParachainDispatchOrigin: {\n      _enum: ['Signed', 'Parachain', 'Root']\n    },\n    ParachainInherentData: {\n      validationData: 'PersistedValidationData',\n      relayChainState: 'StorageProof',\n      downwardMessages: 'Vec<InboundDownwardMessage>',\n      horizontalMessages: 'BTreeMap<ParaId, VecInboundHrmpMessage>'\n    },\n    ParachainsInherentData: {\n      bitfields: 'SignedAvailabilityBitfields',\n      backedCandidates: 'Vec<BackedCandidate>',\n      disputes: 'MultiDisputeStatementSet',\n      parentHeader: 'Header'\n    },\n    ParaGenesisArgs: {\n      genesisHead: 'Bytes',\n      validationCode: 'Bytes',\n      parachain: 'bool'\n    },\n    ParaId: 'u32',\n    ParaInfo: {\n      manager: 'AccountId',\n      deposit: 'Balance',\n      locked: 'bool'\n    },\n    ParaLifecycle: {\n      _enum: ['Onboarding', 'Parathread', 'Parachain', 'UpgradingToParachain', 'DowngradingToParathread', 'OutgoingParathread', 'OutgoingParachain']\n    },\n    ParaPastCodeMeta: {\n      upgradeTimes: 'Vec<ReplacementTimes>',\n      lastPruned: 'Option<BlockNumber>'\n    },\n    ParaScheduling: {\n      _enum: ['Always', 'Dynamic']\n    },\n    ParathreadClaim: '(ParaId, CollatorId)',\n    ParathreadClaimQueue: {\n      queue: 'Vec<QueuedParathread>',\n      nextCoreOffset: 'u32'\n    },\n    ParathreadEntry: {\n      claim: 'ParathreadClaim',\n      retries: 'u32'\n    },\n    ParaValidatorIndex: 'u32',\n    PersistedValidationData: {\n      parentHead: 'HeadData',\n      relayParentNumber: 'RelayChainBlockNumber',\n      relayParentStorageRoot: 'Hash',\n      maxPovSize: 'u32'\n    },\n    QueuedParathread: {\n      claim: 'ParathreadEntry',\n      coreOffset: 'u32'\n    },\n    RelayBlockNumber: 'u32',\n    RelayChainBlockNumber: 'RelayBlockNumber',\n    RelayHash: 'Hash',\n    RelayChainHash: 'RelayHash',\n    Remark: '[u8; 32]',\n    ReplacementTimes: {\n      expectedAt: 'BlockNumber',\n      activatedAt: 'BlockNumber'\n    },\n    Retriable: {\n      _enum: {\n        Never: 'Null',\n        WithRetries: 'u32'\n      }\n    },\n    Scheduling: {\n      _enum: ['Always', 'Dynamic']\n    },\n    SessionInfo: {\n      validators: 'Vec<ValidatorId>',\n      discoveryKeys: 'Vec<AuthorityDiscoveryId>',\n      assignmentKeys: 'Vec<AssignmentId>',\n      validatorGroups: 'Vec<SessionInfoValidatorGroup>',\n      nCores: 'u32',\n      zerothDelayTrancheWidth: 'u32',\n      relayVrfModuloSamples: 'u32',\n      nDelayTranches: 'u32',\n      noShowSlots: 'u32',\n      neededApprovals: 'u32'\n    },\n    SessionInfoValidatorGroup: 'Vec<ParaValidatorIndex>',\n    SignedAvailabilityBitfield: {\n      payload: 'BitVec',\n      validatorIndex: 'ParaValidatorIndex',\n      signature: 'ValidatorSignature'\n    },\n    SignedAvailabilityBitfields: 'Vec<SignedAvailabilityBitfield>',\n    SigningContext: {\n      sessionIndex: 'SessionIndex',\n      parentHash: 'Hash'\n    },\n    Statement: {\n      _enum: {\n        Never: 'Null',\n        // starts at 1\n        Candidate: 'Hash',\n        Valid: 'Hash',\n        Invalid: 'Hash'\n      }\n    },\n    TransientValidationData: {\n      maxCodeSize: 'u32',\n      maxHeadDataSize: 'u32',\n      balance: 'Balance',\n      codeUpgradeAllowed: 'Option<BlockNumber>',\n      dmqLength: 'u32'\n    },\n    UpgradeGoAhead: {\n      _enum: ['Abort', 'GoAhead']\n    },\n    UpgradeRestriction: {\n      _enum: ['Present']\n    },\n    UpwardMessage: 'Bytes',\n    ValidationFunctionParams: {\n      maxCodeSize: 'u32',\n      relayChainHeight: 'RelayChainBlockNumber',\n      codeUpgradeAllowed: 'Option<RelayChainBlockNumber>'\n    },\n    ValidationCode: 'Bytes',\n    ValidationCodeHash: 'Hash',\n    ValidationData: {\n      persisted: 'PersistedValidationData',\n      transient: 'TransientValidationData'\n    },\n    ValidationDataType: {\n      validationData: 'ValidationData',\n      relayChainState: 'Vec<Bytes>'\n    },\n    ValidatorSignature: 'Signature',\n    ValidityAttestation: {\n      _enum: {\n        Never: 'Null',\n        // starts at 1\n        Implicit: 'ValidatorSignature',\n        Explicit: 'ValidatorSignature'\n      }\n    },\n    MessagingStateSnapshot: {\n      relayDispatchQueueSize: '(u32, u32)',\n      egressChannels: 'Vec<MessagingStateSnapshotEgressEntry>'\n    },\n    MessagingStateSnapshotEgressEntry: '(ParaId, AbridgedHrmpChannel)',\n    SystemInherentData: 'ParachainInherentData',\n    VecInboundHrmpMessage: 'Vec<InboundHrmpMessage>'\n  })\n};","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types/interfaces/parachains/definitions.js"],"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","hrmpTypes","slotTypes","proposeTypes","ParachainProposal","proposer","genesisHead","validators","name","balance","RegisteredParachainInfo","cumulusTypes","ServiceQuality","_enum","rpc","types","AbridgedCandidateReceipt","parachainIndex","relayParent","headData","collator","signature","povBlockHash","commitments","AbridgedHostConfiguration","maxCodeSize","maxHeadDataSize","maxUpwardQueueCount","maxUpwardQueueSize","maxUpwardMessageSize","maxUpwardMessageNumPerCandidate","hrmpMaxMessageNumPerCandidate","validationUpgradeFrequency","validationUpgradeDelay","AbridgedHrmpChannel","maxCapacity","maxTotalSize","maxMessageSize","msgCount","totalSize","mqcHead","AssignmentId","AssignmentKind","Parachain","Parathread","AttestedCandidate","candidate","validityVotes","validatorIndices","AuthorityDiscoveryId","AvailabilityBitfield","AvailabilityBitfieldRecord","bitfield","submittedTt","BackedCandidate","BufferedSessionChange","applyAt","queued","sessionIndex","CandidateCommitments","upwardMessages","horizontalMessages","newValidationCode","processedDownwardMessages","hrmpWatermark","CandidateDescriptor","paraId","collatorId","persistedValidationDataHash","povHash","erasureRoot","paraHead","validationCodeHash","CandidateHash","CandidateInfo","who","deposit","CandidatePendingAvailability","core","hash","descriptor","availabilityVotes","backers","relayParentNumber","backedInNumber","backingGroup","CandidateReceipt","commitmentsHash","GlobalValidationData","blockNumber","CollatorId","CollatorSignature","CommittedCandidateReceipt","CoreAssignment","kind","groupIdx","CoreIndex","CoreOccupied","DisputeStatementSet","candidateHash","session","statements","MultiDisputeStatementSet","DisputeStatement","Valid","Invalid","ValidDisputeStatementKind","Explicit","BackingSeconded","BackingValid","ApprovalChecking","InvalidDisputeStatementKind","ExplicitDisputeStatement","valid","DoubleVoteReport","identity","first","second","proof","signingContext","DownwardMessage","GroupIndex","GlobalValidationSchedule","HeadData","HostConfiguration","maxPovSize","maxDownwardMessageSize","preferredDispatchableUpwardMessagesStepWeight","hrmpMaxParachainOutboundChannels","hrmpMaxParathreadOutboundChannels","hrmpOpenRequestTtl","hrmpSenderDeposit","hrmpRecipientDeposit","hrmpChannelMaxCapacity","hrmpChannelMaxTotalSize","hrmpMaxParachainInboundChannels","hrmpMaxParathreadInboundChannels","hrmpChannelMaxMessageSize","codeRetentionPeriod","parathreadCores","parathreadRetries","groupRotationFrequency","chainAvailabilityPeriod","threadAvailabilityPeriod","schedulingLookahead","maxValidatorsPerCore","maxValidators","disputePeriod","disputePostConclusionAcceptancePeriod","disputeMaxSpamSlots","disputeConclusionByTimeOutPeriod","noShowSlots","nDelayTranches","zerothDelayTrancheWidth","neededApprovals","relayVrfModuloSamples","InboundDownwardMessage","pubSentAt","pubMsg","InboundHrmpMessage","sentAt","data","InboundHrmpMessages","LocalValidationData","parentHead","codeUpgradeAllowed","MessageIngestionType","downwardMessages","MessageQueueChain","OutboundHrmpMessage","recipient","ParachainDispatchOrigin","ParachainInherentData","validationData","relayChainState","ParachainsInherentData","bitfields","backedCandidates","disputes","parentHeader","ParaGenesisArgs","validationCode","parachain","ParaId","ParaInfo","manager","locked","ParaLifecycle","ParaPastCodeMeta","upgradeTimes","lastPruned","ParaScheduling","ParathreadClaim","ParathreadClaimQueue","queue","nextCoreOffset","ParathreadEntry","claim","retries","ParaValidatorIndex","PersistedValidationData","relayParentStorageRoot","QueuedParathread","coreOffset","RelayBlockNumber","RelayChainBlockNumber","RelayHash","RelayChainHash","Remark","ReplacementTimes","expectedAt","activatedAt","Retriable","Never","WithRetries","Scheduling","SessionInfo","discoveryKeys","assignmentKeys","validatorGroups","nCores","SessionInfoValidatorGroup","SignedAvailabilityBitfield","payload","validatorIndex","SignedAvailabilityBitfields","SigningContext","parentHash","Statement","Candidate","TransientValidationData","dmqLength","UpgradeGoAhead","UpgradeRestriction","UpwardMessage","ValidationFunctionParams","relayChainHeight","ValidationCode","ValidationCodeHash","ValidationData","persisted","transient","ValidationDataType","ValidatorSignature","ValidityAttestation","Implicit","MessagingStateSnapshot","relayDispatchQueueSize","egressChannels","MessagingStateSnapshotEgressEntry","SystemInherentData","VecInboundHrmpMessage"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,2CAA5B;;AAEA,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,cAAzB,EAAyC;AAAE,MAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYF,MAAZ,CAAX;;AAAgC,MAAIG,MAAM,CAACC,qBAAX,EAAkC;AAAE,QAAIC,OAAO,GAAGF,MAAM,CAACC,qBAAP,CAA6BJ,MAA7B,CAAd;;AAAoD,QAAIC,cAAJ,EAAoB;AAAEI,MAAAA,OAAO,GAAGA,OAAO,CAACC,MAAR,CAAe,UAAUC,GAAV,EAAe;AAAE,eAAOJ,MAAM,CAACK,wBAAP,CAAgCR,MAAhC,EAAwCO,GAAxC,EAA6CE,UAApD;AAAiE,OAAjG,CAAV;AAA+G;;AAACP,IAAAA,IAAI,CAACQ,IAAL,CAAUC,KAAV,CAAgBT,IAAhB,EAAsBG,OAAtB;AAAiC;;AAAC,SAAOH,IAAP;AAAc;;AAEzV,SAASU,aAAT,CAAuBC,MAAvB,EAA+B;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAT,IAAgB,IAAhB,GAAuBC,SAAS,CAACD,CAAD,CAAhC,GAAsC,EAAnD;;AAAuD,QAAIA,CAAC,GAAG,CAAR,EAAW;AAAEf,MAAAA,OAAO,CAACI,MAAM,CAACc,MAAD,CAAP,EAAiB,IAAjB,CAAP,CAA8BC,OAA9B,CAAsC,UAAUC,GAAV,EAAe;AAAErB,QAAAA,eAAe,CAACe,MAAD,EAASM,GAAT,EAAcF,MAAM,CAACE,GAAD,CAApB,CAAf;AAA4C,OAAnG;AAAuG,KAApH,MAA0H,IAAIhB,MAAM,CAACiB,yBAAX,EAAsC;AAAEjB,MAAAA,MAAM,CAACkB,gBAAP,CAAwBR,MAAxB,EAAgCV,MAAM,CAACiB,yBAAP,CAAiCH,MAAjC,CAAhC;AAA4E,KAApH,MAA0H;AAAElB,MAAAA,OAAO,CAACI,MAAM,CAACc,MAAD,CAAP,CAAP,CAAwBC,OAAxB,CAAgC,UAAUC,GAAV,EAAe;AAAEhB,QAAAA,MAAM,CAACmB,cAAP,CAAsBT,MAAtB,EAA8BM,GAA9B,EAAmChB,MAAM,CAACK,wBAAP,CAAgCS,MAAhC,EAAwCE,GAAxC,CAAnC;AAAmF,OAApI;AAAwI;AAAE;;AAAC,SAAON,MAAP;AAAgB,C,CAEthB;AACA;AACA;;AAEA;;;AACA,OAAOU,SAAP,MAAsB,WAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAAoC;;AAEpC,IAAMC,YAAY,GAAG;AACnBC,EAAAA,iBAAiB,EAAE;AACjBC,IAAAA,QAAQ,EAAE,WADO;AAEjBC,IAAAA,WAAW,EAAE,UAFI;AAGjBC,IAAAA,UAAU,EAAE,kBAHK;AAIjBC,IAAAA,IAAI,EAAE,OAJW;AAKjBC,IAAAA,OAAO,EAAE;AALQ,GADA;AAQnBC,EAAAA,uBAAuB,EAAE;AACvBH,IAAAA,UAAU,EAAE,kBADW;AAEvBF,IAAAA,QAAQ,EAAE;AAFa;AARN,CAArB;AAaA,IAAMM,YAAY,GAAG;AACnBC,EAAAA,cAAc,EAAE;AACdC,IAAAA,KAAK,EAAE,CAAC,SAAD,EAAY,MAAZ;AADO;AADG,CAArB;AAKA,eAAe;AACbC,EAAAA,GAAG,EAAE,EADQ;AAEbC,EAAAA,KAAK,EAAEzB,aAAa,CAACA,aAAa,CAACA,aAAa,CAACA,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKqB,YAAL,CAAd,EAAkCV,SAAlC,CAAd,EAA4DE,YAA5D,CAAd,EAAyFD,SAAzF,CAAd,EAAmH,EAAnH,EAAuH;AACzIc,IAAAA,wBAAwB,EAAE;AACxBC,MAAAA,cAAc,EAAE,QADQ;AAExBC,MAAAA,WAAW,EAAE,MAFW;AAGxBC,MAAAA,QAAQ,EAAE,UAHc;AAIxBC,MAAAA,QAAQ,EAAE,YAJc;AAKxBC,MAAAA,SAAS,EAAE,mBALa;AAMxBC,MAAAA,YAAY,EAAE,MANU;AAOxBC,MAAAA,WAAW,EAAE;AAPW,KAD+G;AAUzIC,IAAAA,yBAAyB,EAAE;AACzBC,MAAAA,WAAW,EAAE,KADY;AAEzBC,MAAAA,eAAe,EAAE,KAFQ;AAGzBC,MAAAA,mBAAmB,EAAE,KAHI;AAIzBC,MAAAA,kBAAkB,EAAE,KAJK;AAKzBC,MAAAA,oBAAoB,EAAE,KALG;AAMzBC,MAAAA,+BAA+B,EAAE,KANR;AAOzBC,MAAAA,6BAA6B,EAAE,KAPN;AAQzBC,MAAAA,0BAA0B,EAAE,aARH;AASzBC,MAAAA,sBAAsB,EAAE;AATC,KAV8G;AAqBzIC,IAAAA,mBAAmB,EAAE;AACnBC,MAAAA,WAAW,EAAE,KADM;AAEnBC,MAAAA,YAAY,EAAE,KAFK;AAGnBC,MAAAA,cAAc,EAAE,KAHG;AAInBC,MAAAA,QAAQ,EAAE,KAJS;AAKnBC,MAAAA,SAAS,EAAE,KALQ;AAMnBC,MAAAA,OAAO,EAAE;AANU,KArBoH;AA6BzIC,IAAAA,YAAY,EAAE,WA7B2H;AA8BzIC,IAAAA,cAAc,EAAE;AACd7B,MAAAA,KAAK,EAAE;AACL8B,QAAAA,SAAS,EAAE,MADN;AAELC,QAAAA,UAAU,EAAE;AAFP;AADO,KA9ByH;AAoCzIC,IAAAA,iBAAiB,EAAE;AACjBC,MAAAA,SAAS,EAAE,0BADM;AAEjBC,MAAAA,aAAa,EAAE,0BAFE;AAGjBC,MAAAA,gBAAgB,EAAE;AAHD,KApCsH;AAyCzIC,IAAAA,oBAAoB,EAAE,WAzCmH;AA0CzIC,IAAAA,oBAAoB,EAAE,QA1CmH;AA2CzIC,IAAAA,0BAA0B,EAAE;AAC1BC,MAAAA,QAAQ,EAAE,sBADgB;AAE1BC,MAAAA,WAAW,EAAE;AAFa,KA3C6G;AA+CzIC,IAAAA,eAAe,EAAE;AACfR,MAAAA,SAAS,EAAE,2BADI;AAEfC,MAAAA,aAAa,EAAE,0BAFA;AAGfC,MAAAA,gBAAgB,EAAE;AAHH,KA/CwH;AAoDzIO,IAAAA,qBAAqB,EAAE;AACrBC,MAAAA,OAAO,EAAE,aADY;AAErBjD,MAAAA,UAAU,EAAE,kBAFS;AAGrBkD,MAAAA,MAAM,EAAE,kBAHa;AAIrBC,MAAAA,YAAY,EAAE;AAJO,KApDkH;AA0DzIC,IAAAA,oBAAoB,EAAE;AACpBC,MAAAA,cAAc,EAAE,oBADI;AAEpBC,MAAAA,kBAAkB,EAAE,0BAFA;AAGpBC,MAAAA,iBAAiB,EAAE,wBAHC;AAIpB3C,MAAAA,QAAQ,EAAE,UAJU;AAKpB4C,MAAAA,yBAAyB,EAAE,KALP;AAMpBC,MAAAA,aAAa,EAAE;AANK,KA1DmH;AAkEzIC,IAAAA,mBAAmB,EAAE;AACnBC,MAAAA,MAAM,EAAE,QADW;AAEnBhD,MAAAA,WAAW,EAAE,gBAFM;AAGnBiD,MAAAA,UAAU,EAAE,YAHO;AAInBC,MAAAA,2BAA2B,EAAE,MAJV;AAKnBC,MAAAA,OAAO,EAAE,MALU;AAMnBC,MAAAA,WAAW,EAAE,MANM;AAOnBjD,MAAAA,SAAS,EAAE,mBAPQ;AAQnBkD,MAAAA,QAAQ,EAAE,MARS;AASnBC,MAAAA,kBAAkB,EAAE;AATD,KAlEoH;AA6EzIC,IAAAA,aAAa,EAAE,MA7E0H;AA8EzIC,IAAAA,aAAa,EAAE;AACbC,MAAAA,GAAG,EAAE,WADQ;AAEbC,MAAAA,OAAO,EAAE;AAFI,KA9E0H;AAkFzIC,IAAAA,4BAA4B,EAAE;AAC5BC,MAAAA,IAAI,EAAE,WADsB;AAE5BC,MAAAA,IAAI,EAAE,eAFsB;AAG5BC,MAAAA,UAAU,EAAE,qBAHgB;AAI5BC,MAAAA,iBAAiB,EAAE,QAJS;AAK5BC,MAAAA,OAAO,EAAE,QALmB;AAM5BC,MAAAA,iBAAiB,EAAE,aANS;AAO5BC,MAAAA,cAAc,EAAE,aAPY;AAQ5BC,MAAAA,YAAY,EAAE;AARc,KAlF2G;AA4FzIC,IAAAA,gBAAgB,EAAE;AAChBN,MAAAA,UAAU,EAAE,qBADI;AAEhBO,MAAAA,eAAe,EAAE;AAFD,KA5FuH;AAgGzIC,IAAAA,oBAAoB,EAAE;AACpB/D,MAAAA,WAAW,EAAE,KADO;AAEpBC,MAAAA,eAAe,EAAE,KAFG;AAGpB+D,MAAAA,WAAW,EAAE;AAHO,KAhGmH;AAqGzIC,IAAAA,UAAU,EAAE,MArG6H;AAsGzIC,IAAAA,iBAAiB,EAAE,WAtGsH;AAuGzIC,IAAAA,yBAAyB,EAAE;AACzBZ,MAAAA,UAAU,EAAE,qBADa;AAEzBzD,MAAAA,WAAW,EAAE;AAFY,KAvG8G;AA2GzIsE,IAAAA,cAAc,EAAE;AACdf,MAAAA,IAAI,EAAE,WADQ;AAEdZ,MAAAA,MAAM,EAAE,QAFM;AAGd4B,MAAAA,IAAI,EAAE,gBAHQ;AAIdC,MAAAA,QAAQ,EAAE;AAJI,KA3GyH;AAiHzIC,IAAAA,SAAS,EAAE,KAjH8H;AAkHzIC,IAAAA,YAAY,EAAE;AACZpF,MAAAA,KAAK,EAAE;AACL+B,QAAAA,UAAU,EAAE,iBADP;AAELD,QAAAA,SAAS,EAAE;AAFN;AADK,KAlH2H;AAwHzIuD,IAAAA,mBAAmB,EAAE;AACnBC,MAAAA,aAAa,EAAE,eADI;AAEnBC,MAAAA,OAAO,EAAE,cAFU;AAGnBC,MAAAA,UAAU,EAAE;AAHO,KAxHoH;AA6HzIC,IAAAA,wBAAwB,EAAE,0BA7H+G;AA8HzIC,IAAAA,gBAAgB,EAAE;AAChB1F,MAAAA,KAAK,EAAE;AACL2F,QAAAA,KAAK,EAAE,2BADF;AAELC,QAAAA,OAAO,EAAE;AAFJ;AADS,KA9HuH;AAoIzIC,IAAAA,yBAAyB,EAAE;AACzB7F,MAAAA,KAAK,EAAE;AACL8F,QAAAA,QAAQ,EAAE,MADL;AAELC,QAAAA,eAAe,EAAE,MAFZ;AAGLC,QAAAA,YAAY,EAAE,MAHT;AAILC,QAAAA,gBAAgB,EAAE;AAJb;AADkB,KApI8G;AA4IzIC,IAAAA,2BAA2B,EAAE;AAC3BlG,MAAAA,KAAK,EAAE,CAAC,UAAD;AADoB,KA5I4G;AA+IzImG,IAAAA,wBAAwB,EAAE;AACxBC,MAAAA,KAAK,EAAE,MADiB;AAExBd,MAAAA,aAAa,EAAE,eAFS;AAGxBC,MAAAA,OAAO,EAAE;AAHe,KA/I+G;AAoJzIc,IAAAA,gBAAgB,EAAE;AAChBC,MAAAA,QAAQ,EAAE,aADM;AAEhBC,MAAAA,KAAK,EAAE,iCAFS;AAGhBC,MAAAA,MAAM,EAAE,iCAHQ;AAIhBC,MAAAA,KAAK,EAAE,iBAJS;AAKhBC,MAAAA,cAAc,EAAE;AALA,KApJuH;AA2JzIC,IAAAA,eAAe,EAAE,OA3JwH;AA4JzIC,IAAAA,UAAU,EAAE,KA5J6H;AA6JzIC,IAAAA,wBAAwB,EAAE;AACxBjG,MAAAA,WAAW,EAAE,KADW;AAExBC,MAAAA,eAAe,EAAE,KAFO;AAGxB+D,MAAAA,WAAW,EAAE;AAHW,KA7J+G;AAkKzIkC,IAAAA,QAAQ,EAAE,OAlK+H;AAmKzIC,IAAAA,iBAAiB,EAAE;AACjBnG,MAAAA,WAAW,EAAE,KADI;AAEjBC,MAAAA,eAAe,EAAE,KAFA;AAGjBC,MAAAA,mBAAmB,EAAE,KAHJ;AAIjBC,MAAAA,kBAAkB,EAAE,KAJH;AAKjBC,MAAAA,oBAAoB,EAAE,KALL;AAMjBC,MAAAA,+BAA+B,EAAE,KANhB;AAOjBC,MAAAA,6BAA6B,EAAE,KAPd;AAQjBC,MAAAA,0BAA0B,EAAE,aARX;AASjBC,MAAAA,sBAAsB,EAAE,aATP;AAUjB4F,MAAAA,UAAU,EAAE,KAVK;AAWjBC,MAAAA,sBAAsB,EAAE,KAXP;AAYjBC,MAAAA,6CAA6C,EAAE,QAZ9B;AAajBC,MAAAA,gCAAgC,EAAE,KAbjB;AAcjBC,MAAAA,iCAAiC,EAAE,KAdlB;AAejBC,MAAAA,kBAAkB,EAAE,KAfH;AAgBjBC,MAAAA,iBAAiB,EAAE,SAhBF;AAiBjBC,MAAAA,oBAAoB,EAAE,SAjBL;AAkBjBC,MAAAA,sBAAsB,EAAE,KAlBP;AAmBjBC,MAAAA,uBAAuB,EAAE,KAnBR;AAoBjBC,MAAAA,+BAA+B,EAAE,KApBhB;AAqBjBC,MAAAA,gCAAgC,EAAE,KArBjB;AAsBjBC,MAAAA,yBAAyB,EAAE,KAtBV;AAuBjBC,MAAAA,mBAAmB,EAAE,aAvBJ;AAwBjBC,MAAAA,eAAe,EAAE,KAxBA;AAyBjBC,MAAAA,iBAAiB,EAAE,KAzBF;AA0BjBC,MAAAA,sBAAsB,EAAE,aA1BP;AA2BjBC,MAAAA,uBAAuB,EAAE,aA3BR;AA4BjBC,MAAAA,wBAAwB,EAAE,aA5BT;AA6BjBC,MAAAA,mBAAmB,EAAE,KA7BJ;AA8BjBC,MAAAA,oBAAoB,EAAE,aA9BL;AA+BjBC,MAAAA,aAAa,EAAE,aA/BE;AAgCjBC,MAAAA,aAAa,EAAE,cAhCE;AAiCjBC,MAAAA,qCAAqC,EAAE,aAjCtB;AAkCjBC,MAAAA,mBAAmB,EAAE,KAlCJ;AAmCjBC,MAAAA,gCAAgC,EAAE,aAnCjB;AAoCjBC,MAAAA,WAAW,EAAE,KApCI;AAqCjBC,MAAAA,cAAc,EAAE,KArCC;AAsCjBC,MAAAA,uBAAuB,EAAE,KAtCR;AAuCjBC,MAAAA,eAAe,EAAE,KAvCA;AAwCjBC,MAAAA,qBAAqB,EAAE;AAxCN,KAnKsH;AA6MzIC,IAAAA,sBAAsB,EAAE;AACtBC,MAAAA,SAAS,EAAE,aADW;AAEtBC,MAAAA,MAAM,EAAE;AAFc,KA7MiH;AAiNzIC,IAAAA,kBAAkB,EAAE;AAClBC,MAAAA,MAAM,EAAE,aADU;AAElBC,MAAAA,IAAI,EAAE;AAFY,KAjNqH;AAqNzIC,IAAAA,mBAAmB,EAAE,yBArNoH;AAsNzIC,IAAAA,mBAAmB,EAAE;AACnBC,MAAAA,UAAU,EAAE,UADO;AAEnB3J,MAAAA,OAAO,EAAE,SAFU;AAGnB4J,MAAAA,kBAAkB,EAAE;AAHD,KAtNoH;AA2NzIC,IAAAA,oBAAoB,EAAE;AACpBC,MAAAA,gBAAgB,EAAE,6BADE;AAEpB1G,MAAAA,kBAAkB,EAAE;AAFA,KA3NmH;AA+NzI2G,IAAAA,iBAAiB,EAAE,gBA/NsH;AAgOzIC,IAAAA,mBAAmB,EAAE;AACnBC,MAAAA,SAAS,EAAE,KADQ;AAEnBT,MAAAA,IAAI,EAAE;AAFa,KAhOoH;AAoOzIU,IAAAA,uBAAuB,EAAE;AACvB9J,MAAAA,KAAK,EAAE,CAAC,QAAD,EAAW,WAAX,EAAwB,MAAxB;AADgB,KApOgH;AAuOzI+J,IAAAA,qBAAqB,EAAE;AACrBC,MAAAA,cAAc,EAAE,yBADK;AAErBC,MAAAA,eAAe,EAAE,cAFI;AAGrBP,MAAAA,gBAAgB,EAAE,6BAHG;AAIrB1G,MAAAA,kBAAkB,EAAE;AAJC,KAvOkH;AA6OzIkH,IAAAA,sBAAsB,EAAE;AACtBC,MAAAA,SAAS,EAAE,6BADW;AAEtBC,MAAAA,gBAAgB,EAAE,sBAFI;AAGtBC,MAAAA,QAAQ,EAAE,0BAHY;AAItBC,MAAAA,YAAY,EAAE;AAJQ,KA7OiH;AAmPzIC,IAAAA,eAAe,EAAE;AACf9K,MAAAA,WAAW,EAAE,OADE;AAEf+K,MAAAA,cAAc,EAAE,OAFD;AAGfC,MAAAA,SAAS,EAAE;AAHI,KAnPwH;AAwPzIC,IAAAA,MAAM,EAAE,KAxPiI;AAyPzIC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,OAAO,EAAE,WADD;AAER7G,MAAAA,OAAO,EAAE,SAFD;AAGR8G,MAAAA,MAAM,EAAE;AAHA,KAzP+H;AA8PzIC,IAAAA,aAAa,EAAE;AACb9K,MAAAA,KAAK,EAAE,CAAC,YAAD,EAAe,YAAf,EAA6B,WAA7B,EAA0C,sBAA1C,EAAkE,yBAAlE,EAA6F,oBAA7F,EAAmH,mBAAnH;AADM,KA9P0H;AAiQzI+K,IAAAA,gBAAgB,EAAE;AAChBC,MAAAA,YAAY,EAAE,uBADE;AAEhBC,MAAAA,UAAU,EAAE;AAFI,KAjQuH;AAqQzIC,IAAAA,cAAc,EAAE;AACdlL,MAAAA,KAAK,EAAE,CAAC,QAAD,EAAW,SAAX;AADO,KArQyH;AAwQzImL,IAAAA,eAAe,EAAE,sBAxQwH;AAyQzIC,IAAAA,oBAAoB,EAAE;AACpBC,MAAAA,KAAK,EAAE,uBADa;AAEpBC,MAAAA,cAAc,EAAE;AAFI,KAzQmH;AA6QzIC,IAAAA,eAAe,EAAE;AACfC,MAAAA,KAAK,EAAE,iBADQ;AAEfC,MAAAA,OAAO,EAAE;AAFM,KA7QwH;AAiRzIC,IAAAA,kBAAkB,EAAE,KAjRqH;AAkRzIC,IAAAA,uBAAuB,EAAE;AACvBpC,MAAAA,UAAU,EAAE,UADW;AAEvBjF,MAAAA,iBAAiB,EAAE,uBAFI;AAGvBsH,MAAAA,sBAAsB,EAAE,MAHD;AAIvB5E,MAAAA,UAAU,EAAE;AAJW,KAlRgH;AAwRzI6E,IAAAA,gBAAgB,EAAE;AAChBL,MAAAA,KAAK,EAAE,iBADS;AAEhBM,MAAAA,UAAU,EAAE;AAFI,KAxRuH;AA4RzIC,IAAAA,gBAAgB,EAAE,KA5RuH;AA6RzIC,IAAAA,qBAAqB,EAAE,kBA7RkH;AA8RzIC,IAAAA,SAAS,EAAE,MA9R8H;AA+RzIC,IAAAA,cAAc,EAAE,WA/RyH;AAgSzIC,IAAAA,MAAM,EAAE,UAhSiI;AAiSzIC,IAAAA,gBAAgB,EAAE;AAChBC,MAAAA,UAAU,EAAE,aADI;AAEhBC,MAAAA,WAAW,EAAE;AAFG,KAjSuH;AAqSzIC,IAAAA,SAAS,EAAE;AACTvM,MAAAA,KAAK,EAAE;AACLwM,QAAAA,KAAK,EAAE,MADF;AAELC,QAAAA,WAAW,EAAE;AAFR;AADE,KArS8H;AA2SzIC,IAAAA,UAAU,EAAE;AACV1M,MAAAA,KAAK,EAAE,CAAC,QAAD,EAAW,SAAX;AADG,KA3S6H;AA8SzI2M,IAAAA,WAAW,EAAE;AACXjN,MAAAA,UAAU,EAAE,kBADD;AAEXkN,MAAAA,aAAa,EAAE,2BAFJ;AAGXC,MAAAA,cAAc,EAAE,mBAHL;AAIXC,MAAAA,eAAe,EAAE,gCAJN;AAKXC,MAAAA,MAAM,EAAE,KALG;AAMXnE,MAAAA,uBAAuB,EAAE,KANd;AAOXE,MAAAA,qBAAqB,EAAE,KAPZ;AAQXH,MAAAA,cAAc,EAAE,KARL;AASXD,MAAAA,WAAW,EAAE,KATF;AAUXG,MAAAA,eAAe,EAAE;AAVN,KA9S4H;AA0TzImE,IAAAA,yBAAyB,EAAE,yBA1T8G;AA2TzIC,IAAAA,0BAA0B,EAAE;AAC1BC,MAAAA,OAAO,EAAE,QADiB;AAE1BC,MAAAA,cAAc,EAAE,oBAFU;AAG1B3M,MAAAA,SAAS,EAAE;AAHe,KA3T6G;AAgUzI4M,IAAAA,2BAA2B,EAAE,iCAhU4G;AAiUzIC,IAAAA,cAAc,EAAE;AACdxK,MAAAA,YAAY,EAAE,cADA;AAEdyK,MAAAA,UAAU,EAAE;AAFE,KAjUyH;AAqUzIC,IAAAA,SAAS,EAAE;AACTvN,MAAAA,KAAK,EAAE;AACLwM,QAAAA,KAAK,EAAE,MADF;AAEL;AACAgB,QAAAA,SAAS,EAAE,MAHN;AAIL7H,QAAAA,KAAK,EAAE,MAJF;AAKLC,QAAAA,OAAO,EAAE;AALJ;AADE,KArU8H;AA8UzI6H,IAAAA,uBAAuB,EAAE;AACvB7M,MAAAA,WAAW,EAAE,KADU;AAEvBC,MAAAA,eAAe,EAAE,KAFM;AAGvBjB,MAAAA,OAAO,EAAE,SAHc;AAIvB4J,MAAAA,kBAAkB,EAAE,qBAJG;AAKvBkE,MAAAA,SAAS,EAAE;AALY,KA9UgH;AAqVzIC,IAAAA,cAAc,EAAE;AACd3N,MAAAA,KAAK,EAAE,CAAC,OAAD,EAAU,SAAV;AADO,KArVyH;AAwVzI4N,IAAAA,kBAAkB,EAAE;AAClB5N,MAAAA,KAAK,EAAE,CAAC,SAAD;AADW,KAxVqH;AA2VzI6N,IAAAA,aAAa,EAAE,OA3V0H;AA4VzIC,IAAAA,wBAAwB,EAAE;AACxBlN,MAAAA,WAAW,EAAE,KADW;AAExBmN,MAAAA,gBAAgB,EAAE,uBAFM;AAGxBvE,MAAAA,kBAAkB,EAAE;AAHI,KA5V+G;AAiWzIwE,IAAAA,cAAc,EAAE,OAjWyH;AAkWzIC,IAAAA,kBAAkB,EAAE,MAlWqH;AAmWzIC,IAAAA,cAAc,EAAE;AACdC,MAAAA,SAAS,EAAE,yBADG;AAEdC,MAAAA,SAAS,EAAE;AAFG,KAnWyH;AAuWzIC,IAAAA,kBAAkB,EAAE;AAClBrE,MAAAA,cAAc,EAAE,gBADE;AAElBC,MAAAA,eAAe,EAAE;AAFC,KAvWqH;AA2WzIqE,IAAAA,kBAAkB,EAAE,WA3WqH;AA4WzIC,IAAAA,mBAAmB,EAAE;AACnBvO,MAAAA,KAAK,EAAE;AACLwM,QAAAA,KAAK,EAAE,MADF;AAEL;AACAgC,QAAAA,QAAQ,EAAE,oBAHL;AAIL1I,QAAAA,QAAQ,EAAE;AAJL;AADY,KA5WoH;AAoXzI2I,IAAAA,sBAAsB,EAAE;AACtBC,MAAAA,sBAAsB,EAAE,YADF;AAEtBC,MAAAA,cAAc,EAAE;AAFM,KApXiH;AAwXzIC,IAAAA,iCAAiC,EAAE,+BAxXsG;AAyXzIC,IAAAA,kBAAkB,EAAE,uBAzXqH;AA0XzIC,IAAAA,qBAAqB,EAAE;AA1XkH,GAAvH;AAFP,CAAf","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// order important in structs... :)\n\n/* eslint-disable sort-keys */\nimport hrmpTypes from \"./hrmp.js\";\nimport slotTypes from \"./slots.js\"; // proposeParachain\n\nconst proposeTypes = {\n  ParachainProposal: {\n    proposer: 'AccountId',\n    genesisHead: 'HeadData',\n    validators: 'Vec<ValidatorId>',\n    name: 'Bytes',\n    balance: 'Balance'\n  },\n  RegisteredParachainInfo: {\n    validators: 'Vec<ValidatorId>',\n    proposer: 'AccountId'\n  }\n};\nconst cumulusTypes = {\n  ServiceQuality: {\n    _enum: ['Ordered', 'Fast']\n  }\n};\nexport default {\n  rpc: {},\n  types: _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, cumulusTypes), hrmpTypes), proposeTypes), slotTypes), {}, {\n    AbridgedCandidateReceipt: {\n      parachainIndex: 'ParaId',\n      relayParent: 'Hash',\n      headData: 'HeadData',\n      collator: 'CollatorId',\n      signature: 'CollatorSignature',\n      povBlockHash: 'Hash',\n      commitments: 'CandidateCommitments'\n    },\n    AbridgedHostConfiguration: {\n      maxCodeSize: 'u32',\n      maxHeadDataSize: 'u32',\n      maxUpwardQueueCount: 'u32',\n      maxUpwardQueueSize: 'u32',\n      maxUpwardMessageSize: 'u32',\n      maxUpwardMessageNumPerCandidate: 'u32',\n      hrmpMaxMessageNumPerCandidate: 'u32',\n      validationUpgradeFrequency: 'BlockNumber',\n      validationUpgradeDelay: 'BlockNumber'\n    },\n    AbridgedHrmpChannel: {\n      maxCapacity: 'u32',\n      maxTotalSize: 'u32',\n      maxMessageSize: 'u32',\n      msgCount: 'u32',\n      totalSize: 'u32',\n      mqcHead: 'Option<Hash>'\n    },\n    AssignmentId: 'AccountId',\n    AssignmentKind: {\n      _enum: {\n        Parachain: 'Null',\n        Parathread: '(CollatorId, u32)'\n      }\n    },\n    AttestedCandidate: {\n      candidate: 'AbridgedCandidateReceipt',\n      validityVotes: 'Vec<ValidityAttestation>',\n      validatorIndices: 'BitVec'\n    },\n    AuthorityDiscoveryId: 'AccountId',\n    AvailabilityBitfield: 'BitVec',\n    AvailabilityBitfieldRecord: {\n      bitfield: 'AvailabilityBitfield',\n      submittedTt: 'BlockNumber'\n    },\n    BackedCandidate: {\n      candidate: 'CommittedCandidateReceipt',\n      validityVotes: 'Vec<ValidityAttestation>',\n      validatorIndices: 'BitVec'\n    },\n    BufferedSessionChange: {\n      applyAt: 'BlockNumber',\n      validators: 'Vec<ValidatorId>',\n      queued: 'Vec<ValidatorId>',\n      sessionIndex: 'SessionIndex'\n    },\n    CandidateCommitments: {\n      upwardMessages: 'Vec<UpwardMessage>',\n      horizontalMessages: 'Vec<OutboundHrmpMessage>',\n      newValidationCode: 'Option<ValidationCode>',\n      headData: 'HeadData',\n      processedDownwardMessages: 'u32',\n      hrmpWatermark: 'BlockNumber'\n    },\n    CandidateDescriptor: {\n      paraId: 'ParaId',\n      relayParent: 'RelayChainHash',\n      collatorId: 'CollatorId',\n      persistedValidationDataHash: 'Hash',\n      povHash: 'Hash',\n      erasureRoot: 'Hash',\n      signature: 'CollatorSignature',\n      paraHead: 'Hash',\n      validationCodeHash: 'ValidationCodeHash'\n    },\n    CandidateHash: 'Hash',\n    CandidateInfo: {\n      who: 'AccountId',\n      deposit: 'Balance'\n    },\n    CandidatePendingAvailability: {\n      core: 'CoreIndex',\n      hash: 'CandidateHash',\n      descriptor: 'CandidateDescriptor',\n      availabilityVotes: 'BitVec',\n      backers: 'BitVec',\n      relayParentNumber: 'BlockNumber',\n      backedInNumber: 'BlockNumber',\n      backingGroup: 'GroupIndex'\n    },\n    CandidateReceipt: {\n      descriptor: 'CandidateDescriptor',\n      commitmentsHash: 'Hash'\n    },\n    GlobalValidationData: {\n      maxCodeSize: 'u32',\n      maxHeadDataSize: 'u32',\n      blockNumber: 'BlockNumber'\n    },\n    CollatorId: 'H256',\n    CollatorSignature: 'Signature',\n    CommittedCandidateReceipt: {\n      descriptor: 'CandidateDescriptor',\n      commitments: 'CandidateCommitments'\n    },\n    CoreAssignment: {\n      core: 'CoreIndex',\n      paraId: 'ParaId',\n      kind: 'AssignmentKind',\n      groupIdx: 'GroupIndex'\n    },\n    CoreIndex: 'u32',\n    CoreOccupied: {\n      _enum: {\n        Parathread: 'ParathreadEntry',\n        Parachain: 'Null'\n      }\n    },\n    DisputeStatementSet: {\n      candidateHash: 'CandidateHash',\n      session: 'SessionIndex',\n      statements: 'Vec<(DisputeStatement, ParaValidatorIndex, ValidatorSignature)>'\n    },\n    MultiDisputeStatementSet: 'Vec<DisputeStatementSet>',\n    DisputeStatement: {\n      _enum: {\n        Valid: 'ValidDisputeStatementKind',\n        Invalid: 'InvalidDisputeStatementKind'\n      }\n    },\n    ValidDisputeStatementKind: {\n      _enum: {\n        Explicit: 'Null',\n        BackingSeconded: 'Hash',\n        BackingValid: 'Hash',\n        ApprovalChecking: 'Null'\n      }\n    },\n    InvalidDisputeStatementKind: {\n      _enum: ['Explicit']\n    },\n    ExplicitDisputeStatement: {\n      valid: 'bool',\n      candidateHash: 'CandidateHash',\n      session: 'SessionIndex'\n    },\n    DoubleVoteReport: {\n      identity: 'ValidatorId',\n      first: '(Statement, ValidatorSignature)',\n      second: '(Statement, ValidatorSignature)',\n      proof: 'MembershipProof',\n      signingContext: 'SigningContext'\n    },\n    DownwardMessage: 'Bytes',\n    GroupIndex: 'u32',\n    GlobalValidationSchedule: {\n      maxCodeSize: 'u32',\n      maxHeadDataSize: 'u32',\n      blockNumber: 'BlockNumber'\n    },\n    HeadData: 'Bytes',\n    HostConfiguration: {\n      maxCodeSize: 'u32',\n      maxHeadDataSize: 'u32',\n      maxUpwardQueueCount: 'u32',\n      maxUpwardQueueSize: 'u32',\n      maxUpwardMessageSize: 'u32',\n      maxUpwardMessageNumPerCandidate: 'u32',\n      hrmpMaxMessageNumPerCandidate: 'u32',\n      validationUpgradeFrequency: 'BlockNumber',\n      validationUpgradeDelay: 'BlockNumber',\n      maxPovSize: 'u32',\n      maxDownwardMessageSize: 'u32',\n      preferredDispatchableUpwardMessagesStepWeight: 'Weight',\n      hrmpMaxParachainOutboundChannels: 'u32',\n      hrmpMaxParathreadOutboundChannels: 'u32',\n      hrmpOpenRequestTtl: 'u32',\n      hrmpSenderDeposit: 'Balance',\n      hrmpRecipientDeposit: 'Balance',\n      hrmpChannelMaxCapacity: 'u32',\n      hrmpChannelMaxTotalSize: 'u32',\n      hrmpMaxParachainInboundChannels: 'u32',\n      hrmpMaxParathreadInboundChannels: 'u32',\n      hrmpChannelMaxMessageSize: 'u32',\n      codeRetentionPeriod: 'BlockNumber',\n      parathreadCores: 'u32',\n      parathreadRetries: 'u32',\n      groupRotationFrequency: 'BlockNumber',\n      chainAvailabilityPeriod: 'BlockNumber',\n      threadAvailabilityPeriod: 'BlockNumber',\n      schedulingLookahead: 'u32',\n      maxValidatorsPerCore: 'Option<u32>',\n      maxValidators: 'Option<u32>',\n      disputePeriod: 'SessionIndex',\n      disputePostConclusionAcceptancePeriod: 'BlockNumber',\n      disputeMaxSpamSlots: 'u32',\n      disputeConclusionByTimeOutPeriod: 'BlockNumber',\n      noShowSlots: 'u32',\n      nDelayTranches: 'u32',\n      zerothDelayTrancheWidth: 'u32',\n      neededApprovals: 'u32',\n      relayVrfModuloSamples: 'u32'\n    },\n    InboundDownwardMessage: {\n      pubSentAt: 'BlockNumber',\n      pubMsg: 'DownwardMessage'\n    },\n    InboundHrmpMessage: {\n      sentAt: 'BlockNumber',\n      data: 'Bytes'\n    },\n    InboundHrmpMessages: 'Vec<InboundHrmpMessage>',\n    LocalValidationData: {\n      parentHead: 'HeadData',\n      balance: 'Balance',\n      codeUpgradeAllowed: 'Option<BlockNumber>'\n    },\n    MessageIngestionType: {\n      downwardMessages: 'Vec<InboundDownwardMessage>',\n      horizontalMessages: 'BTreeMap<ParaId, InboundHrmpMessages>'\n    },\n    MessageQueueChain: 'RelayChainHash',\n    OutboundHrmpMessage: {\n      recipient: 'u32',\n      data: 'Bytes'\n    },\n    ParachainDispatchOrigin: {\n      _enum: ['Signed', 'Parachain', 'Root']\n    },\n    ParachainInherentData: {\n      validationData: 'PersistedValidationData',\n      relayChainState: 'StorageProof',\n      downwardMessages: 'Vec<InboundDownwardMessage>',\n      horizontalMessages: 'BTreeMap<ParaId, VecInboundHrmpMessage>'\n    },\n    ParachainsInherentData: {\n      bitfields: 'SignedAvailabilityBitfields',\n      backedCandidates: 'Vec<BackedCandidate>',\n      disputes: 'MultiDisputeStatementSet',\n      parentHeader: 'Header'\n    },\n    ParaGenesisArgs: {\n      genesisHead: 'Bytes',\n      validationCode: 'Bytes',\n      parachain: 'bool'\n    },\n    ParaId: 'u32',\n    ParaInfo: {\n      manager: 'AccountId',\n      deposit: 'Balance',\n      locked: 'bool'\n    },\n    ParaLifecycle: {\n      _enum: ['Onboarding', 'Parathread', 'Parachain', 'UpgradingToParachain', 'DowngradingToParathread', 'OutgoingParathread', 'OutgoingParachain']\n    },\n    ParaPastCodeMeta: {\n      upgradeTimes: 'Vec<ReplacementTimes>',\n      lastPruned: 'Option<BlockNumber>'\n    },\n    ParaScheduling: {\n      _enum: ['Always', 'Dynamic']\n    },\n    ParathreadClaim: '(ParaId, CollatorId)',\n    ParathreadClaimQueue: {\n      queue: 'Vec<QueuedParathread>',\n      nextCoreOffset: 'u32'\n    },\n    ParathreadEntry: {\n      claim: 'ParathreadClaim',\n      retries: 'u32'\n    },\n    ParaValidatorIndex: 'u32',\n    PersistedValidationData: {\n      parentHead: 'HeadData',\n      relayParentNumber: 'RelayChainBlockNumber',\n      relayParentStorageRoot: 'Hash',\n      maxPovSize: 'u32'\n    },\n    QueuedParathread: {\n      claim: 'ParathreadEntry',\n      coreOffset: 'u32'\n    },\n    RelayBlockNumber: 'u32',\n    RelayChainBlockNumber: 'RelayBlockNumber',\n    RelayHash: 'Hash',\n    RelayChainHash: 'RelayHash',\n    Remark: '[u8; 32]',\n    ReplacementTimes: {\n      expectedAt: 'BlockNumber',\n      activatedAt: 'BlockNumber'\n    },\n    Retriable: {\n      _enum: {\n        Never: 'Null',\n        WithRetries: 'u32'\n      }\n    },\n    Scheduling: {\n      _enum: ['Always', 'Dynamic']\n    },\n    SessionInfo: {\n      validators: 'Vec<ValidatorId>',\n      discoveryKeys: 'Vec<AuthorityDiscoveryId>',\n      assignmentKeys: 'Vec<AssignmentId>',\n      validatorGroups: 'Vec<SessionInfoValidatorGroup>',\n      nCores: 'u32',\n      zerothDelayTrancheWidth: 'u32',\n      relayVrfModuloSamples: 'u32',\n      nDelayTranches: 'u32',\n      noShowSlots: 'u32',\n      neededApprovals: 'u32'\n    },\n    SessionInfoValidatorGroup: 'Vec<ParaValidatorIndex>',\n    SignedAvailabilityBitfield: {\n      payload: 'BitVec',\n      validatorIndex: 'ParaValidatorIndex',\n      signature: 'ValidatorSignature'\n    },\n    SignedAvailabilityBitfields: 'Vec<SignedAvailabilityBitfield>',\n    SigningContext: {\n      sessionIndex: 'SessionIndex',\n      parentHash: 'Hash'\n    },\n    Statement: {\n      _enum: {\n        Never: 'Null',\n        // starts at 1\n        Candidate: 'Hash',\n        Valid: 'Hash',\n        Invalid: 'Hash'\n      }\n    },\n    TransientValidationData: {\n      maxCodeSize: 'u32',\n      maxHeadDataSize: 'u32',\n      balance: 'Balance',\n      codeUpgradeAllowed: 'Option<BlockNumber>',\n      dmqLength: 'u32'\n    },\n    UpgradeGoAhead: {\n      _enum: ['Abort', 'GoAhead']\n    },\n    UpgradeRestriction: {\n      _enum: ['Present']\n    },\n    UpwardMessage: 'Bytes',\n    ValidationFunctionParams: {\n      maxCodeSize: 'u32',\n      relayChainHeight: 'RelayChainBlockNumber',\n      codeUpgradeAllowed: 'Option<RelayChainBlockNumber>'\n    },\n    ValidationCode: 'Bytes',\n    ValidationCodeHash: 'Hash',\n    ValidationData: {\n      persisted: 'PersistedValidationData',\n      transient: 'TransientValidationData'\n    },\n    ValidationDataType: {\n      validationData: 'ValidationData',\n      relayChainState: 'Vec<Bytes>'\n    },\n    ValidatorSignature: 'Signature',\n    ValidityAttestation: {\n      _enum: {\n        Never: 'Null',\n        // starts at 1\n        Implicit: 'ValidatorSignature',\n        Explicit: 'ValidatorSignature'\n      }\n    },\n    MessagingStateSnapshot: {\n      relayDispatchQueueSize: '(u32, u32)',\n      egressChannels: 'Vec<MessagingStateSnapshotEgressEntry>'\n    },\n    MessagingStateSnapshotEgressEntry: '(ParaId, AbridgedHrmpChannel)',\n    SystemInherentData: 'ParachainInherentData',\n    VecInboundHrmpMessage: 'Vec<InboundHrmpMessage>'\n  })\n};"]},"metadata":{},"sourceType":"module"}