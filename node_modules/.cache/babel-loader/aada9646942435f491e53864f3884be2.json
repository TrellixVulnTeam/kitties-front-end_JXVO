{"ast":null,"code":"import _classCallCheck from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\"; // Copyright 2017-2021 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport EventEmitter from 'eventemitter3';\n\nvar _eventemitter = /*#__PURE__*/_classPrivateFieldLooseKey(\"eventemitter\");\n\nexport var Events = /*#__PURE__*/function () {\n  function Events() {\n    _classCallCheck(this, Events);\n\n    Object.defineProperty(this, _eventemitter, {\n      writable: true,\n      value: new EventEmitter()\n    });\n  }\n\n  _createClass(Events, [{\n    key: \"emit\",\n    value: function emit(type) {\n      var _classPrivateFieldLoo;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return (_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _eventemitter)[_eventemitter]).emit.apply(_classPrivateFieldLoo, [type].concat(args));\n    }\n    /**\n     * @description Attach an eventemitter handler to listen to a specific event\n     *\n     * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`\n     * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.\n     *\n     * @example\n     * <BR>\n     *\n     * ```javascript\n     * api.on('connected', (): void => {\n     *   console.log('API has been connected to the endpoint');\n     * });\n     *\n     * api.on('disconnected', (): void => {\n     *   console.log('API has been disconnected from the endpoint');\n     * });\n     * ```\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(type, handler) {\n      _classPrivateFieldLooseBase(this, _eventemitter)[_eventemitter].on(type, handler);\n\n      return this;\n    }\n    /**\n     * @description Remove the given eventemitter handler\n     *\n     * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`\n     * @param handler The callback to unregister.\n     *\n     * @example\n     * <BR>\n     *\n     * ```javascript\n     * const handler = (): void => {\n     *  console.log('Connected !);\n     * };\n     *\n     * // Start listening\n     * api.on('connected', handler);\n     *\n     * // Stop listening\n     * api.off('connected', handler);\n     * ```\n     */\n\n  }, {\n    key: \"off\",\n    value: function off(type, handler) {\n      _classPrivateFieldLooseBase(this, _eventemitter)[_eventemitter].removeListener(type, handler);\n\n      return this;\n    }\n    /**\n     * @description Attach an one-time eventemitter handler to listen to a specific event\n     *\n     * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`\n     * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.\n     *\n     * @example\n     * <BR>\n     *\n     * ```javascript\n     * api.once('connected', (): void => {\n     *   console.log('API has been connected to the endpoint');\n     * });\n     *\n     * api.once('disconnected', (): void => {\n     *   console.log('API has been disconnected from the endpoint');\n     * });\n     * ```\n     */\n\n  }, {\n    key: \"once\",\n    value: function once(type, handler) {\n      _classPrivateFieldLooseBase(this, _eventemitter)[_eventemitter].once(type, handler);\n\n      return this;\n    }\n  }]);\n\n  return Events;\n}();","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/api/base/Events.js"],"names":["_classPrivateFieldLooseBase","_classPrivateFieldLooseKey","EventEmitter","_eventemitter","Events","Object","defineProperty","writable","value","type","args","emit","handler","on","removeListener","once"],"mappings":";;AAAA,OAAOA,2BAAP,MAAwC,uDAAxC;AACA,OAAOC,0BAAP,MAAuC,sDAAvC,C,CACA;AACA;;AACA,OAAOC,YAAP,MAAyB,eAAzB;;AAEA,IAAIC,aAAa,GAAG,aAAaF,0BAA0B,CAAC,cAAD,CAA3D;;AAEA,WAAaG,MAAb;AACE,oBAAc;AAAA;;AACZC,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BH,aAA5B,EAA2C;AACzCI,MAAAA,QAAQ,EAAE,IAD+B;AAEzCC,MAAAA,KAAK,EAAE,IAAIN,YAAJ;AAFkC,KAA3C;AAID;;AANH;AAAA;AAAA,WAQE,cAAKO,IAAL,EAAoB;AAAA;;AAAA,wCAANC,IAAM;AAANA,QAAAA,IAAM;AAAA;;AAClB,aAAO,yBAAAV,2BAA2B,CAAC,IAAD,EAAOG,aAAP,CAA3B,CAAiDA,aAAjD,GAAgEQ,IAAhE,+BAAqEF,IAArE,SAA8EC,IAA9E,EAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA7BA;AAAA;AAAA,WAgCE,YAAGD,IAAH,EAASG,OAAT,EAAkB;AAChBZ,MAAAA,2BAA2B,CAAC,IAAD,EAAOG,aAAP,CAA3B,CAAiDA,aAAjD,EAAgEU,EAAhE,CAAmEJ,IAAnE,EAAyEG,OAAzE;;AAEA,aAAO,IAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAzDA;AAAA;AAAA,WA4DE,aAAIH,IAAJ,EAAUG,OAAV,EAAmB;AACjBZ,MAAAA,2BAA2B,CAAC,IAAD,EAAOG,aAAP,CAA3B,CAAiDA,aAAjD,EAAgEW,cAAhE,CAA+EL,IAA/E,EAAqFG,OAArF;;AAEA,aAAO,IAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnFA;AAAA;AAAA,WAsFE,cAAKH,IAAL,EAAWG,OAAX,EAAoB;AAClBZ,MAAAA,2BAA2B,CAAC,IAAD,EAAOG,aAAP,CAA3B,CAAiDA,aAAjD,EAAgEY,IAAhE,CAAqEN,IAArE,EAA2EG,OAA3E;;AAEA,aAAO,IAAP;AACD;AA1FH;;AAAA;AAAA","sourcesContent":["import _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n// Copyright 2017-2021 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport EventEmitter from 'eventemitter3';\n\nvar _eventemitter = /*#__PURE__*/_classPrivateFieldLooseKey(\"eventemitter\");\n\nexport class Events {\n  constructor() {\n    Object.defineProperty(this, _eventemitter, {\n      writable: true,\n      value: new EventEmitter()\n    });\n  }\n\n  emit(type, ...args) {\n    return _classPrivateFieldLooseBase(this, _eventemitter)[_eventemitter].emit(type, ...args);\n  }\n  /**\n   * @description Attach an eventemitter handler to listen to a specific event\n   *\n   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`\n   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * api.on('connected', (): void => {\n   *   console.log('API has been connected to the endpoint');\n   * });\n   *\n   * api.on('disconnected', (): void => {\n   *   console.log('API has been disconnected from the endpoint');\n   * });\n   * ```\n   */\n\n\n  on(type, handler) {\n    _classPrivateFieldLooseBase(this, _eventemitter)[_eventemitter].on(type, handler);\n\n    return this;\n  }\n  /**\n   * @description Remove the given eventemitter handler\n   *\n   * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`\n   * @param handler The callback to unregister.\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * const handler = (): void => {\n   *  console.log('Connected !);\n   * };\n   *\n   * // Start listening\n   * api.on('connected', handler);\n   *\n   * // Stop listening\n   * api.off('connected', handler);\n   * ```\n   */\n\n\n  off(type, handler) {\n    _classPrivateFieldLooseBase(this, _eventemitter)[_eventemitter].removeListener(type, handler);\n\n    return this;\n  }\n  /**\n   * @description Attach an one-time eventemitter handler to listen to a specific event\n   *\n   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`\n   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * api.once('connected', (): void => {\n   *   console.log('API has been connected to the endpoint');\n   * });\n   *\n   * api.once('disconnected', (): void => {\n   *   console.log('API has been disconnected from the endpoint');\n   * });\n   * ```\n   */\n\n\n  once(type, handler) {\n    _classPrivateFieldLooseBase(this, _eventemitter)[_eventemitter].once(type, handler);\n\n    return this;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}