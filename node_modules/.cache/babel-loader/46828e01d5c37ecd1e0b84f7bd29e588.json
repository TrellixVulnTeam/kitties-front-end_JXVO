{"ast":null,"code":"import _slicedToArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// Copyright 2017-2021 @polkadot/types-known authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { selectableNetworks } from '@polkadot/networks';\nimport { assert, BN, hexToU8a, stringify } from '@polkadot/util';\nimport kusama from \"./kusama.js\";\nimport polkadot from \"./polkadot.js\";\nimport westend from \"./westend.js\";\nvar allKnown = {\n  kusama: kusama,\n  polkadot: polkadot,\n  westend: westend\n}; // testnets are not available in the networks map\n\nvar NET_EXTRA = {\n  westend: {\n    genesisHash: ['0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e']\n  }\n};\n/** @internal */\n\nfunction checkOrder(network, versions) {\n  var ooo = versions.filter(function (curr, index) {\n    var prev = versions[index - 1];\n    return index === 0 ? false : curr[0] <= prev[0] || curr[1] <= prev[1];\n  });\n  assert(!ooo.length, function () {\n    return \"\".concat(network, \": Mismatched upgrade ordering: \").concat(stringify(ooo));\n  });\n  return versions;\n}\n/** @internal */\n\n\nfunction mapRaw(_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      network = _ref2[0],\n      versions = _ref2[1];\n\n  var chain = selectableNetworks.find(function (n) {\n    return n.network === network;\n  }) || NET_EXTRA[network];\n  assert(chain, function () {\n    return \"Unable to find info for chain \".concat(network);\n  });\n  return {\n    genesisHash: hexToU8a(chain.genesisHash[0]),\n    network: network,\n    versions: checkOrder(network, versions).map(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          blockNumber = _ref4[0],\n          specVersion = _ref4[1];\n\n      return {\n        blockNumber: new BN(blockNumber),\n        specVersion: new BN(specVersion)\n      };\n    })\n  };\n} // Type overrides for specific spec types & versions as given in runtimeVersion\n\n\nvar upgrades = Object.entries(allKnown).map(mapRaw);\nexport default upgrades;","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types-known/upgrades/index.js"],"names":["selectableNetworks","assert","BN","hexToU8a","stringify","kusama","polkadot","westend","allKnown","NET_EXTRA","genesisHash","checkOrder","network","versions","ooo","filter","curr","index","prev","length","mapRaw","chain","find","n","map","blockNumber","specVersion","upgrades","Object","entries"],"mappings":";AAAA;AACA;AACA,SAASA,kBAAT,QAAmC,oBAAnC;AACA,SAASC,MAAT,EAAiBC,EAAjB,EAAqBC,QAArB,EAA+BC,SAA/B,QAAgD,gBAAhD;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,IAAMC,QAAQ,GAAG;AACfH,EAAAA,MAAM,EAANA,MADe;AAEfC,EAAAA,QAAQ,EAARA,QAFe;AAGfC,EAAAA,OAAO,EAAPA;AAHe,CAAjB,C,CAIG;;AAEH,IAAME,SAAS,GAAG;AAChBF,EAAAA,OAAO,EAAE;AACPG,IAAAA,WAAW,EAAE,CAAC,oEAAD;AADN;AADO,CAAlB;AAKA;;AAEA,SAASC,UAAT,CAAoBC,OAApB,EAA6BC,QAA7B,EAAuC;AACrC,MAAMC,GAAG,GAAGD,QAAQ,CAACE,MAAT,CAAgB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC3C,QAAMC,IAAI,GAAGL,QAAQ,CAACI,KAAK,GAAG,CAAT,CAArB;AACA,WAAOA,KAAK,KAAK,CAAV,GAAc,KAAd,GAAsBD,IAAI,CAAC,CAAD,CAAJ,IAAWE,IAAI,CAAC,CAAD,CAAf,IAAsBF,IAAI,CAAC,CAAD,CAAJ,IAAWE,IAAI,CAAC,CAAD,CAAlE;AACD,GAHW,CAAZ;AAIAjB,EAAAA,MAAM,CAAC,CAACa,GAAG,CAACK,MAAN,EAAc;AAAA,qBAASP,OAAT,4CAAkDR,SAAS,CAACU,GAAD,CAA3D;AAAA,GAAd,CAAN;AACA,SAAOD,QAAP;AACD;AACD;;;AAGA,SAASO,MAAT,OAAqC;AAAA;AAAA,MAApBR,OAAoB;AAAA,MAAXC,QAAW;;AACnC,MAAMQ,KAAK,GAAGrB,kBAAkB,CAACsB,IAAnB,CAAwB,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACX,OAAF,KAAcA,OAAlB;AAAA,GAAzB,KAAuDH,SAAS,CAACG,OAAD,CAA9E;AACAX,EAAAA,MAAM,CAACoB,KAAD,EAAQ;AAAA,mDAAuCT,OAAvC;AAAA,GAAR,CAAN;AACA,SAAO;AACLF,IAAAA,WAAW,EAAEP,QAAQ,CAACkB,KAAK,CAACX,WAAN,CAAkB,CAAlB,CAAD,CADhB;AAELE,IAAAA,OAAO,EAAPA,OAFK;AAGLC,IAAAA,QAAQ,EAAEF,UAAU,CAACC,OAAD,EAAUC,QAAV,CAAV,CAA8BW,GAA9B,CAAkC;AAAA;AAAA,UAAEC,WAAF;AAAA,UAAeC,WAAf;;AAAA,aAAiC;AAC3ED,QAAAA,WAAW,EAAE,IAAIvB,EAAJ,CAAOuB,WAAP,CAD8D;AAE3EC,QAAAA,WAAW,EAAE,IAAIxB,EAAJ,CAAOwB,WAAP;AAF8D,OAAjC;AAAA,KAAlC;AAHL,GAAP;AAQD,C,CAAC;;;AAGF,IAAMC,QAAQ,GAAGC,MAAM,CAACC,OAAP,CAAerB,QAAf,EAAyBgB,GAAzB,CAA6BJ,MAA7B,CAAjB;AACA,eAAeO,QAAf","sourcesContent":["// Copyright 2017-2021 @polkadot/types-known authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { selectableNetworks } from '@polkadot/networks';\nimport { assert, BN, hexToU8a, stringify } from '@polkadot/util';\nimport kusama from \"./kusama.js\";\nimport polkadot from \"./polkadot.js\";\nimport westend from \"./westend.js\";\nconst allKnown = {\n  kusama,\n  polkadot,\n  westend\n}; // testnets are not available in the networks map\n\nconst NET_EXTRA = {\n  westend: {\n    genesisHash: ['0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e']\n  }\n};\n/** @internal */\n\nfunction checkOrder(network, versions) {\n  const ooo = versions.filter((curr, index) => {\n    const prev = versions[index - 1];\n    return index === 0 ? false : curr[0] <= prev[0] || curr[1] <= prev[1];\n  });\n  assert(!ooo.length, () => `${network}: Mismatched upgrade ordering: ${stringify(ooo)}`);\n  return versions;\n}\n/** @internal */\n\n\nfunction mapRaw([network, versions]) {\n  const chain = selectableNetworks.find(n => n.network === network) || NET_EXTRA[network];\n  assert(chain, () => `Unable to find info for chain ${network}`);\n  return {\n    genesisHash: hexToU8a(chain.genesisHash[0]),\n    network,\n    versions: checkOrder(network, versions).map(([blockNumber, specVersion]) => ({\n      blockNumber: new BN(blockNumber),\n      specVersion: new BN(specVersion)\n    }))\n  };\n} // Type overrides for specific spec types & versions as given in runtimeVersion\n\n\nconst upgrades = Object.entries(allKnown).map(mapRaw);\nexport default upgrades;"]},"metadata":{},"sourceType":"module"}