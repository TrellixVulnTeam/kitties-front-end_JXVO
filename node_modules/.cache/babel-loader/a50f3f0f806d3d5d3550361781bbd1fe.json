{"ast":null,"code":"import _classCallCheck from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _get from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _wrapNativeSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport _toConsumableArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\"; // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { assert, BN, bnToBn, bnToU8a, isBn, isNumber, isString, isU8a, isUndefined, stringCamelCase, stringify, stringUpperFirst, u8aToBn, u8aToHex, u8aToU8a } from '@polkadot/util';\nimport { compareArray } from \"./utils/index.js\";\n\nfunction encodeSet(setValues, value) {\n  return value.reduce(function (result, value) {\n    return result.or(bnToBn(setValues[value] || 0));\n  }, new BN(0));\n}\n/** @internal */\n\n\nfunction decodeSetArray(setValues, value) {\n  return value.reduce(function (result, key) {\n    assert(!isUndefined(setValues[key]), function () {\n      return \"Set: Invalid key '\".concat(key, \"' passed to Set, allowed \").concat(Object.keys(setValues).join(', '));\n    });\n    result.push(key);\n    return result;\n  }, []);\n}\n/** @internal */\n\n\nfunction decodeSetNumber(setValues, _value) {\n  var bn = bnToBn(_value);\n  var result = Object.keys(setValues).reduce(function (result, key) {\n    if (bn.and(bnToBn(setValues[key])).eq(bnToBn(setValues[key]))) {\n      result.push(key);\n    }\n\n    return result;\n  }, []);\n  var computed = encodeSet(setValues, result);\n  assert(bn.eq(computed), function () {\n    return \"Set: Mismatch decoding '\".concat(bn.toString(), \"', computed as '\").concat(computed.toString(), \"' with \").concat(result.join(', '));\n  });\n  return result;\n}\n/** @internal */\n\n\nfunction decodeSet(setValues) {\n  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var bitLength = arguments.length > 2 ? arguments[2] : undefined;\n  assert(bitLength % 8 === 0, function () {\n    return \"Expected valid bitLength, power of 8, found \".concat(bitLength);\n  });\n  var byteLength = bitLength / 8;\n\n  if (isString(value)) {\n    return decodeSet(setValues, u8aToU8a(value), byteLength);\n  } else if (isU8a(value)) {\n    return value.length === 0 ? [] : decodeSetNumber(setValues, u8aToBn(value.subarray(0, byteLength), {\n      isLe: true\n    }));\n  } else if (value instanceof Set || Array.isArray(value)) {\n    var input = Array.isArray(value) ? value : _toConsumableArray(value.values());\n    return decodeSetArray(setValues, input);\n  }\n\n  return decodeSetNumber(setValues, value);\n}\n/**\n * @name Set\n * @description\n * An Set is an array of string values, represented an an encoded type by\n * a bitwise representation of the values.\n */\n\n\nvar _allowed = /*#__PURE__*/_classPrivateFieldLooseKey(\"allowed\");\n\nvar _byteLength = /*#__PURE__*/_classPrivateFieldLooseKey(\"byteLength\");\n\nexport var CodecSet = /*#__PURE__*/function (_Set) {\n  _inherits(CodecSet, _Set);\n\n  var _super = _createSuper(CodecSet);\n\n  function CodecSet(registry, setValues, value) {\n    var _thisSuper, _this;\n\n    var bitLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n\n    _classCallCheck(this, CodecSet);\n\n    _this = _super.call(this, decodeSet(setValues, value, bitLength));\n    _this.registry = void 0;\n    _this.createdAtHash = void 0;\n    Object.defineProperty(_assertThisInitialized(_this), _allowed, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_assertThisInitialized(_this), _byteLength, {\n      writable: true,\n      value: void 0\n    });\n\n    _this.add = function (key) {\n      // ^^^ add = () property done to assign this instance's this, otherwise Set.add creates \"some\" chaos\n      // we have the isUndefined(this._setValues) in here as well, add is used internally\n      // in the Set constructor (so it is undefined at this point, and should allow)\n      assert(isUndefined(_classPrivateFieldLooseBase(_assertThisInitialized(_this), _allowed)[_allowed]) || !isUndefined(_classPrivateFieldLooseBase(_assertThisInitialized(_this), _allowed)[_allowed][key]), function () {\n        return \"Set: Invalid key '\".concat(key, \"' on add\");\n      });\n\n      _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(CodecSet.prototype)), \"add\", _thisSuper).call(_thisSuper, key);\n\n      return _assertThisInitialized(_this);\n    };\n\n    _this.registry = registry;\n    _classPrivateFieldLooseBase(_assertThisInitialized(_this), _allowed)[_allowed] = setValues;\n    _classPrivateFieldLooseBase(_assertThisInitialized(_this), _byteLength)[_byteLength] = bitLength / 8;\n    return _this;\n  }\n\n  _createClass(CodecSet, [{\n    key: \"encodedLength\",\n    get:\n    /**\n     * @description The length of the value when encoded as a Uint8Array\n     */\n    function get() {\n      return _classPrivateFieldLooseBase(this, _byteLength)[_byteLength];\n    }\n    /**\n     * @description returns a hash of the contents\n     */\n\n  }, {\n    key: \"hash\",\n    get: function get() {\n      return this.registry.hash(this.toU8a());\n    }\n    /**\n     * @description true is the Set contains no values\n     */\n\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return this.size === 0;\n    }\n    /**\n     * @description The actual set values as a string[]\n     */\n\n  }, {\n    key: \"strings\",\n    get: function get() {\n      return _toConsumableArray(_get(_getPrototypeOf(CodecSet.prototype), \"values\", this).call(this));\n    }\n    /**\n     * @description The encoded value for the set members\n     */\n\n  }, {\n    key: \"valueEncoded\",\n    get: function get() {\n      return encodeSet(_classPrivateFieldLooseBase(this, _allowed)[_allowed], this.strings);\n    }\n    /**\n     * @description adds a value to the Set (extended to allow for validity checking)\n     */\n\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      if (Array.isArray(other)) {\n        // we don't actually care about the order, sort the values\n        return compareArray(this.strings.sort(), other.sort());\n      } else if (other instanceof Set) {\n        return this.eq(_toConsumableArray(other.values()));\n      } else if (isNumber(other) || isBn(other)) {\n        return this.valueEncoded.eq(bnToBn(other));\n      }\n\n      return false;\n    }\n    /**\n     * @description Returns a hex string representation of the value\n     */\n\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return u8aToHex(this.toU8a());\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman() {\n      return this.toJSON();\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.strings;\n    }\n    /**\n     * @description The encoded value for the set members\n     */\n\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      return this.valueEncoded.toNumber();\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return stringify({\n        _set: _classPrivateFieldLooseBase(this, _allowed)[_allowed]\n      });\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"[\".concat(this.strings.join(', '), \"]\");\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"toU8a\",\n    value: function toU8a(isBare) {\n      return bnToU8a(this.valueEncoded, {\n        bitLength: _classPrivateFieldLooseBase(this, _byteLength)[_byteLength] * 8,\n        isLe: true\n      });\n    }\n  }], [{\n    key: \"with\",\n    value: function _with(values, bitLength) {\n      return /*#__PURE__*/function (_CodecSet) {\n        _inherits(_class, _CodecSet);\n\n        var _super2 = _createSuper(_class);\n\n        function _class(registry, value) {\n          var _this2;\n\n          _classCallCheck(this, _class);\n\n          _this2 = _super2.call(this, registry, values, value, bitLength);\n          Object.keys(values).forEach(function (_key) {\n            var iskey = \"is\".concat(stringUpperFirst(stringCamelCase(_key)));\n            isUndefined(_this2[iskey]) && Object.defineProperty(_assertThisInitialized(_this2), iskey, {\n              enumerable: true,\n              get: function get() {\n                return _this2.strings.includes(_key);\n              }\n            });\n          });\n          return _this2;\n        }\n\n        return _class;\n      }(CodecSet);\n    }\n  }]);\n\n  return CodecSet;\n}( /*#__PURE__*/_wrapNativeSuper(Set));","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types/codec/Set.js"],"names":["_classPrivateFieldLooseBase","_classPrivateFieldLooseKey","assert","BN","bnToBn","bnToU8a","isBn","isNumber","isString","isU8a","isUndefined","stringCamelCase","stringify","stringUpperFirst","u8aToBn","u8aToHex","u8aToU8a","compareArray","encodeSet","setValues","value","reduce","result","or","decodeSetArray","key","Object","keys","join","push","decodeSetNumber","_value","bn","and","eq","computed","toString","decodeSet","bitLength","byteLength","length","subarray","isLe","Set","Array","isArray","input","values","_allowed","_byteLength","CodecSet","registry","createdAtHash","defineProperty","writable","add","hash","toU8a","size","strings","other","sort","valueEncoded","toJSON","toNumber","_set","isBare","forEach","_key","iskey","enumerable","get","includes"],"mappings":"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","sourcesContent":["import _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, BN, bnToBn, bnToU8a, isBn, isNumber, isString, isU8a, isUndefined, stringCamelCase, stringify, stringUpperFirst, u8aToBn, u8aToHex, u8aToU8a } from '@polkadot/util';\nimport { compareArray } from \"./utils/index.js\";\n\nfunction encodeSet(setValues, value) {\n  return value.reduce((result, value) => {\n    return result.or(bnToBn(setValues[value] || 0));\n  }, new BN(0));\n}\n/** @internal */\n\n\nfunction decodeSetArray(setValues, value) {\n  return value.reduce((result, key) => {\n    assert(!isUndefined(setValues[key]), () => `Set: Invalid key '${key}' passed to Set, allowed ${Object.keys(setValues).join(', ')}`);\n    result.push(key);\n    return result;\n  }, []);\n}\n/** @internal */\n\n\nfunction decodeSetNumber(setValues, _value) {\n  const bn = bnToBn(_value);\n  const result = Object.keys(setValues).reduce((result, key) => {\n    if (bn.and(bnToBn(setValues[key])).eq(bnToBn(setValues[key]))) {\n      result.push(key);\n    }\n\n    return result;\n  }, []);\n  const computed = encodeSet(setValues, result);\n  assert(bn.eq(computed), () => `Set: Mismatch decoding '${bn.toString()}', computed as '${computed.toString()}' with ${result.join(', ')}`);\n  return result;\n}\n/** @internal */\n\n\nfunction decodeSet(setValues, value = 0, bitLength) {\n  assert(bitLength % 8 === 0, () => `Expected valid bitLength, power of 8, found ${bitLength}`);\n  const byteLength = bitLength / 8;\n\n  if (isString(value)) {\n    return decodeSet(setValues, u8aToU8a(value), byteLength);\n  } else if (isU8a(value)) {\n    return value.length === 0 ? [] : decodeSetNumber(setValues, u8aToBn(value.subarray(0, byteLength), {\n      isLe: true\n    }));\n  } else if (value instanceof Set || Array.isArray(value)) {\n    const input = Array.isArray(value) ? value : [...value.values()];\n    return decodeSetArray(setValues, input);\n  }\n\n  return decodeSetNumber(setValues, value);\n}\n/**\n * @name Set\n * @description\n * An Set is an array of string values, represented an an encoded type by\n * a bitwise representation of the values.\n */\n\n\nvar _allowed = /*#__PURE__*/_classPrivateFieldLooseKey(\"allowed\");\n\nvar _byteLength = /*#__PURE__*/_classPrivateFieldLooseKey(\"byteLength\");\n\nexport class CodecSet extends Set {\n  constructor(registry, setValues, value, bitLength = 8) {\n    super(decodeSet(setValues, value, bitLength));\n    this.registry = void 0;\n    this.createdAtHash = void 0;\n    Object.defineProperty(this, _allowed, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _byteLength, {\n      writable: true,\n      value: void 0\n    });\n\n    this.add = key => {\n      // ^^^ add = () property done to assign this instance's this, otherwise Set.add creates \"some\" chaos\n      // we have the isUndefined(this._setValues) in here as well, add is used internally\n      // in the Set constructor (so it is undefined at this point, and should allow)\n      assert(isUndefined(_classPrivateFieldLooseBase(this, _allowed)[_allowed]) || !isUndefined(_classPrivateFieldLooseBase(this, _allowed)[_allowed][key]), () => `Set: Invalid key '${key}' on add`);\n      super.add(key);\n      return this;\n    };\n\n    this.registry = registry;\n    _classPrivateFieldLooseBase(this, _allowed)[_allowed] = setValues;\n    _classPrivateFieldLooseBase(this, _byteLength)[_byteLength] = bitLength / 8;\n  }\n\n  static with(values, bitLength) {\n    return class extends CodecSet {\n      constructor(registry, value) {\n        super(registry, values, value, bitLength);\n        Object.keys(values).forEach(_key => {\n          const iskey = `is${stringUpperFirst(stringCamelCase(_key))}`;\n          isUndefined(this[iskey]) && Object.defineProperty(this, iskey, {\n            enumerable: true,\n            get: () => this.strings.includes(_key)\n          });\n        });\n      }\n\n    };\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return _classPrivateFieldLooseBase(this, _byteLength)[_byteLength];\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description true is the Set contains no values\n   */\n\n\n  get isEmpty() {\n    return this.size === 0;\n  }\n  /**\n   * @description The actual set values as a string[]\n   */\n\n\n  get strings() {\n    return [...super.values()];\n  }\n  /**\n   * @description The encoded value for the set members\n   */\n\n\n  get valueEncoded() {\n    return encodeSet(_classPrivateFieldLooseBase(this, _allowed)[_allowed], this.strings);\n  }\n  /**\n   * @description adds a value to the Set (extended to allow for validity checking)\n   */\n\n\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n  eq(other) {\n    if (Array.isArray(other)) {\n      // we don't actually care about the order, sort the values\n      return compareArray(this.strings.sort(), other.sort());\n    } else if (other instanceof Set) {\n      return this.eq([...other.values()]);\n    } else if (isNumber(other) || isBn(other)) {\n      return this.valueEncoded.eq(bnToBn(other));\n    }\n\n    return false;\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return u8aToHex(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.strings;\n  }\n  /**\n   * @description The encoded value for the set members\n   */\n\n\n  toNumber() {\n    return this.valueEncoded.toNumber();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return stringify({\n      _set: _classPrivateFieldLooseBase(this, _allowed)[_allowed]\n    });\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return `[${this.strings.join(', ')}]`;\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    return bnToU8a(this.valueEncoded, {\n      bitLength: _classPrivateFieldLooseBase(this, _byteLength)[_byteLength] * 8,\n      isLe: true\n    });\n  }\n\n}"]},"metadata":{},"sourceType":"module"}