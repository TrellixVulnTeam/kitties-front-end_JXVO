{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, of, switchMap } from 'rxjs';\nimport { deriveCache, memo } from \"../util/index.js\";\nimport { filterEras } from \"./util.js\";\nvar CACHE_KEY = 'eraRewards';\n\nfunction mapRewards(eras, optRewards) {\n  return eras.map(function (era, index) {\n    return {\n      era: era,\n      eraReward: optRewards[index].unwrapOrDefault()\n    };\n  });\n}\n\nexport function _erasRewards(instanceId, api) {\n  return memo(instanceId, function (eras, withActive) {\n    if (!eras.length) {\n      return of([]);\n    }\n\n    var cached = withActive ? [] : eras.map(function (era) {\n      return deriveCache.get(\"\".concat(CACHE_KEY, \"-\").concat(era.toString()));\n    }).filter(function (value) {\n      return !!value;\n    });\n    var remaining = filterEras(eras, cached);\n\n    if (!remaining.length) {\n      return of(cached);\n    }\n\n    return api.query.staking.erasValidatorReward.multi(remaining).pipe(map(function (optRewards) {\n      var query = mapRewards(remaining, optRewards);\n      !withActive && query.forEach(function (q) {\n        return deriveCache.set(\"\".concat(CACHE_KEY, \"-\").concat(q.era.toString()), q);\n      });\n      return eras.map(function (era) {\n        return cached.find(function (cached) {\n          return era.eq(cached.era);\n        }) || query.find(function (query) {\n          return era.eq(query.era);\n        });\n      });\n    }));\n  });\n}\nexport function erasRewards(instanceId, api) {\n  return memo(instanceId, function () {\n    var withActive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return api.derive.staking.erasHistoric(withActive).pipe(switchMap(function (eras) {\n      return api.derive.staking._erasRewards(eras, withActive);\n    }));\n  });\n}","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/api-derive/staking/erasRewards.js"],"names":["map","of","switchMap","deriveCache","memo","filterEras","CACHE_KEY","mapRewards","eras","optRewards","era","index","eraReward","unwrapOrDefault","_erasRewards","instanceId","api","withActive","length","cached","get","toString","filter","value","remaining","query","staking","erasValidatorReward","multi","pipe","forEach","q","set","find","eq","erasRewards","derive","erasHistoric"],"mappings":"AAAA;AACA;AACA,SAASA,GAAT,EAAcC,EAAd,EAAkBC,SAAlB,QAAmC,MAAnC;AACA,SAASC,WAAT,EAAsBC,IAAtB,QAAkC,kBAAlC;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,IAAMC,SAAS,GAAG,YAAlB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,UAA1B,EAAsC;AACpC,SAAOD,IAAI,CAACR,GAAL,CAAS,UAACU,GAAD,EAAMC,KAAN;AAAA,WAAiB;AAC/BD,MAAAA,GAAG,EAAHA,GAD+B;AAE/BE,MAAAA,SAAS,EAAEH,UAAU,CAACE,KAAD,CAAV,CAAkBE,eAAlB;AAFoB,KAAjB;AAAA,GAAT,CAAP;AAID;;AAED,OAAO,SAASC,YAAT,CAAsBC,UAAtB,EAAkCC,GAAlC,EAAuC;AAC5C,SAAOZ,IAAI,CAACW,UAAD,EAAa,UAACP,IAAD,EAAOS,UAAP,EAAsB;AAC5C,QAAI,CAACT,IAAI,CAACU,MAAV,EAAkB;AAChB,aAAOjB,EAAE,CAAC,EAAD,CAAT;AACD;;AAED,QAAMkB,MAAM,GAAGF,UAAU,GAAG,EAAH,GAAQT,IAAI,CAACR,GAAL,CAAS,UAAAU,GAAG;AAAA,aAAIP,WAAW,CAACiB,GAAZ,WAAmBd,SAAnB,cAAgCI,GAAG,CAACW,QAAJ,EAAhC,EAAJ;AAAA,KAAZ,EAAmEC,MAAnE,CAA0E,UAAAC,KAAK;AAAA,aAAI,CAAC,CAACA,KAAN;AAAA,KAA/E,CAAjC;AACA,QAAMC,SAAS,GAAGnB,UAAU,CAACG,IAAD,EAAOW,MAAP,CAA5B;;AAEA,QAAI,CAACK,SAAS,CAACN,MAAf,EAAuB;AACrB,aAAOjB,EAAE,CAACkB,MAAD,CAAT;AACD;;AAED,WAAOH,GAAG,CAACS,KAAJ,CAAUC,OAAV,CAAkBC,mBAAlB,CAAsCC,KAAtC,CAA4CJ,SAA5C,EAAuDK,IAAvD,CAA4D7B,GAAG,CAAC,UAAAS,UAAU,EAAI;AACnF,UAAMgB,KAAK,GAAGlB,UAAU,CAACiB,SAAD,EAAYf,UAAZ,CAAxB;AACA,OAACQ,UAAD,IAAeQ,KAAK,CAACK,OAAN,CAAc,UAAAC,CAAC;AAAA,eAAI5B,WAAW,CAAC6B,GAAZ,WAAmB1B,SAAnB,cAAgCyB,CAAC,CAACrB,GAAF,CAAMW,QAAN,EAAhC,GAAoDU,CAApD,CAAJ;AAAA,OAAf,CAAf;AACA,aAAOvB,IAAI,CAACR,GAAL,CAAS,UAAAU,GAAG;AAAA,eAAIS,MAAM,CAACc,IAAP,CAAY,UAAAd,MAAM;AAAA,iBAAIT,GAAG,CAACwB,EAAJ,CAAOf,MAAM,CAACT,GAAd,CAAJ;AAAA,SAAlB,KAA6Ce,KAAK,CAACQ,IAAN,CAAW,UAAAR,KAAK;AAAA,iBAAIf,GAAG,CAACwB,EAAJ,CAAOT,KAAK,CAACf,GAAb,CAAJ;AAAA,SAAhB,CAAjD;AAAA,OAAZ,CAAP;AACD,KAJqE,CAA/D,CAAP;AAKD,GAjBU,CAAX;AAkBD;AACD,OAAO,SAASyB,WAAT,CAAqBpB,UAArB,EAAiCC,GAAjC,EAAsC;AAC3C,SAAOZ,IAAI,CAACW,UAAD,EAAa;AAAA,QAACE,UAAD,uEAAc,KAAd;AAAA,WAAwBD,GAAG,CAACoB,MAAJ,CAAWV,OAAX,CAAmBW,YAAnB,CAAgCpB,UAAhC,EAA4CY,IAA5C,CAAiD3B,SAAS,CAAC,UAAAM,IAAI;AAAA,aAAIQ,GAAG,CAACoB,MAAJ,CAAWV,OAAX,CAAmBZ,YAAnB,CAAgCN,IAAhC,EAAsCS,UAAtC,CAAJ;AAAA,KAAL,CAA1D,CAAxB;AAAA,GAAb,CAAX;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, of, switchMap } from 'rxjs';\nimport { deriveCache, memo } from \"../util/index.js\";\nimport { filterEras } from \"./util.js\";\nconst CACHE_KEY = 'eraRewards';\n\nfunction mapRewards(eras, optRewards) {\n  return eras.map((era, index) => ({\n    era,\n    eraReward: optRewards[index].unwrapOrDefault()\n  }));\n}\n\nexport function _erasRewards(instanceId, api) {\n  return memo(instanceId, (eras, withActive) => {\n    if (!eras.length) {\n      return of([]);\n    }\n\n    const cached = withActive ? [] : eras.map(era => deriveCache.get(`${CACHE_KEY}-${era.toString()}`)).filter(value => !!value);\n    const remaining = filterEras(eras, cached);\n\n    if (!remaining.length) {\n      return of(cached);\n    }\n\n    return api.query.staking.erasValidatorReward.multi(remaining).pipe(map(optRewards => {\n      const query = mapRewards(remaining, optRewards);\n      !withActive && query.forEach(q => deriveCache.set(`${CACHE_KEY}-${q.era.toString()}`, q));\n      return eras.map(era => cached.find(cached => era.eq(cached.era)) || query.find(query => era.eq(query.era)));\n    }));\n  });\n}\nexport function erasRewards(instanceId, api) {\n  return memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._erasRewards(eras, withActive))));\n}"]},"metadata":{},"sourceType":"module"}