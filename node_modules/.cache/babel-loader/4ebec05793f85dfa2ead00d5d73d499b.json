{"ast":null,"code":"import _toConsumableArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport _slicedToArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\"; // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { compactFromU8a, compactToU8a, isHex, isU8a, logger, stringify, u8aConcat, u8aToHex, u8aToU8a } from '@polkadot/util';\nimport { compareSet, decodeU8a, sortSet, typeToConstructor } from \"./utils/index.js\";\nvar l = logger('BTreeSet');\n/** @internal */\n\nfunction decodeSetFromU8a(registry, ValClass, u8a) {\n  var output = new Set();\n\n  var _compactFromU8a = compactFromU8a(u8a),\n      _compactFromU8a2 = _slicedToArray(_compactFromU8a, 2),\n      offset = _compactFromU8a2[0],\n      length = _compactFromU8a2[1];\n\n  var types = [];\n\n  for (var i = 0; i < length.toNumber(); i++) {\n    types.push(ValClass);\n  }\n\n  var values = decodeU8a(registry, u8a.subarray(offset), types);\n\n  for (var _i = 0; _i < values.length; _i++) {\n    output.add(values[_i]);\n  }\n\n  return output;\n}\n/** @internal */\n\n\nfunction decodeSetFromSet(registry, ValClass, value) {\n  var output = new Set();\n  value.forEach(function (val) {\n    try {\n      output.add(val instanceof ValClass ? val : new ValClass(registry, val));\n    } catch (error) {\n      l.error('Failed to decode key or value:', error.message);\n      throw error;\n    }\n  });\n  return output;\n}\n/**\n * Decode input to pass into constructor.\n *\n * @param ValClass - Type of the map value\n * @param value - Value to decode, one of:\n * - null\n * - undefined\n * - hex\n * - Uint8Array\n * - Set<any>, where both key and value types are either\n *   constructors or decodeable values for their types.\n * @param jsonSet\n * @internal\n */\n\n\nfunction decodeSet(registry, valType, value) {\n  if (!value) {\n    return new Set();\n  }\n\n  var ValClass = typeToConstructor(registry, valType);\n\n  if (isHex(value) || isU8a(value)) {\n    return decodeSetFromU8a(registry, ValClass, u8aToU8a(value));\n  } else if (Array.isArray(value) || value instanceof Set) {\n    return decodeSetFromSet(registry, ValClass, value);\n  }\n\n  throw new Error('BTreeSet: cannot decode type');\n}\n\nvar _ValClass = /*#__PURE__*/_classPrivateFieldLooseKey(\"ValClass\");\n\nexport var BTreeSet = /*#__PURE__*/function (_Set) {\n  _inherits(BTreeSet, _Set);\n\n  var _super = _createSuper(BTreeSet);\n\n  function BTreeSet(registry, valType, rawValue) {\n    var _this;\n\n    _classCallCheck(this, BTreeSet);\n\n    _this = _super.call(this, sortSet(decodeSet(registry, valType, rawValue)));\n    _this.registry = void 0;\n    _this.createdAtHash = void 0;\n    Object.defineProperty(_assertThisInitialized(_this), _ValClass, {\n      writable: true,\n      value: void 0\n    });\n    _this.registry = registry;\n    _classPrivateFieldLooseBase(_assertThisInitialized(_this), _ValClass)[_ValClass] = typeToConstructor(registry, valType);\n    return _this;\n  }\n\n  _createClass(BTreeSet, [{\n    key: \"encodedLength\",\n    get:\n    /**\n     * @description The length of the value when encoded as a Uint8Array\n     */\n    function get() {\n      var len = compactToU8a(this.size).length;\n      this.forEach(function (v) {\n        len += v.encodedLength;\n      });\n      return len;\n    }\n    /**\n     * @description Returns a hash of the value\n     */\n\n  }, {\n    key: \"hash\",\n    get: function get() {\n      return this.registry.hash(this.toU8a());\n    }\n    /**\n     * @description Checks if the value is an empty value\n     */\n\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return this.size === 0;\n    }\n    /**\n     * @description The actual set values as a string[]\n     */\n\n  }, {\n    key: \"strings\",\n    get: function get() {\n      return _toConsumableArray(_get(_getPrototypeOf(BTreeSet.prototype), \"values\", this).call(this)).map(function (v) {\n        return v.toString();\n      });\n    }\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return compareSet(this, other);\n    }\n    /**\n     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n     */\n\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return u8aToHex(this.toU8a());\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman(isExtended) {\n      var json = [];\n      this.forEach(function (v) {\n        json.push(v.toHuman(isExtended));\n      });\n      return json;\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var json = [];\n      this.forEach(function (v) {\n        json.push(v.toJSON());\n      });\n      return json;\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return \"BTreeSet<\".concat(this.registry.getClassName(_classPrivateFieldLooseBase(this, _ValClass)[_ValClass]) || new (_classPrivateFieldLooseBase(this, _ValClass)[_ValClass])(this.registry).toRawType(), \">\");\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return stringify(this.toJSON());\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\n     */\n\n  }, {\n    key: \"toU8a\",\n    value: function toU8a(isBare) {\n      var encoded = new Array();\n\n      if (!isBare) {\n        encoded.push(compactToU8a(this.size));\n      }\n\n      this.forEach(function (v) {\n        encoded.push(v.toU8a(isBare));\n      });\n      return u8aConcat.apply(void 0, encoded);\n    }\n  }], [{\n    key: \"with\",\n    value: function _with(valType) {\n      return /*#__PURE__*/function (_BTreeSet) {\n        _inherits(_class, _BTreeSet);\n\n        var _super2 = _createSuper(_class);\n\n        function _class(registry, value) {\n          _classCallCheck(this, _class);\n\n          return _super2.call(this, registry, valType, value);\n        }\n\n        return _class;\n      }(BTreeSet);\n    }\n  }]);\n\n  return BTreeSet;\n}( /*#__PURE__*/_wrapNativeSuper(Set));","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types/codec/BTreeSet.js"],"names":["_classPrivateFieldLooseBase","_classPrivateFieldLooseKey","compactFromU8a","compactToU8a","isHex","isU8a","logger","stringify","u8aConcat","u8aToHex","u8aToU8a","compareSet","decodeU8a","sortSet","typeToConstructor","l","decodeSetFromU8a","registry","ValClass","u8a","output","Set","offset","length","types","i","toNumber","push","values","subarray","add","decodeSetFromSet","value","forEach","val","error","message","decodeSet","valType","Array","isArray","Error","_ValClass","BTreeSet","rawValue","createdAtHash","Object","defineProperty","writable","len","size","v","encodedLength","hash","toU8a","map","toString","other","isExtended","json","toHuman","toJSON","getClassName","toRawType","isBare","encoded"],"mappings":"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","sourcesContent":["import _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { compactFromU8a, compactToU8a, isHex, isU8a, logger, stringify, u8aConcat, u8aToHex, u8aToU8a } from '@polkadot/util';\nimport { compareSet, decodeU8a, sortSet, typeToConstructor } from \"./utils/index.js\";\nconst l = logger('BTreeSet');\n/** @internal */\n\nfunction decodeSetFromU8a(registry, ValClass, u8a) {\n  const output = new Set();\n  const [offset, length] = compactFromU8a(u8a);\n  const types = [];\n\n  for (let i = 0; i < length.toNumber(); i++) {\n    types.push(ValClass);\n  }\n\n  const values = decodeU8a(registry, u8a.subarray(offset), types);\n\n  for (let i = 0; i < values.length; i++) {\n    output.add(values[i]);\n  }\n\n  return output;\n}\n/** @internal */\n\n\nfunction decodeSetFromSet(registry, ValClass, value) {\n  const output = new Set();\n  value.forEach(val => {\n    try {\n      output.add(val instanceof ValClass ? val : new ValClass(registry, val));\n    } catch (error) {\n      l.error('Failed to decode key or value:', error.message);\n      throw error;\n    }\n  });\n  return output;\n}\n/**\n * Decode input to pass into constructor.\n *\n * @param ValClass - Type of the map value\n * @param value - Value to decode, one of:\n * - null\n * - undefined\n * - hex\n * - Uint8Array\n * - Set<any>, where both key and value types are either\n *   constructors or decodeable values for their types.\n * @param jsonSet\n * @internal\n */\n\n\nfunction decodeSet(registry, valType, value) {\n  if (!value) {\n    return new Set();\n  }\n\n  const ValClass = typeToConstructor(registry, valType);\n\n  if (isHex(value) || isU8a(value)) {\n    return decodeSetFromU8a(registry, ValClass, u8aToU8a(value));\n  } else if (Array.isArray(value) || value instanceof Set) {\n    return decodeSetFromSet(registry, ValClass, value);\n  }\n\n  throw new Error('BTreeSet: cannot decode type');\n}\n\nvar _ValClass = /*#__PURE__*/_classPrivateFieldLooseKey(\"ValClass\");\n\nexport class BTreeSet extends Set {\n  constructor(registry, valType, rawValue) {\n    super(sortSet(decodeSet(registry, valType, rawValue)));\n    this.registry = void 0;\n    this.createdAtHash = void 0;\n    Object.defineProperty(this, _ValClass, {\n      writable: true,\n      value: void 0\n    });\n    this.registry = registry;\n    _classPrivateFieldLooseBase(this, _ValClass)[_ValClass] = typeToConstructor(registry, valType);\n  }\n\n  static with(valType) {\n    return class extends BTreeSet {\n      constructor(registry, value) {\n        super(registry, valType, value);\n      }\n\n    };\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    let len = compactToU8a(this.size).length;\n    this.forEach(v => {\n      len += v.encodedLength;\n    });\n    return len;\n  }\n  /**\n   * @description Returns a hash of the value\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return this.size === 0;\n  }\n  /**\n   * @description The actual set values as a string[]\n   */\n\n\n  get strings() {\n    return [...super.values()].map(v => v.toString());\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return compareSet(this, other);\n  }\n  /**\n   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n   */\n\n\n  toHex() {\n    return u8aToHex(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    const json = [];\n    this.forEach(v => {\n      json.push(v.toHuman(isExtended));\n    });\n    return json;\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    const json = [];\n    this.forEach(v => {\n      json.push(v.toJSON());\n    });\n    return json;\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `BTreeSet<${this.registry.getClassName(_classPrivateFieldLooseBase(this, _ValClass)[_ValClass]) || new (_classPrivateFieldLooseBase(this, _ValClass)[_ValClass])(this.registry).toRawType()}>`;\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return stringify(this.toJSON());\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    const encoded = new Array();\n\n    if (!isBare) {\n      encoded.push(compactToU8a(this.size));\n    }\n\n    this.forEach(v => {\n      encoded.push(v.toU8a(isBare));\n    });\n    return u8aConcat(...encoded);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}