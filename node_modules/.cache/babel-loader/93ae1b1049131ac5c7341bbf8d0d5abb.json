{"ast":null,"code":"import _classCallCheck from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isAscii, isUndefined, isUtf8, u8aToHex, u8aToString, u8aToU8a } from '@polkadot/util';\n/**\n * @name Raw\n * @description\n * A basic wrapper around Uint8Array, with no frills and no fuss. It does differ\n * from other implementations where it will consume the full Uint8Array as passed to it.\n * As such it is meant to be subclassed where the wrapper takes care of the\n * actual lengths instead of used directly.\n * @noInheritDoc\n */\n\nexport var Raw = /*#__PURE__*/function (_Uint8Array) {\n  _inherits(Raw, _Uint8Array);\n\n  var _super = _createSuper(Raw);\n\n  function Raw(registry, value) {\n    var _this;\n\n    _classCallCheck(this, Raw);\n\n    _this = _super.call(this, u8aToU8a(value));\n    _this.registry = void 0;\n    _this.createdAtHash = void 0;\n    _this.registry = registry;\n    return _this;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  _createClass(Raw, [{\n    key: \"encodedLength\",\n    get: function get() {\n      return this.length;\n    }\n    /**\n     * @description returns a hash of the contents\n     */\n\n  }, {\n    key: \"hash\",\n    get: function get() {\n      return this.registry.hash(this.toU8a());\n    }\n    /**\n     * @description Returns true if the wrapped value contains only ASCII printable characters\n     */\n\n  }, {\n    key: \"isAscii\",\n    get: function get() {\n      return isAscii(this);\n    }\n    /**\n     * @description Returns true if the type wraps an empty/default all-0 value\n     */\n\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return !this.length || isUndefined(this.find(function (value) {\n        return !!value;\n      }));\n    }\n    /**\n     * @description Returns true if the wrapped value contains only utf8 characters\n     */\n\n  }, {\n    key: \"isUtf8\",\n    get: function get() {\n      return isUtf8(this);\n    }\n    /**\n     * @description The length of the value\n     */\n\n  }, {\n    key: \"length\",\n    get: function get() {\n      // only included here since we ignore inherited docs\n      return _get(_getPrototypeOf(Raw.prototype), \"length\", this);\n    }\n    /**\n     * @description Returns the number of bits in the value\n     */\n\n  }, {\n    key: \"bitLength\",\n    value: function bitLength() {\n      return this.length * 8;\n    }\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      if (other instanceof Uint8Array) {\n        return this.length === other.length && !this.some(function (value, index) {\n          return value !== other[index];\n        });\n      }\n\n      return this.eq(u8aToU8a(other));\n    }\n    /**\n     * @description Create a new slice from the actual buffer. (compat)\n     * @param start The position to start at\n     * @param end The position to end at\n     */\n\n  }, {\n    key: \"slice\",\n    value: function slice(start, end) {\n      // Like subarray below, we have to follow this approach since we are extending the TypeArray.\n      // This happens especially when it comes to further extensions, the length may be an override\n      return Uint8Array.from(this).slice(start, end);\n    }\n    /**\n     * @description Create a new subarray from the actual buffer. (compat)\n     * @param begin The position to start at\n     * @param end The position to end at\n     */\n\n  }, {\n    key: \"subarray\",\n    value: function subarray(begin, end) {\n      return Uint8Array.from(this).subarray(begin, end);\n    }\n    /**\n     * @description Returns a hex string representation of the value\n     */\n\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return u8aToHex(this);\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman() {\n      return this.isAscii ? this.toUtf8() : this.toJSON();\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toHex();\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return 'Raw';\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.toHex();\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"toU8a\",\n    value: function toU8a(isBare) {\n      return Uint8Array.from(this);\n    }\n    /**\n     * @description Returns the wrapped data as a UTF-8 string\n     */\n\n  }, {\n    key: \"toUtf8\",\n    value: function toUtf8() {\n      assert(this.isUtf8, 'The character sequence is not a valid Utf8 string');\n      return u8aToString(this);\n    }\n  }]);\n\n  return Raw;\n}( /*#__PURE__*/_wrapNativeSuper(Uint8Array));","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types/codec/Raw.js"],"names":["assert","isAscii","isUndefined","isUtf8","u8aToHex","u8aToString","u8aToU8a","Raw","registry","value","createdAtHash","length","hash","toU8a","find","other","Uint8Array","some","index","eq","start","end","from","slice","begin","subarray","toUtf8","toJSON","toHex","isBare"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isAscii, isUndefined, isUtf8, u8aToHex, u8aToString, u8aToU8a } from '@polkadot/util';\n/**\n * @name Raw\n * @description\n * A basic wrapper around Uint8Array, with no frills and no fuss. It does differ\n * from other implementations where it will consume the full Uint8Array as passed to it.\n * As such it is meant to be subclassed where the wrapper takes care of the\n * actual lengths instead of used directly.\n * @noInheritDoc\n */\n\nexport class Raw extends Uint8Array {\n  constructor(registry, value) {\n    super(u8aToU8a(value));\n    this.registry = void 0;\n    this.createdAtHash = void 0;\n    this.registry = registry;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Returns true if the wrapped value contains only ASCII printable characters\n   */\n\n\n  get isAscii() {\n    return isAscii(this);\n  }\n  /**\n   * @description Returns true if the type wraps an empty/default all-0 value\n   */\n\n\n  get isEmpty() {\n    return !this.length || isUndefined(this.find(value => !!value));\n  }\n  /**\n   * @description Returns true if the wrapped value contains only utf8 characters\n   */\n\n\n  get isUtf8() {\n    return isUtf8(this);\n  }\n  /**\n   * @description The length of the value\n   */\n\n\n  get length() {\n    // only included here since we ignore inherited docs\n    return super.length;\n  }\n  /**\n   * @description Returns the number of bits in the value\n   */\n\n\n  bitLength() {\n    return this.length * 8;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    if (other instanceof Uint8Array) {\n      return this.length === other.length && !this.some((value, index) => value !== other[index]);\n    }\n\n    return this.eq(u8aToU8a(other));\n  }\n  /**\n   * @description Create a new slice from the actual buffer. (compat)\n   * @param start The position to start at\n   * @param end The position to end at\n   */\n\n\n  slice(start, end) {\n    // Like subarray below, we have to follow this approach since we are extending the TypeArray.\n    // This happens especially when it comes to further extensions, the length may be an override\n    return Uint8Array.from(this).slice(start, end);\n  }\n  /**\n   * @description Create a new subarray from the actual buffer. (compat)\n   * @param begin The position to start at\n   * @param end The position to end at\n   */\n\n\n  subarray(begin, end) {\n    return Uint8Array.from(this).subarray(begin, end);\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return u8aToHex(this);\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.isAscii ? this.toUtf8() : this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toHex();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Raw';\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return this.toHex();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    return Uint8Array.from(this);\n  }\n  /**\n   * @description Returns the wrapped data as a UTF-8 string\n   */\n\n\n  toUtf8() {\n    assert(this.isUtf8, 'The character sequence is not a valid Utf8 string');\n    return u8aToString(this);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}