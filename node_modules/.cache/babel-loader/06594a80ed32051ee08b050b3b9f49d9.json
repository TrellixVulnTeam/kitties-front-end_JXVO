{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nvar BOUNDED = ['BTreeMap', 'BTreeSet', 'HashMap', 'Vec'];\nvar ALLOWED_BOXES = BOUNDED.concat(['Compact', 'DoNotConstruct', 'Int', 'Linkage', 'Range', 'RangeInclusive', 'Result', 'Option', 'UInt']);\nvar BOX_PRECEDING = ['<', '(', '[', '\"', ',', ' ']; // start of vec, tuple, fixed array, part of struct def or in tuple\n\nvar mappings = [// alias <T::InherentOfflineReport as InherentOfflineReport>::Inherent -> InherentOfflineReport\nalias('<T::InherentOfflineReport as InherentOfflineReport>::Inherent', 'InherentOfflineReport', false), alias('VecDeque<', 'Vec<', false), // <T::Balance as HasCompact>\ncleanupCompact(), // Change BoundedVec<Type, Size> to Vec<Type>\nremoveExtensions('Bounded', true), // Change WeakVec<Type> to Vec<Type>\nremoveExtensions('Weak', false), // Remove all the trait prefixes\nremoveTraits(), // remove PairOf<T> -> (T, T)\nremovePairOf(), // remove boxing, `Box<Proposal>` -> `Proposal`\nremoveWrap('Box<'), // remove generics, `MisbehaviorReport<Hash, BlockNumber>` -> `MisbehaviorReport`\nremoveGenerics(), // alias String -> Text (compat with jsonrpc methods)\nalias('String', 'Text'), // alias Vec<u8> -> Bytes\nalias('Vec<u8>', 'Bytes'), alias('&\\\\[u8\\\\]', 'Bytes'), alias(\"&'static\\\\[u8\\\\]\", 'Bytes'), // alias RawAddress -> Address\nalias('RawAddress', 'Address'), // lookups, mapped to Address/AccountId as appropriate in runtime\nalias('Lookup::Source', 'LookupSource'), alias('Lookup::Target', 'LookupTarget'), // HACK duplication between contracts & primitives, however contracts prefixed with exec\nalias('exec::StorageKey', 'ContractStorageKey'), // flattens tuples with one value, `(AccountId)` -> `AccountId`\nflattenSingleTuple(), // converts ::Type to Type, <T as Trait<I>>::Proposal -> Proposal\nremoveColons()]; // given a starting index, find the closing >\n\nexport function findClosing(value, start) {\n  var depth = 0;\n\n  for (var index = start; index < value.length; index++) {\n    if (value[index] === '>') {\n      if (!depth) {\n        return index;\n      }\n\n      depth--;\n    } else if (value[index] === '<') {\n      depth++;\n    }\n  }\n\n  throw new Error(\"Unable to find closing matching <> on '\".concat(value, \"' (start \").concat(start, \")\"));\n}\nexport function alias(src, dest) {\n  var withChecks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return function (value) {\n    return value.replace(new RegExp(\"(^\".concat(src, \"|\").concat(BOX_PRECEDING.map(function (box) {\n      return \"\\\\\".concat(box).concat(src);\n    }).join('|'), \")\"), 'g'), function (src) {\n      return withChecks && BOX_PRECEDING.includes(src[0]) ? \"\".concat(src[0]).concat(dest) : dest;\n    });\n  };\n}\nexport function cleanupCompact() {\n  return function (value) {\n    for (var index = 0; index < value.length; index++) {\n      if (value[index] === '<') {\n        var end = findClosing(value, index + 1) - 14;\n\n        if (value.substr(end, 14) === ' as HasCompact') {\n          value = \"Compact<\".concat(value.substr(index + 1, end - index - 1), \">\");\n        }\n      }\n    }\n\n    return value;\n  };\n}\nexport function flattenSingleTuple() {\n  return function (value) {\n    return value // tuples may have trailing commas, e.g. (u32, BlockNumber, )\n    .replace(/,\\)/g, ')') // change (u32) -> u32\n    .replace(/\\(([^,]+)\\)/, '$1');\n  };\n}\n\nfunction replaceTagWith(value, matcher, replacer) {\n  var index = -1;\n\n  while (true) {\n    index = value.indexOf(matcher, index + 1);\n\n    if (index === -1) {\n      return value;\n    }\n\n    var start = index + matcher.length;\n    var end = findClosing(value, start);\n    value = \"\".concat(value.substr(0, index)).concat(replacer(value.substr(start, end - start))).concat(value.substr(end + 1));\n  }\n} // remove the Bounded* or Weak* wrappers\n\n\nexport function removeExtensions(type, isSized) {\n  return function (value) {\n    return BOUNDED.reduce(function (value, tag) {\n      return replaceTagWith(value, \"\".concat(type).concat(tag, \"<\"), function (inner) {\n        var parts = inner.split(',').map(function (s) {\n          return s.trim();\n        }).filter(function (s) {\n          return s;\n        });\n\n        if (isSized) {\n          parts.pop();\n        }\n\n        return \"\".concat(tag, \"<\").concat(parts.join(','), \">\");\n      });\n    }, value);\n  };\n}\nexport function removeColons() {\n  return function (value) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        allowNamespaces = _ref.allowNamespaces;\n\n    var index = 0;\n\n    while (index !== -1) {\n      index = value.indexOf('::');\n\n      if (index === 0) {\n        value = value.substr(2);\n      } else if (index !== -1) {\n        if (allowNamespaces) {\n          return value;\n        }\n\n        var start = index;\n\n        while (start !== -1 && !BOX_PRECEDING.includes(value[start])) {\n          start--;\n        }\n\n        value = \"\".concat(value.substr(0, start + 1)).concat(value.substr(index + 2));\n      }\n    }\n\n    return value;\n  };\n}\nexport function removeGenerics() {\n  return function (value) {\n    var _loop = function _loop(index) {\n      if (value[index] === '<') {\n        // check against the allowed wrappers, be it Vec<..>, Option<...> ...\n        var box = ALLOWED_BOXES.find(function (box) {\n          var start = index - box.length;\n          return start >= 0 && value.substr(start, box.length) === box && ( // make sure it is stand-alone, i.e. don't catch ElectionResult<...> as Result<...>\n          start === 0 || BOX_PRECEDING.includes(value[start - 1]));\n        }); // we have not found anything, unwrap generic innards\n\n        if (!box) {\n          var end = findClosing(value, index + 1);\n          value = \"\".concat(value.substr(0, index)).concat(value.substr(end + 1));\n        }\n      }\n    };\n\n    for (var index = 0; index < value.length; index++) {\n      _loop(index);\n    }\n\n    return value;\n  };\n} // remove the PairOf wrappers\n\nexport function removePairOf() {\n  var replacer = function replacer(inner) {\n    return \"(\".concat(inner, \",\").concat(inner, \")\");\n  };\n\n  return function (value) {\n    return replaceTagWith(value, 'PairOf<', replacer);\n  };\n} // remove the type traits\n\nexport function removeTraits() {\n  return function (value) {\n    return value // remove all whitespaces\n    .replace(/\\s/g, '') // anything `T::<type>` to end up as `<type>`\n    .replace(/(T|Self)::/g, '') // replace `<T as Trait>::` (whitespaces were removed above)\n    .replace(/<(T|Self)asTrait>::/g, '') // replace `<T as something::Trait>::` (whitespaces were removed above)\n    .replace(/<Tas[a-z]+::Trait>::/g, '') // replace <Lookup as StaticLookup>\n    .replace(/<LookupasStaticLookup>/g, 'Lookup') // replace `<...>::Type`\n    .replace(/::Type/g, '');\n  };\n} // remove wrapping values, i.e. Box<Proposal> -> Proposal\n\nexport function removeWrap(check) {\n  var replacer = function replacer(inner) {\n    return inner;\n  };\n\n  return function (value) {\n    return replaceTagWith(value, check, replacer);\n  };\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\nexport function sanitize(value, options) {\n  return mappings.reduce(function (result, fn) {\n    return fn(result, options);\n  }, value.toString()).trim();\n}","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types/create/sanitize.js"],"names":["BOUNDED","ALLOWED_BOXES","concat","BOX_PRECEDING","mappings","alias","cleanupCompact","removeExtensions","removeTraits","removePairOf","removeWrap","removeGenerics","flattenSingleTuple","removeColons","findClosing","value","start","depth","index","length","Error","src","dest","withChecks","replace","RegExp","map","box","join","includes","end","substr","replaceTagWith","matcher","replacer","indexOf","type","isSized","reduce","tag","inner","parts","split","s","trim","filter","pop","allowNamespaces","find","check","sanitize","options","result","fn","toString"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst BOUNDED = ['BTreeMap', 'BTreeSet', 'HashMap', 'Vec'];\nconst ALLOWED_BOXES = BOUNDED.concat(['Compact', 'DoNotConstruct', 'Int', 'Linkage', 'Range', 'RangeInclusive', 'Result', 'Option', 'UInt']);\nconst BOX_PRECEDING = ['<', '(', '[', '\"', ',', ' ']; // start of vec, tuple, fixed array, part of struct def or in tuple\n\nconst mappings = [// alias <T::InherentOfflineReport as InherentOfflineReport>::Inherent -> InherentOfflineReport\nalias('<T::InherentOfflineReport as InherentOfflineReport>::Inherent', 'InherentOfflineReport', false), alias('VecDeque<', 'Vec<', false), // <T::Balance as HasCompact>\ncleanupCompact(), // Change BoundedVec<Type, Size> to Vec<Type>\nremoveExtensions('Bounded', true), // Change WeakVec<Type> to Vec<Type>\nremoveExtensions('Weak', false), // Remove all the trait prefixes\nremoveTraits(), // remove PairOf<T> -> (T, T)\nremovePairOf(), // remove boxing, `Box<Proposal>` -> `Proposal`\nremoveWrap('Box<'), // remove generics, `MisbehaviorReport<Hash, BlockNumber>` -> `MisbehaviorReport`\nremoveGenerics(), // alias String -> Text (compat with jsonrpc methods)\nalias('String', 'Text'), // alias Vec<u8> -> Bytes\nalias('Vec<u8>', 'Bytes'), alias('&\\\\[u8\\\\]', 'Bytes'), alias(\"&'static\\\\[u8\\\\]\", 'Bytes'), // alias RawAddress -> Address\nalias('RawAddress', 'Address'), // lookups, mapped to Address/AccountId as appropriate in runtime\nalias('Lookup::Source', 'LookupSource'), alias('Lookup::Target', 'LookupTarget'), // HACK duplication between contracts & primitives, however contracts prefixed with exec\nalias('exec::StorageKey', 'ContractStorageKey'), // flattens tuples with one value, `(AccountId)` -> `AccountId`\nflattenSingleTuple(), // converts ::Type to Type, <T as Trait<I>>::Proposal -> Proposal\nremoveColons()]; // given a starting index, find the closing >\n\nexport function findClosing(value, start) {\n  let depth = 0;\n\n  for (let index = start; index < value.length; index++) {\n    if (value[index] === '>') {\n      if (!depth) {\n        return index;\n      }\n\n      depth--;\n    } else if (value[index] === '<') {\n      depth++;\n    }\n  }\n\n  throw new Error(`Unable to find closing matching <> on '${value}' (start ${start})`);\n}\nexport function alias(src, dest, withChecks = true) {\n  return value => value.replace(new RegExp(`(^${src}|${BOX_PRECEDING.map(box => `\\\\${box}${src}`).join('|')})`, 'g'), src => withChecks && BOX_PRECEDING.includes(src[0]) ? `${src[0]}${dest}` : dest);\n}\nexport function cleanupCompact() {\n  return value => {\n    for (let index = 0; index < value.length; index++) {\n      if (value[index] === '<') {\n        const end = findClosing(value, index + 1) - 14;\n\n        if (value.substr(end, 14) === ' as HasCompact') {\n          value = `Compact<${value.substr(index + 1, end - index - 1)}>`;\n        }\n      }\n    }\n\n    return value;\n  };\n}\nexport function flattenSingleTuple() {\n  return value => value // tuples may have trailing commas, e.g. (u32, BlockNumber, )\n  .replace(/,\\)/g, ')') // change (u32) -> u32\n  .replace(/\\(([^,]+)\\)/, '$1');\n}\n\nfunction replaceTagWith(value, matcher, replacer) {\n  let index = -1;\n\n  while (true) {\n    index = value.indexOf(matcher, index + 1);\n\n    if (index === -1) {\n      return value;\n    }\n\n    const start = index + matcher.length;\n    const end = findClosing(value, start);\n    value = `${value.substr(0, index)}${replacer(value.substr(start, end - start))}${value.substr(end + 1)}`;\n  }\n} // remove the Bounded* or Weak* wrappers\n\n\nexport function removeExtensions(type, isSized) {\n  return value => BOUNDED.reduce((value, tag) => replaceTagWith(value, `${type}${tag}<`, inner => {\n    const parts = inner.split(',').map(s => s.trim()).filter(s => s);\n\n    if (isSized) {\n      parts.pop();\n    }\n\n    return `${tag}<${parts.join(',')}>`;\n  }), value);\n}\nexport function removeColons() {\n  return (value, {\n    allowNamespaces\n  } = {}) => {\n    let index = 0;\n\n    while (index !== -1) {\n      index = value.indexOf('::');\n\n      if (index === 0) {\n        value = value.substr(2);\n      } else if (index !== -1) {\n        if (allowNamespaces) {\n          return value;\n        }\n\n        let start = index;\n\n        while (start !== -1 && !BOX_PRECEDING.includes(value[start])) {\n          start--;\n        }\n\n        value = `${value.substr(0, start + 1)}${value.substr(index + 2)}`;\n      }\n    }\n\n    return value;\n  };\n}\nexport function removeGenerics() {\n  return value => {\n    for (let index = 0; index < value.length; index++) {\n      if (value[index] === '<') {\n        // check against the allowed wrappers, be it Vec<..>, Option<...> ...\n        const box = ALLOWED_BOXES.find(box => {\n          const start = index - box.length;\n          return start >= 0 && value.substr(start, box.length) === box && ( // make sure it is stand-alone, i.e. don't catch ElectionResult<...> as Result<...>\n          start === 0 || BOX_PRECEDING.includes(value[start - 1]));\n        }); // we have not found anything, unwrap generic innards\n\n        if (!box) {\n          const end = findClosing(value, index + 1);\n          value = `${value.substr(0, index)}${value.substr(end + 1)}`;\n        }\n      }\n    }\n\n    return value;\n  };\n} // remove the PairOf wrappers\n\nexport function removePairOf() {\n  const replacer = inner => `(${inner},${inner})`;\n\n  return value => replaceTagWith(value, 'PairOf<', replacer);\n} // remove the type traits\n\nexport function removeTraits() {\n  return value => value // remove all whitespaces\n  .replace(/\\s/g, '') // anything `T::<type>` to end up as `<type>`\n  .replace(/(T|Self)::/g, '') // replace `<T as Trait>::` (whitespaces were removed above)\n  .replace(/<(T|Self)asTrait>::/g, '') // replace `<T as something::Trait>::` (whitespaces were removed above)\n  .replace(/<Tas[a-z]+::Trait>::/g, '') // replace <Lookup as StaticLookup>\n  .replace(/<LookupasStaticLookup>/g, 'Lookup') // replace `<...>::Type`\n  .replace(/::Type/g, '');\n} // remove wrapping values, i.e. Box<Proposal> -> Proposal\n\nexport function removeWrap(check) {\n  const replacer = inner => inner;\n\n  return value => replaceTagWith(value, check, replacer);\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\nexport function sanitize(value, options) {\n  return mappings.reduce((result, fn) => fn(result, options), value.toString()).trim();\n}"]},"metadata":{},"sourceType":"module"}