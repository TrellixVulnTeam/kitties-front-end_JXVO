{"ast":null,"code":"import _slicedToArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, startWith, switchMap } from 'rxjs';\nimport { drr, memo } from \"../util/index.js\";\n\nfunction onBondedEvent(api) {\n  var current = Date.now();\n  return api.query.system.events().pipe(map(function (events) {\n    current = events.filter(function (_ref) {\n      var event = _ref.event,\n          phase = _ref.phase;\n\n      try {\n        return phase.isApplyExtrinsic && event.section === 'staking' && event.method === 'Bonded';\n      } catch (_unused) {\n        return false;\n      }\n    }) ? Date.now() : current;\n    return current;\n  }), startWith(current), drr({\n    skipTimeout: true\n  }));\n}\n/**\n * @description Retrieve the list of all validator stashes\n */\n\n\nexport function stashes(instanceId, api) {\n  return memo(instanceId, function () {\n    return onBondedEvent(api).pipe(switchMap(function () {\n      return api.query.staking.validators.keys();\n    }), map(function (keys) {\n      return keys.map(function (_ref2) {\n        var _ref2$args = _slicedToArray(_ref2.args, 1),\n            validatorId = _ref2$args[0];\n\n        return validatorId;\n      }).filter(function (a) {\n        return a;\n      });\n    }));\n  });\n}","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/api-derive/staking/stashes.js"],"names":["map","startWith","switchMap","drr","memo","onBondedEvent","api","current","Date","now","query","system","events","pipe","filter","event","phase","isApplyExtrinsic","section","method","skipTimeout","stashes","instanceId","staking","validators","keys","args","validatorId","a"],"mappings":";AAAA;AACA;AACA,SAASA,GAAT,EAAcC,SAAd,EAAyBC,SAAzB,QAA0C,MAA1C;AACA,SAASC,GAAT,EAAcC,IAAd,QAA0B,kBAA1B;;AAEA,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AAC1B,MAAIC,OAAO,GAAGC,IAAI,CAACC,GAAL,EAAd;AACA,SAAOH,GAAG,CAACI,KAAJ,CAAUC,MAAV,CAAiBC,MAAjB,GAA0BC,IAA1B,CAA+Bb,GAAG,CAAC,UAAAY,MAAM,EAAI;AAClDL,IAAAA,OAAO,GAAGK,MAAM,CAACE,MAAP,CAAc,gBAGlB;AAAA,UAFJC,KAEI,QAFJA,KAEI;AAAA,UADJC,KACI,QADJA,KACI;;AACJ,UAAI;AACF,eAAOA,KAAK,CAACC,gBAAN,IAA0BF,KAAK,CAACG,OAAN,KAAkB,SAA5C,IAAyDH,KAAK,CAACI,MAAN,KAAiB,QAAjF;AACD,OAFD,CAEE,gBAAM;AACN,eAAO,KAAP;AACD;AACF,KATS,IASLX,IAAI,CAACC,GAAL,EATK,GASQF,OATlB;AAUA,WAAOA,OAAP;AACD,GAZwC,CAAlC,EAYHN,SAAS,CAACM,OAAD,CAZN,EAYiBJ,GAAG,CAAC;AAC1BiB,IAAAA,WAAW,EAAE;AADa,GAAD,CAZpB,CAAP;AAeD;AACD;AACA;AACA;;;AAGA,OAAO,SAASC,OAAT,CAAiBC,UAAjB,EAA6BhB,GAA7B,EAAkC;AACvC,SAAOF,IAAI,CAACkB,UAAD,EAAa;AAAA,WAAMjB,aAAa,CAACC,GAAD,CAAb,CAAmBO,IAAnB,CAAwBX,SAAS,CAAC;AAAA,aAAMI,GAAG,CAACI,KAAJ,CAAUa,OAAV,CAAkBC,UAAlB,CAA6BC,IAA7B,EAAN;AAAA,KAAD,CAAjC,EAA8EzB,GAAG,CAAC,UAAAyB,IAAI;AAAA,aAAIA,IAAI,CAACzB,GAAL,CAAS;AAAA,8CAC/H0B,IAD+H;AAAA,YACxHC,WADwH;;AAAA,eAE3HA,WAF2H;AAAA,OAAT,EAErGb,MAFqG,CAE9F,UAAAc,CAAC;AAAA,eAAIA,CAAJ;AAAA,OAF6F,CAAJ;AAAA,KAAL,CAAjF,CAAN;AAAA,GAAb,CAAX;AAGD","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, startWith, switchMap } from 'rxjs';\nimport { drr, memo } from \"../util/index.js\";\n\nfunction onBondedEvent(api) {\n  let current = Date.now();\n  return api.query.system.events().pipe(map(events => {\n    current = events.filter(({\n      event,\n      phase\n    }) => {\n      try {\n        return phase.isApplyExtrinsic && event.section === 'staking' && event.method === 'Bonded';\n      } catch {\n        return false;\n      }\n    }) ? Date.now() : current;\n    return current;\n  }), startWith(current), drr({\n    skipTimeout: true\n  }));\n}\n/**\n * @description Retrieve the list of all validator stashes\n */\n\n\nexport function stashes(instanceId, api) {\n  return memo(instanceId, () => onBondedEvent(api).pipe(switchMap(() => api.query.staking.validators.keys()), map(keys => keys.map(({\n    args: [validatorId]\n  }) => validatorId).filter(a => a))));\n}"]},"metadata":{},"sourceType":"module"}