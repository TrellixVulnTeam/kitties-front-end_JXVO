{"ast":null,"code":"import _classCallCheck from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, hexToU8a, isHex, isString, isU8a, u8aToU8a } from '@polkadot/util';\nimport { decodeAddress, encodeAddress } from '@polkadot/util-crypto';\nimport { U8aFixed } from \"../codec/U8aFixed.js\";\n/** @internal */\n\nfunction decodeAccountId(value) {\n  if (!value) {\n    return new Uint8Array();\n  } else if (isU8a(value) || Array.isArray(value)) {\n    return u8aToU8a(value);\n  } else if (isHex(value)) {\n    return hexToU8a(value);\n  } else if (isString(value)) {\n    return decodeAddress(value);\n  }\n\n  throw new Error(\"Unknown type passed to AccountId constructor, found typeof \".concat(typeof value));\n}\n/**\n * @name GenericAccountId\n * @description\n * A wrapper around an AccountId/PublicKey representation. Since we are dealing with\n * underlying PublicKeys (32 bytes in length), we extend from U8aFixed which is\n * just a Uint8Array wrapper with a fixed length.\n */\n\n\nexport var GenericAccountId = /*#__PURE__*/function (_U8aFixed) {\n  _inherits(GenericAccountId, _U8aFixed);\n\n  var _super = _createSuper(GenericAccountId);\n\n  function GenericAccountId(registry, value) {\n    _classCallCheck(this, GenericAccountId);\n\n    var decoded = decodeAccountId(value); // Part of stream containing >= 32 bytes or a all empty (defaults)\n\n    assert(decoded.length >= 32 || !decoded.some(function (b) {\n      return b;\n    }), function () {\n      return \"Invalid AccountId provided, expected 32 bytes, found \".concat(decoded.length);\n    });\n    return _super.call(this, registry, decoded, 256);\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  _createClass(GenericAccountId, [{\n    key: \"eq\",\n    value: function eq(other) {\n      return _get(_getPrototypeOf(GenericAccountId.prototype), \"eq\", this).call(this, decodeAccountId(other));\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman() {\n      return this.toJSON();\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return encodeAddress(this, this.registry.chainSS58);\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return 'AccountId';\n    }\n  }]);\n\n  return GenericAccountId;\n}(U8aFixed);","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types/generic/AccountId.js"],"names":["assert","hexToU8a","isHex","isString","isU8a","u8aToU8a","decodeAddress","encodeAddress","U8aFixed","decodeAccountId","value","Uint8Array","Array","isArray","Error","GenericAccountId","registry","decoded","length","some","b","other","toJSON","toString","chainSS58"],"mappings":";;;;;;AAAA;AACA;AACA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,KAA3B,EAAkCC,QAAlC,EAA4CC,KAA5C,EAAmDC,QAAnD,QAAmE,gBAAnE;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,uBAA7C;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,MAAI,CAACA,KAAL,EAAY;AACV,WAAO,IAAIC,UAAJ,EAAP;AACD,GAFD,MAEO,IAAIP,KAAK,CAACM,KAAD,CAAL,IAAgBE,KAAK,CAACC,OAAN,CAAcH,KAAd,CAApB,EAA0C;AAC/C,WAAOL,QAAQ,CAACK,KAAD,CAAf;AACD,GAFM,MAEA,IAAIR,KAAK,CAACQ,KAAD,CAAT,EAAkB;AACvB,WAAOT,QAAQ,CAACS,KAAD,CAAf;AACD,GAFM,MAEA,IAAIP,QAAQ,CAACO,KAAD,CAAZ,EAAqB;AAC1B,WAAOJ,aAAa,CAACI,KAAD,CAApB;AACD;;AAED,QAAM,IAAII,KAAJ,sEAAwE,OAAOJ,KAA/E,EAAN;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,WAAaK,gBAAb;AAAA;;AAAA;;AACE,4BAAYC,QAAZ,EAAsBN,KAAtB,EAA6B;AAAA;;AAC3B,QAAMO,OAAO,GAAGR,eAAe,CAACC,KAAD,CAA/B,CAD2B,CACa;;AAExCV,IAAAA,MAAM,CAACiB,OAAO,CAACC,MAAR,IAAkB,EAAlB,IAAwB,CAACD,OAAO,CAACE,IAAR,CAAa,UAAAC,CAAC;AAAA,aAAIA,CAAJ;AAAA,KAAd,CAA1B,EAAgD;AAAA,4EAA8DH,OAAO,CAACC,MAAtE;AAAA,KAAhD,CAAN;AAH2B,6BAIrBF,QAJqB,EAIXC,OAJW,EAIF,GAJE;AAK5B;AACD;AACF;AACA;;;AATA;AAAA;AAAA,WAYE,YAAGI,KAAH,EAAU;AACR,sFAAgBZ,eAAe,CAACY,KAAD,CAA/B;AACD;AACD;AACF;AACA;;AAjBA;AAAA;AAAA,WAoBE,mBAAU;AACR,aAAO,KAAKC,MAAL,EAAP;AACD;AACD;AACF;AACA;;AAzBA;AAAA;AAAA,WA4BE,kBAAS;AACP,aAAO,KAAKC,QAAL,EAAP;AACD;AACD;AACF;AACA;;AAjCA;AAAA;AAAA,WAoCE,oBAAW;AACT,aAAOhB,aAAa,CAAC,IAAD,EAAO,KAAKS,QAAL,CAAcQ,SAArB,CAApB;AACD;AACD;AACF;AACA;;AAzCA;AAAA;AAAA,WA4CE,qBAAY;AACV,aAAO,WAAP;AACD;AA9CH;;AAAA;AAAA,EAAsChB,QAAtC","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, hexToU8a, isHex, isString, isU8a, u8aToU8a } from '@polkadot/util';\nimport { decodeAddress, encodeAddress } from '@polkadot/util-crypto';\nimport { U8aFixed } from \"../codec/U8aFixed.js\";\n/** @internal */\n\nfunction decodeAccountId(value) {\n  if (!value) {\n    return new Uint8Array();\n  } else if (isU8a(value) || Array.isArray(value)) {\n    return u8aToU8a(value);\n  } else if (isHex(value)) {\n    return hexToU8a(value);\n  } else if (isString(value)) {\n    return decodeAddress(value);\n  }\n\n  throw new Error(`Unknown type passed to AccountId constructor, found typeof ${typeof value}`);\n}\n/**\n * @name GenericAccountId\n * @description\n * A wrapper around an AccountId/PublicKey representation. Since we are dealing with\n * underlying PublicKeys (32 bytes in length), we extend from U8aFixed which is\n * just a Uint8Array wrapper with a fixed length.\n */\n\n\nexport class GenericAccountId extends U8aFixed {\n  constructor(registry, value) {\n    const decoded = decodeAccountId(value); // Part of stream containing >= 32 bytes or a all empty (defaults)\n\n    assert(decoded.length >= 32 || !decoded.some(b => b), () => `Invalid AccountId provided, expected 32 bytes, found ${decoded.length}`);\n    super(registry, decoded, 256);\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return super.eq(decodeAccountId(other));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return encodeAddress(this, this.registry.chainSS58);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'AccountId';\n  }\n\n}"]},"metadata":{},"sourceType":"module"}