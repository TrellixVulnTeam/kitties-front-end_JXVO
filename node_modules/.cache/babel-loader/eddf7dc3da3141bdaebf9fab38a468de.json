{"ast":null,"code":"import _toConsumableArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { compactToU8a, u8aConcat, u8aToHex } from '@polkadot/util';\nimport { compareArray } from \"./utils/compareArray.js\";\n/**\n * @name AbstractArray\n * @description\n * This manages codec arrays. It is an extension to Array, providing\n * specific encoding/decoding on top of the base type.\n * @noInheritDoc\n */\n\nexport var AbstractArray = /*#__PURE__*/function (_Array) {\n  _inherits(AbstractArray, _Array);\n\n  var _super = _createSuper(AbstractArray);\n\n  function AbstractArray(registry) {\n    var _this;\n\n    _classCallCheck(this, AbstractArray);\n\n    for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      values[_key - 1] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(values));\n    _this.registry = void 0;\n    _this.createdAtHash = void 0;\n    _this.registry = registry;\n    return _this;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  _createClass(AbstractArray, [{\n    key: \"encodedLength\",\n    get: function get() {\n      return this.reduce(function (total, entry) {\n        return total + entry.encodedLength;\n      }, compactToU8a(this.length).length);\n    }\n    /**\n     * @description returns a hash of the contents\n     */\n\n  }, {\n    key: \"hash\",\n    get: function get() {\n      return this.registry.hash(this.toU8a());\n    }\n    /**\n     * @description Checks if the value is an empty value\n     */\n\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return this.length === 0;\n    }\n    /**\n     * @description The length of the value\n     */\n\n  }, {\n    key: \"length\",\n    get: function get() {\n      // only included here since we ignore inherited docs\n      return _get(_getPrototypeOf(AbstractArray.prototype), \"length\", this);\n    }\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return compareArray(this, other);\n    }\n    /**\n     * @description Converts the Object to an standard JavaScript Array\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return Array.from(this);\n    }\n    /**\n     * @description Returns a hex string representation of the value\n     */\n\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return u8aToHex(this.toU8a());\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman(isExtended) {\n      return this.map(function (entry) {\n        return entry.toHuman(isExtended);\n      });\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.map(function (entry) {\n        return entry.toJSON();\n      });\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      // Overwrite the default toString representation of Array.\n      var data = this.map(function (entry) {\n        return entry.toString();\n      });\n      return \"[\".concat(data.join(', '), \"]\");\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\n     */\n\n  }, {\n    key: \"toU8a\",\n    value: function toU8a(isBare) {\n      var encoded = this.map(function (entry) {\n        return entry.toU8a(isBare);\n      });\n      return isBare ? u8aConcat.apply(void 0, _toConsumableArray(encoded)) : u8aConcat.apply(void 0, [compactToU8a(this.length)].concat(_toConsumableArray(encoded)));\n    } // Below are methods that we override. When we do a `new Vec(...).map()`,\n    // we want it to return an Array. We only override the methods that return a\n    // new instance.\n\n    /**\n     * @description Concatenates two arrays\n     */\n\n  }, {\n    key: \"concat\",\n    value: function concat(other) {\n      return this.toArray().concat(other instanceof AbstractArray ? other.toArray() : other);\n    }\n    /**\n     * @description Filters the array with the callback\n     */\n\n  }, {\n    key: \"filter\",\n    value: function filter(callbackfn, thisArg) {\n      return this.toArray().filter(callbackfn, thisArg);\n    }\n    /**\n     * @description Maps the array with the callback\n     */\n\n  }, {\n    key: \"map\",\n    value: function map(callbackfn, thisArg) {\n      return this.toArray().map(callbackfn, thisArg);\n    }\n    /**\n     * @description Checks if the array includes a specific value\n     */\n\n  }, {\n    key: \"includes\",\n    value: function includes(check) {\n      return this.some(function (value) {\n        return value.eq(check);\n      });\n    }\n    /**\n     * @description Returns a slice of an array\n     */\n\n  }, {\n    key: \"slice\",\n    value: function slice(start, end) {\n      return this.toArray().slice(start, end);\n    }\n  }]);\n\n  return AbstractArray;\n}( /*#__PURE__*/_wrapNativeSuper(Array));","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types/codec/AbstractArray.js"],"names":["compactToU8a","u8aConcat","u8aToHex","compareArray","AbstractArray","registry","values","createdAtHash","reduce","total","entry","encodedLength","length","hash","toU8a","other","Array","from","isExtended","map","toHuman","toJSON","data","toString","join","isBare","encoded","toArray","concat","callbackfn","thisArg","filter","check","some","value","eq","start","end","slice"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { compactToU8a, u8aConcat, u8aToHex } from '@polkadot/util';\nimport { compareArray } from \"./utils/compareArray.js\";\n/**\n * @name AbstractArray\n * @description\n * This manages codec arrays. It is an extension to Array, providing\n * specific encoding/decoding on top of the base type.\n * @noInheritDoc\n */\n\nexport class AbstractArray extends Array {\n  constructor(registry, ...values) {\n    super(...values);\n    this.registry = void 0;\n    this.createdAtHash = void 0;\n    this.registry = registry;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.reduce((total, entry) => total + entry.encodedLength, compactToU8a(this.length).length);\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return this.length === 0;\n  }\n  /**\n   * @description The length of the value\n   */\n\n\n  get length() {\n    // only included here since we ignore inherited docs\n    return super.length;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return compareArray(this, other);\n  }\n  /**\n   * @description Converts the Object to an standard JavaScript Array\n   */\n\n\n  toArray() {\n    return Array.from(this);\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return u8aToHex(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    return this.map(entry => entry.toHuman(isExtended));\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.map(entry => entry.toJSON());\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  /**\n   * @description Returns the string representation of the value\n   */\n  toString() {\n    // Overwrite the default toString representation of Array.\n    const data = this.map(entry => entry.toString());\n    return `[${data.join(', ')}]`;\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    const encoded = this.map(entry => entry.toU8a(isBare));\n    return isBare ? u8aConcat(...encoded) : u8aConcat(compactToU8a(this.length), ...encoded);\n  } // Below are methods that we override. When we do a `new Vec(...).map()`,\n  // we want it to return an Array. We only override the methods that return a\n  // new instance.\n\n  /**\n   * @description Concatenates two arrays\n   */\n\n\n  concat(other) {\n    return this.toArray().concat(other instanceof AbstractArray ? other.toArray() : other);\n  }\n  /**\n   * @description Filters the array with the callback\n   */\n\n\n  filter(callbackfn, thisArg) {\n    return this.toArray().filter(callbackfn, thisArg);\n  }\n  /**\n   * @description Maps the array with the callback\n   */\n\n\n  map(callbackfn, thisArg) {\n    return this.toArray().map(callbackfn, thisArg);\n  }\n  /**\n   * @description Checks if the array includes a specific value\n   */\n\n\n  includes(check) {\n    return this.some(value => value.eq(check));\n  }\n  /**\n   * @description Returns a slice of an array\n   */\n\n\n  slice(start, end) {\n    return this.toArray().slice(start, end);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}