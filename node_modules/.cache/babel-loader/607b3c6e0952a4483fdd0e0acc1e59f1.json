{"ast":null,"code":"import _classCallCheck from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { BN, bnToBn, isBigInt, isBn, isHex, isNumber, isU8a } from '@polkadot/util';\nimport { decodeAddress, encodeAddress } from '@polkadot/util-crypto';\nimport { u32 } from \"../primitive/U32.js\";\nvar PREFIX_1BYTE = 0xef;\nvar PREFIX_2BYTE = 0xfc;\nvar PREFIX_4BYTE = 0xfd;\nvar PREFIX_8BYTE = 0xfe;\nvar MAX_1BYTE = new BN(PREFIX_1BYTE);\nvar MAX_2BYTE = new BN(1).shln(16);\nvar MAX_4BYTE = new BN(1).shln(32);\n/** @internal */\n\nfunction decodeAccountIndex(value) {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  if (value instanceof GenericAccountIndex) {\n    // `value.toBn()` on AccountIndex returns a pure BN (i.e. not an\n    // AccountIndex), which has the initial `toString()` implementation.\n    return value.toBn();\n  } else if (isBn(value) || isNumber(value) || isHex(value) || isU8a(value) || isBigInt(value)) {\n    return value;\n  }\n\n  return decodeAccountIndex(decodeAddress(value));\n}\n/**\n * @name GenericAccountIndex\n * @description\n * A wrapper around an AccountIndex, which is a shortened, variable-length encoding\n * for an Account. We extends from [[U32]] to provide the number-like properties.\n */\n\n\nexport var GenericAccountIndex = /*#__PURE__*/function (_u) {\n  _inherits(GenericAccountIndex, _u);\n\n  var _super = _createSuper(GenericAccountIndex);\n\n  function GenericAccountIndex(registry) {\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new BN(0);\n\n    _classCallCheck(this, GenericAccountIndex);\n\n    return _super.call(this, registry, decodeAccountIndex(value));\n  }\n\n  _createClass(GenericAccountIndex, [{\n    key: \"eq\",\n    value:\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n    function eq(other) {\n      // shortcut for BN or Number, don't create an object\n      if (isBn(other) || isNumber(other)) {\n        return _get(_getPrototypeOf(GenericAccountIndex.prototype), \"eq\", this).call(this, other);\n      } // convert and compare\n\n\n      return _get(_getPrototypeOf(GenericAccountIndex.prototype), \"eq\", this).call(this, this.registry.createType('AccountIndex', other));\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman() {\n      return this.toJSON();\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var length = GenericAccountIndex.calcLength(this);\n      return encodeAddress(this.toU8a().subarray(0, length), this.registry.chainSS58);\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return 'AccountIndex';\n    }\n  }], [{\n    key: \"calcLength\",\n    value: function calcLength(_value) {\n      var value = bnToBn(_value);\n\n      if (value.lte(MAX_1BYTE)) {\n        return 1;\n      } else if (value.lt(MAX_2BYTE)) {\n        return 2;\n      } else if (value.lt(MAX_4BYTE)) {\n        return 4;\n      }\n\n      return 8;\n    }\n  }, {\n    key: \"readLength\",\n    value: function readLength(input) {\n      var first = input[0];\n\n      if (first === PREFIX_2BYTE) {\n        return [1, 2];\n      } else if (first === PREFIX_4BYTE) {\n        return [1, 4];\n      } else if (first === PREFIX_8BYTE) {\n        return [1, 8];\n      }\n\n      return [0, 1];\n    }\n  }, {\n    key: \"writeLength\",\n    value: function writeLength(input) {\n      switch (input.length) {\n        case 2:\n          return new Uint8Array([PREFIX_2BYTE]);\n\n        case 4:\n          return new Uint8Array([PREFIX_4BYTE]);\n\n        case 8:\n          return new Uint8Array([PREFIX_8BYTE]);\n\n        default:\n          return new Uint8Array([]);\n      }\n    }\n  }]);\n\n  return GenericAccountIndex;\n}(u32);","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types/generic/AccountIndex.js"],"names":["BN","bnToBn","isBigInt","isBn","isHex","isNumber","isU8a","decodeAddress","encodeAddress","u32","PREFIX_1BYTE","PREFIX_2BYTE","PREFIX_4BYTE","PREFIX_8BYTE","MAX_1BYTE","MAX_2BYTE","shln","MAX_4BYTE","decodeAccountIndex","value","GenericAccountIndex","toBn","registry","other","createType","toJSON","toString","length","calcLength","toU8a","subarray","chainSS58","_value","lte","lt","input","first","Uint8Array"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { BN, bnToBn, isBigInt, isBn, isHex, isNumber, isU8a } from '@polkadot/util';\nimport { decodeAddress, encodeAddress } from '@polkadot/util-crypto';\nimport { u32 } from \"../primitive/U32.js\";\nconst PREFIX_1BYTE = 0xef;\nconst PREFIX_2BYTE = 0xfc;\nconst PREFIX_4BYTE = 0xfd;\nconst PREFIX_8BYTE = 0xfe;\nconst MAX_1BYTE = new BN(PREFIX_1BYTE);\nconst MAX_2BYTE = new BN(1).shln(16);\nconst MAX_4BYTE = new BN(1).shln(32);\n/** @internal */\n\nfunction decodeAccountIndex(value) {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  if (value instanceof GenericAccountIndex) {\n    // `value.toBn()` on AccountIndex returns a pure BN (i.e. not an\n    // AccountIndex), which has the initial `toString()` implementation.\n    return value.toBn();\n  } else if (isBn(value) || isNumber(value) || isHex(value) || isU8a(value) || isBigInt(value)) {\n    return value;\n  }\n\n  return decodeAccountIndex(decodeAddress(value));\n}\n/**\n * @name GenericAccountIndex\n * @description\n * A wrapper around an AccountIndex, which is a shortened, variable-length encoding\n * for an Account. We extends from [[U32]] to provide the number-like properties.\n */\n\n\nexport class GenericAccountIndex extends u32 {\n  constructor(registry, value = new BN(0)) {\n    super(registry, decodeAccountIndex(value));\n  }\n\n  static calcLength(_value) {\n    const value = bnToBn(_value);\n\n    if (value.lte(MAX_1BYTE)) {\n      return 1;\n    } else if (value.lt(MAX_2BYTE)) {\n      return 2;\n    } else if (value.lt(MAX_4BYTE)) {\n      return 4;\n    }\n\n    return 8;\n  }\n\n  static readLength(input) {\n    const first = input[0];\n\n    if (first === PREFIX_2BYTE) {\n      return [1, 2];\n    } else if (first === PREFIX_4BYTE) {\n      return [1, 4];\n    } else if (first === PREFIX_8BYTE) {\n      return [1, 8];\n    }\n\n    return [0, 1];\n  }\n\n  static writeLength(input) {\n    switch (input.length) {\n      case 2:\n        return new Uint8Array([PREFIX_2BYTE]);\n\n      case 4:\n        return new Uint8Array([PREFIX_4BYTE]);\n\n      case 8:\n        return new Uint8Array([PREFIX_8BYTE]);\n\n      default:\n        return new Uint8Array([]);\n    }\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    // shortcut for BN or Number, don't create an object\n    if (isBn(other) || isNumber(other)) {\n      return super.eq(other);\n    } // convert and compare\n\n\n    return super.eq(this.registry.createType('AccountIndex', other));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    const length = GenericAccountIndex.calcLength(this);\n    return encodeAddress(this.toU8a().subarray(0, length), this.registry.chainSS58);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'AccountIndex';\n  }\n\n}"]},"metadata":{},"sourceType":"module"}