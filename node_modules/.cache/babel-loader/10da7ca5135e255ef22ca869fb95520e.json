{"ast":null,"code":"import _classCallCheck from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport _slicedToArray from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\"; // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { compactFromU8a, compactToU8a, isHex, isObject, isU8a, logger, stringify, u8aConcat, u8aToHex, u8aToU8a } from '@polkadot/util';\nimport { AbstractArray } from \"./AbstractArray.js\";\nimport { Enum } from \"./Enum.js\";\nimport { Struct } from \"./Struct.js\";\nimport { compareMap, decodeU8a, sortMap, typeToConstructor } from \"./utils/index.js\";\nvar l = logger('Map');\n/** @internal */\n\nfunction decodeMapFromU8a(registry, KeyClass, ValClass, u8a) {\n  var output = new Map();\n\n  var _compactFromU8a = compactFromU8a(u8a),\n      _compactFromU8a2 = _slicedToArray(_compactFromU8a, 2),\n      offset = _compactFromU8a2[0],\n      length = _compactFromU8a2[1];\n\n  var types = [];\n\n  for (var i = 0; i < length.toNumber(); i++) {\n    types.push(KeyClass, ValClass);\n  }\n\n  var values = decodeU8a(registry, u8a.subarray(offset), types);\n\n  for (var _i = 0; _i < values.length; _i += 2) {\n    output.set(values[_i], values[_i + 1]);\n  }\n\n  return output;\n}\n/** @internal */\n\n\nfunction decodeMapFromMap(registry, KeyClass, ValClass, value) {\n  var output = new Map();\n  value.forEach(function (val, key) {\n    var isComplex = KeyClass.prototype instanceof AbstractArray || KeyClass.prototype instanceof Struct || KeyClass.prototype instanceof Enum;\n\n    try {\n      output.set(key instanceof KeyClass ? key : new KeyClass(registry, isComplex ? JSON.parse(key) : key), val instanceof ValClass ? val : new ValClass(registry, val));\n    } catch (error) {\n      l.error('Failed to decode key or value:', error.message);\n      throw error;\n    }\n  });\n  return output;\n}\n/**\n * Decode input to pass into constructor.\n *\n * @param KeyClass - Type of the map key\n * @param ValClass - Type of the map value\n * @param value - Value to decode, one of:\n * - null\n * - undefined\n * - hex\n * - Uint8Array\n * - Map<any, any>, where both key and value types are either\n *   constructors or decodeable values for their types.\n * @param jsonMap\n * @internal\n */\n\n\nfunction decodeMap(registry, keyType, valType, value) {\n  var KeyClass = typeToConstructor(registry, keyType);\n  var ValClass = typeToConstructor(registry, valType);\n\n  if (!value) {\n    return new Map();\n  } else if (isU8a(value) || isHex(value)) {\n    return decodeMapFromU8a(registry, KeyClass, ValClass, u8aToU8a(value));\n  } else if (value instanceof Map) {\n    return decodeMapFromMap(registry, KeyClass, ValClass, value);\n  } else if (isObject(value)) {\n    return decodeMapFromMap(registry, KeyClass, ValClass, new Map(Object.entries(value)));\n  }\n\n  throw new Error('Map: cannot decode type');\n}\n\nvar _KeyClass = /*#__PURE__*/_classPrivateFieldLooseKey(\"KeyClass\");\n\nvar _ValClass = /*#__PURE__*/_classPrivateFieldLooseKey(\"ValClass\");\n\nvar _type = /*#__PURE__*/_classPrivateFieldLooseKey(\"type\");\n\nexport var CodecMap = /*#__PURE__*/function (_Map) {\n  _inherits(CodecMap, _Map);\n\n  var _super = _createSuper(CodecMap);\n\n  function CodecMap(registry, keyType, valType, rawValue) {\n    var _this;\n\n    var type = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'HashMap';\n\n    _classCallCheck(this, CodecMap);\n\n    var decoded = decodeMap(registry, keyType, valType, rawValue);\n    _this = _super.call(this, type === 'BTreeMap' ? sortMap(decoded) : decoded);\n    _this.registry = void 0;\n    _this.createdAtHash = void 0;\n    Object.defineProperty(_assertThisInitialized(_this), _KeyClass, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_assertThisInitialized(_this), _ValClass, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_assertThisInitialized(_this), _type, {\n      writable: true,\n      value: void 0\n    });\n    _this.registry = registry;\n    _classPrivateFieldLooseBase(_assertThisInitialized(_this), _KeyClass)[_KeyClass] = typeToConstructor(registry, keyType);\n    _classPrivateFieldLooseBase(_assertThisInitialized(_this), _ValClass)[_ValClass] = typeToConstructor(registry, valType);\n    _classPrivateFieldLooseBase(_assertThisInitialized(_this), _type)[_type] = type;\n    return _this;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  _createClass(CodecMap, [{\n    key: \"encodedLength\",\n    get: function get() {\n      var len = compactToU8a(this.size).length;\n      this.forEach(function (v, k) {\n        len += v.encodedLength + k.encodedLength;\n      });\n      return len;\n    }\n    /**\n     * @description Returns a hash of the value\n     */\n\n  }, {\n    key: \"hash\",\n    get: function get() {\n      return this.registry.hash(this.toU8a());\n    }\n    /**\n     * @description Checks if the value is an empty value\n     */\n\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return this.size === 0;\n    }\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return compareMap(this, other);\n    }\n    /**\n     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n     */\n\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return u8aToHex(this.toU8a());\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman(isExtended) {\n      var json = {};\n      this.forEach(function (v, k) {\n        json[k.toString()] = v.toHuman(isExtended);\n      });\n      return json;\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var json = {};\n      this.forEach(function (v, k) {\n        json[k.toString()] = v.toJSON();\n      });\n      return json;\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return \"\".concat(_classPrivateFieldLooseBase(this, _type)[_type], \"<\").concat(this.registry.getClassName(_classPrivateFieldLooseBase(this, _KeyClass)[_KeyClass]) || new (_classPrivateFieldLooseBase(this, _KeyClass)[_KeyClass])(this.registry).toRawType(), \",\").concat(this.registry.getClassName(_classPrivateFieldLooseBase(this, _ValClass)[_ValClass]) || new (_classPrivateFieldLooseBase(this, _ValClass)[_ValClass])(this.registry).toRawType(), \">\");\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return stringify(this.toJSON());\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\n     */\n\n  }, {\n    key: \"toU8a\",\n    value: function toU8a(isBare) {\n      var encoded = new Array();\n\n      if (!isBare) {\n        encoded.push(compactToU8a(this.size));\n      }\n\n      this.forEach(function (v, k) {\n        encoded.push(k.toU8a(isBare), v.toU8a(isBare));\n      });\n      return u8aConcat.apply(void 0, encoded);\n    }\n  }]);\n\n  return CodecMap;\n}( /*#__PURE__*/_wrapNativeSuper(Map));","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types/codec/Map.js"],"names":["_classPrivateFieldLooseBase","_classPrivateFieldLooseKey","compactFromU8a","compactToU8a","isHex","isObject","isU8a","logger","stringify","u8aConcat","u8aToHex","u8aToU8a","AbstractArray","Enum","Struct","compareMap","decodeU8a","sortMap","typeToConstructor","l","decodeMapFromU8a","registry","KeyClass","ValClass","u8a","output","Map","offset","length","types","i","toNumber","push","values","subarray","set","decodeMapFromMap","value","forEach","val","key","isComplex","prototype","JSON","parse","error","message","decodeMap","keyType","valType","Object","entries","Error","_KeyClass","_ValClass","_type","CodecMap","rawValue","type","decoded","createdAtHash","defineProperty","writable","len","size","v","k","encodedLength","hash","toU8a","other","isExtended","json","toString","toHuman","toJSON","getClassName","toRawType","isBare","encoded","Array"],"mappings":"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","sourcesContent":["import _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { compactFromU8a, compactToU8a, isHex, isObject, isU8a, logger, stringify, u8aConcat, u8aToHex, u8aToU8a } from '@polkadot/util';\nimport { AbstractArray } from \"./AbstractArray.js\";\nimport { Enum } from \"./Enum.js\";\nimport { Struct } from \"./Struct.js\";\nimport { compareMap, decodeU8a, sortMap, typeToConstructor } from \"./utils/index.js\";\nconst l = logger('Map');\n/** @internal */\n\nfunction decodeMapFromU8a(registry, KeyClass, ValClass, u8a) {\n  const output = new Map();\n  const [offset, length] = compactFromU8a(u8a);\n  const types = [];\n\n  for (let i = 0; i < length.toNumber(); i++) {\n    types.push(KeyClass, ValClass);\n  }\n\n  const values = decodeU8a(registry, u8a.subarray(offset), types);\n\n  for (let i = 0; i < values.length; i += 2) {\n    output.set(values[i], values[i + 1]);\n  }\n\n  return output;\n}\n/** @internal */\n\n\nfunction decodeMapFromMap(registry, KeyClass, ValClass, value) {\n  const output = new Map();\n  value.forEach((val, key) => {\n    const isComplex = KeyClass.prototype instanceof AbstractArray || KeyClass.prototype instanceof Struct || KeyClass.prototype instanceof Enum;\n\n    try {\n      output.set(key instanceof KeyClass ? key : new KeyClass(registry, isComplex ? JSON.parse(key) : key), val instanceof ValClass ? val : new ValClass(registry, val));\n    } catch (error) {\n      l.error('Failed to decode key or value:', error.message);\n      throw error;\n    }\n  });\n  return output;\n}\n/**\n * Decode input to pass into constructor.\n *\n * @param KeyClass - Type of the map key\n * @param ValClass - Type of the map value\n * @param value - Value to decode, one of:\n * - null\n * - undefined\n * - hex\n * - Uint8Array\n * - Map<any, any>, where both key and value types are either\n *   constructors or decodeable values for their types.\n * @param jsonMap\n * @internal\n */\n\n\nfunction decodeMap(registry, keyType, valType, value) {\n  const KeyClass = typeToConstructor(registry, keyType);\n  const ValClass = typeToConstructor(registry, valType);\n\n  if (!value) {\n    return new Map();\n  } else if (isU8a(value) || isHex(value)) {\n    return decodeMapFromU8a(registry, KeyClass, ValClass, u8aToU8a(value));\n  } else if (value instanceof Map) {\n    return decodeMapFromMap(registry, KeyClass, ValClass, value);\n  } else if (isObject(value)) {\n    return decodeMapFromMap(registry, KeyClass, ValClass, new Map(Object.entries(value)));\n  }\n\n  throw new Error('Map: cannot decode type');\n}\n\nvar _KeyClass = /*#__PURE__*/_classPrivateFieldLooseKey(\"KeyClass\");\n\nvar _ValClass = /*#__PURE__*/_classPrivateFieldLooseKey(\"ValClass\");\n\nvar _type = /*#__PURE__*/_classPrivateFieldLooseKey(\"type\");\n\nexport class CodecMap extends Map {\n  constructor(registry, keyType, valType, rawValue, type = 'HashMap') {\n    const decoded = decodeMap(registry, keyType, valType, rawValue);\n    super(type === 'BTreeMap' ? sortMap(decoded) : decoded);\n    this.registry = void 0;\n    this.createdAtHash = void 0;\n    Object.defineProperty(this, _KeyClass, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _ValClass, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _type, {\n      writable: true,\n      value: void 0\n    });\n    this.registry = registry;\n    _classPrivateFieldLooseBase(this, _KeyClass)[_KeyClass] = typeToConstructor(registry, keyType);\n    _classPrivateFieldLooseBase(this, _ValClass)[_ValClass] = typeToConstructor(registry, valType);\n    _classPrivateFieldLooseBase(this, _type)[_type] = type;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    let len = compactToU8a(this.size).length;\n    this.forEach((v, k) => {\n      len += v.encodedLength + k.encodedLength;\n    });\n    return len;\n  }\n  /**\n   * @description Returns a hash of the value\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return this.size === 0;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return compareMap(this, other);\n  }\n  /**\n   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n   */\n\n\n  toHex() {\n    return u8aToHex(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    const json = {};\n    this.forEach((v, k) => {\n      json[k.toString()] = v.toHuman(isExtended);\n    });\n    return json;\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    const json = {};\n    this.forEach((v, k) => {\n      json[k.toString()] = v.toJSON();\n    });\n    return json;\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `${_classPrivateFieldLooseBase(this, _type)[_type]}<${this.registry.getClassName(_classPrivateFieldLooseBase(this, _KeyClass)[_KeyClass]) || new (_classPrivateFieldLooseBase(this, _KeyClass)[_KeyClass])(this.registry).toRawType()},${this.registry.getClassName(_classPrivateFieldLooseBase(this, _ValClass)[_ValClass]) || new (_classPrivateFieldLooseBase(this, _ValClass)[_ValClass])(this.registry).toRawType()}>`;\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return stringify(this.toJSON());\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    const encoded = new Array();\n\n    if (!isBare) {\n      encoded.push(compactToU8a(this.size));\n    }\n\n    this.forEach((v, k) => {\n      encoded.push(k.toU8a(isBare), v.toU8a(isBare));\n    });\n    return u8aConcat(...encoded);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}