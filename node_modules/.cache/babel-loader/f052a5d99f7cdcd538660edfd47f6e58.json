{"ast":null,"code":"var _jsxFileName = \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/src/Kitties.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Form, Grid } from 'semantic-ui-react';\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\nimport KittyCards from './KittyCards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Kitties(props) {\n  _s();\n\n  const {\n    api,\n    keyring\n  } = useSubstrate();\n  const {\n    accountPair\n  } = props;\n  const [kitties, setKitties] = useState([]);\n  const [status, setStatus] = useState('');\n\n  const fetchKitties = () => {\n    // TODO: 在这里调用 `api.query.kittiesModule.*` 函数去取得猫咪的信息。\n    // 你需要取得：\n    //   - 共有多少只猫咪\n    //   - 每只猫咪的主人是谁\n    //   - 每只猫咪的 DNA 是什么，用来组合出它的形态\n    const fetchData = async () => {\n      console.log(\"step1\");\n      const kittiesCount = await api.query.kittiesModule.kittiesCount();\n      console.log(`Kitties Count: ${kittiesCount}`);\n    };\n\n    fetchData();\n  };\n\n  const populateKitties = () => {\n    // TODO: 在这里添加额外的逻辑。你需要组成这样的数组结构：\n    //  ```javascript\n    //  const kitties = [{\n    //    id: 0,\n    //    dna: ...,\n    //    owner: ...\n    //  }, { id: ..., dna: ..., owner: ... }]\n    //  ```\n    // 这个 kitties 会传入 <KittyCards/> 然后对每只猫咪进行处理\n    //console.log(\"step2\");\n    const kitties = [];\n    setKitties(kitties);\n  };\n\n  useEffect(fetchKitties, [api, keyring]);\n  useEffect(populateKitties, []);\n  return /*#__PURE__*/_jsxDEV(Grid.Column, {\n    width: 16,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u5C0F\\u6BDB\\u5B69\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(KittyCards, {\n      kitties: kitties,\n      accountPair: accountPair,\n      setStatus: setStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      style: {\n        margin: '1em 0'\n      },\n      children: /*#__PURE__*/_jsxDEV(Form.Field, {\n        style: {\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(TxButton, {\n          accountPair: accountPair,\n          label: \"\\u521B\\u5EFA\\u5C0F\\u6BDB\\u5B69\",\n          type: \"SIGNED-TX\",\n          setStatus: setStatus,\n          attrs: {\n            palletRpc: 'kittiesModule',\n            callable: 'create',\n            inputParams: [],\n            paramFields: []\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        overflowWrap: 'break-word'\n      },\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Kitties, \"0u+NSFcTYJ4uqnW4Mr76qJJMNME=\", false, function () {\n  return [useSubstrate];\n});\n\n_c = Kitties;\n\nvar _c;\n\n$RefreshReg$(_c, \"Kitties\");","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/src/Kitties.js"],"names":["React","useEffect","useState","Form","Grid","useSubstrate","TxButton","KittyCards","Kitties","props","api","keyring","accountPair","kitties","setKitties","status","setStatus","fetchKitties","fetchData","console","log","kittiesCount","query","kittiesModule","populateKitties","margin","textAlign","palletRpc","callable","inputParams","paramFields","overflowWrap"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,mBAA3B;AAEA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,QAAT,QAAyB,4BAAzB;AAEA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,eAAe,SAASC,OAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACtC,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAmBN,YAAY,EAArC;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAkBH,KAAxB;AAEA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACa,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAMe,YAAY,GAAG,MAAM;AACzB;AACA;AACA;AACA;AACA;AAEA,UAAMC,SAAS,GAAG,YAAY;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,YAAMC,YAAY,GAAG,MAAMX,GAAG,CAACY,KAAJ,CAAUC,aAAV,CAAwBF,YAAxB,EAA3B;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiBC,YAAa,EAA3C;AACD,KAJD;;AAMAH,IAAAA,SAAS;AACV,GAdD;;AAgBA,QAAMM,eAAe,GAAG,MAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAMX,OAAO,GAAG,EAAhB;AACAC,IAAAA,UAAU,CAACD,OAAD,CAAV;AACD,GAbD;;AAeAZ,EAAAA,SAAS,CAACgB,YAAD,EAAe,CAACP,GAAD,EAAMC,OAAN,CAAf,CAAT;AACAV,EAAAA,SAAS,CAACuB,eAAD,EAAkB,EAAlB,CAAT;AAEA,sBAAO,QAAC,IAAD,CAAM,MAAN;AAAa,IAAA,KAAK,EAAE,EAApB;AAAA,4BACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADK,eAEL,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEX,OAArB;AAA8B,MAAA,WAAW,EAAED,WAA3C;AAAwD,MAAA,SAAS,EAAEI;AAAnE;AAAA;AAAA;AAAA;AAAA,YAFK,eAGL,QAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAES,QAAAA,MAAM,EAAE;AAAV,OAAb;AAAA,6BACE,QAAC,IAAD,CAAM,KAAN;AAAY,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAAnB;AAAA,+BACE,QAAC,QAAD;AACE,UAAA,WAAW,EAAEd,WADf;AAC4B,UAAA,KAAK,EAAC,gCADlC;AAC0C,UAAA,IAAI,EAAC,WAD/C;AAC2D,UAAA,SAAS,EAAEI,SADtE;AAEE,UAAA,KAAK,EAAE;AACLW,YAAAA,SAAS,EAAE,eADN;AAELC,YAAAA,QAAQ,EAAE,QAFL;AAGLC,YAAAA,WAAW,EAAE,EAHR;AAILC,YAAAA,WAAW,EAAE;AAJR;AAFT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHK,eAgBL;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,YAAY,EAAE;AAAhB,OAAZ;AAAA,gBAA6ChB;AAA7C;AAAA;AAAA;AAAA;AAAA,YAhBK;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAkBD;;GA3DuBP,O;UACGH,Y;;;KADHG,O","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Form, Grid } from 'semantic-ui-react'\n\nimport { useSubstrate } from './substrate-lib'\nimport { TxButton } from './substrate-lib/components'\n\nimport KittyCards from './KittyCards'\n\nexport default function Kitties (props) {\n  const { api, keyring } = useSubstrate()\n  const { accountPair } = props\n\n  const [kitties, setKitties] = useState([])\n  const [status, setStatus] = useState('')\n\n  const fetchKitties = () => {\n    // TODO: 在这里调用 `api.query.kittiesModule.*` 函数去取得猫咪的信息。\n    // 你需要取得：\n    //   - 共有多少只猫咪\n    //   - 每只猫咪的主人是谁\n    //   - 每只猫咪的 DNA 是什么，用来组合出它的形态\n\n    const fetchData = async () => {\n      console.log(\"step1\");\n      const kittiesCount = await api.query.kittiesModule.kittiesCount();\n      console.log(`Kitties Count: ${kittiesCount}`);\n    };\n\n    fetchData();\n  }\n\n  const populateKitties = () => {\n    // TODO: 在这里添加额外的逻辑。你需要组成这样的数组结构：\n    //  ```javascript\n    //  const kitties = [{\n    //    id: 0,\n    //    dna: ...,\n    //    owner: ...\n    //  }, { id: ..., dna: ..., owner: ... }]\n    //  ```\n    // 这个 kitties 会传入 <KittyCards/> 然后对每只猫咪进行处理\n    //console.log(\"step2\");\n    const kitties = []\n    setKitties(kitties)\n  }\n\n  useEffect(fetchKitties, [api, keyring])\n  useEffect(populateKitties, [])\n\n  return <Grid.Column width={16}>\n    <h1>小毛孩</h1>\n    <KittyCards kitties={kitties} accountPair={accountPair} setStatus={setStatus}/>\n    <Form style={{ margin: '1em 0' }}>\n      <Form.Field style={{ textAlign: 'center' }}>\n        <TxButton\n          accountPair={accountPair} label='创建小毛孩' type='SIGNED-TX' setStatus={setStatus}\n          attrs={{\n            palletRpc: 'kittiesModule',\n            callable: 'create',\n            inputParams: [],\n            paramFields: []\n          }}\n        />\n      </Form.Field>\n    </Form>\n    <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n  </Grid.Column>\n}\n"]},"metadata":{},"sourceType":"module"}