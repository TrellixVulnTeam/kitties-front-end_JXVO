{"ast":null,"code":"import _classCallCheck from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from '@polkadot/util';\nimport { Enum } from \"./Enum.js\";\n/**\n * @name Result\n * @description\n * A Result maps to the Rust Result type, that can either wrap a success or error value\n */\n\nexport var Result = /*#__PURE__*/function (_Enum) {\n  _inherits(Result, _Enum);\n\n  var _super = _createSuper(Result);\n\n  function Result(registry, Ok, Err, value) {\n    _classCallCheck(this, Result);\n\n    // NOTE This is order-dependent, Ok (with index 0) needs to be first\n    // eslint-disable-next-line sort-keys\n    return _super.call(this, registry, {\n      Ok: Ok,\n      Err: Err\n    }, value);\n  }\n\n  _createClass(Result, [{\n    key: \"asErr\",\n    get:\n    /**\n     * @description Returns the wrapper Err value (if isErr)\n     */\n    function get() {\n      assert(this.isErr, 'Cannot extract Err value from Ok result, check isErr first');\n      return this.value;\n    }\n    /**\n     * @deprecated Use asErr\n     */\n\n  }, {\n    key: \"asError\",\n    get: function get() {\n      return this.asErr;\n    }\n    /**\n     * @description Returns the wrapper Ok value (if isOk)\n     */\n\n  }, {\n    key: \"asOk\",\n    get: function get() {\n      assert(this.isOk, 'Cannot extract Ok value from Err result, check isOk first');\n      return this.value;\n    }\n    /**\n     * @description Checks if the Result has no value\n     */\n\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return this.isOk && this.value.isEmpty;\n    }\n    /**\n     * @description Checks if the Result wraps an Err value\n     */\n\n  }, {\n    key: \"isErr\",\n    get: function get() {\n      return !this.isOk;\n    }\n    /**\n     * @deprecated Use isErr\n     */\n\n  }, {\n    key: \"isError\",\n    get: function get() {\n      return this.isErr;\n    }\n    /**\n     * @description Checks if the Result wraps an Ok value\n     */\n\n  }, {\n    key: \"isOk\",\n    get: function get() {\n      return this.index === 0;\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      var Types = this._toRawStruct();\n\n      return \"Result<\".concat(Types.Ok, \",\").concat(Types.Err, \">\");\n    }\n  }], [{\n    key: \"with\",\n    value: function _with(Types) {\n      return /*#__PURE__*/function (_Result) {\n        _inherits(_class, _Result);\n\n        var _super2 = _createSuper(_class);\n\n        function _class(registry, value) {\n          _classCallCheck(this, _class);\n\n          return _super2.call(this, registry, Types.Ok, Types.Err, value);\n        }\n\n        return _class;\n      }(Result);\n    }\n  }]);\n\n  return Result;\n}(Enum);","map":{"version":3,"sources":["/home/spren/workspace/slides/advanced/term-03/03_polkadot-js-api/kitties/frontend/node_modules/@polkadot/types/codec/Result.js"],"names":["assert","Enum","Result","registry","Ok","Err","value","isErr","asErr","isOk","isEmpty","index","Types","_toRawStruct"],"mappings":";;;;AAAA;AACA;AACA,SAASA,MAAT,QAAuB,gBAAvB;AACA,SAASC,IAAT,QAAqB,WAArB;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAaC,MAAb;AAAA;;AAAA;;AACE,kBAAYC,QAAZ,EAAsBC,EAAtB,EAA0BC,GAA1B,EAA+BC,KAA/B,EAAsC;AAAA;;AACpC;AACA;AAFoC,6BAG9BH,QAH8B,EAGpB;AACdC,MAAAA,EAAE,EAAFA,EADc;AAEdC,MAAAA,GAAG,EAAHA;AAFc,KAHoB,EAMjCC,KANiC;AAOrC;;AARH;AAAA;AAAA;AAkBE;AACF;AACA;AAGE,mBAAY;AACVN,MAAAA,MAAM,CAAC,KAAKO,KAAN,EAAa,4DAAb,CAAN;AACA,aAAO,KAAKD,KAAZ;AACD;AACD;AACF;AACA;;AA7BA;AAAA;AAAA,SAgCE,eAAc;AACZ,aAAO,KAAKE,KAAZ;AACD;AACD;AACF;AACA;;AArCA;AAAA;AAAA,SAwCE,eAAW;AACTR,MAAAA,MAAM,CAAC,KAAKS,IAAN,EAAY,2DAAZ,CAAN;AACA,aAAO,KAAKH,KAAZ;AACD;AACD;AACF;AACA;;AA9CA;AAAA;AAAA,SAiDE,eAAc;AACZ,aAAO,KAAKG,IAAL,IAAa,KAAKH,KAAL,CAAWI,OAA/B;AACD;AACD;AACF;AACA;;AAtDA;AAAA;AAAA,SAyDE,eAAY;AACV,aAAO,CAAC,KAAKD,IAAb;AACD;AACD;AACF;AACA;;AA9DA;AAAA;AAAA,SAiEE,eAAc;AACZ,aAAO,KAAKF,KAAZ;AACD;AACD;AACF;AACA;;AAtEA;AAAA;AAAA,SAyEE,eAAW;AACT,aAAO,KAAKI,KAAL,KAAe,CAAtB;AACD;AACD;AACF;AACA;;AA9EA;AAAA;AAAA,WAiFE,qBAAY;AACV,UAAMC,KAAK,GAAG,KAAKC,YAAL,EAAd;;AAEA,8BAAiBD,KAAK,CAACR,EAAvB,cAA6BQ,KAAK,CAACP,GAAnC;AACD;AArFH;AAAA;AAAA,WAUE,eAAYO,KAAZ,EAAmB;AACjB;AAAA;;AAAA;;AACE,wBAAYT,QAAZ,EAAsBG,KAAtB,EAA6B;AAAA;;AAAA,oCACrBH,QADqB,EACXS,KAAK,CAACR,EADK,EACDQ,KAAK,CAACP,GADL,EACUC,KADV;AAE5B;;AAHH;AAAA,QAAqBJ,MAArB;AAMD;AAjBH;;AAAA;AAAA,EAA4BD,IAA5B","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from '@polkadot/util';\nimport { Enum } from \"./Enum.js\";\n/**\n * @name Result\n * @description\n * A Result maps to the Rust Result type, that can either wrap a success or error value\n */\n\nexport class Result extends Enum {\n  constructor(registry, Ok, Err, value) {\n    // NOTE This is order-dependent, Ok (with index 0) needs to be first\n    // eslint-disable-next-line sort-keys\n    super(registry, {\n      Ok,\n      Err\n    }, value);\n  }\n\n  static with(Types) {\n    return class extends Result {\n      constructor(registry, value) {\n        super(registry, Types.Ok, Types.Err, value);\n      }\n\n    };\n  }\n  /**\n   * @description Returns the wrapper Err value (if isErr)\n   */\n\n\n  get asErr() {\n    assert(this.isErr, 'Cannot extract Err value from Ok result, check isErr first');\n    return this.value;\n  }\n  /**\n   * @deprecated Use asErr\n   */\n\n\n  get asError() {\n    return this.asErr;\n  }\n  /**\n   * @description Returns the wrapper Ok value (if isOk)\n   */\n\n\n  get asOk() {\n    assert(this.isOk, 'Cannot extract Ok value from Err result, check isOk first');\n    return this.value;\n  }\n  /**\n   * @description Checks if the Result has no value\n   */\n\n\n  get isEmpty() {\n    return this.isOk && this.value.isEmpty;\n  }\n  /**\n   * @description Checks if the Result wraps an Err value\n   */\n\n\n  get isErr() {\n    return !this.isOk;\n  }\n  /**\n   * @deprecated Use isErr\n   */\n\n\n  get isError() {\n    return this.isErr;\n  }\n  /**\n   * @description Checks if the Result wraps an Ok value\n   */\n\n\n  get isOk() {\n    return this.index === 0;\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    const Types = this._toRawStruct();\n\n    return `Result<${Types.Ok},${Types.Err}>`;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}